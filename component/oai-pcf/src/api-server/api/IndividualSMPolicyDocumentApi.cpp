/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2020, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.1.alpha-5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualSMPolicyDocumentApi.h"
#include "Helpers.h"

namespace oai {
namespace pcf {
namespace api {

using namespace oai::model::common::helpers;
using namespace oai::pcf::model;

const std::string IndividualSMPolicyDocumentApi::base =
    "/npcf-smpolicycontrol/v1";

IndividualSMPolicyDocumentApi::IndividualSMPolicyDocumentApi(
    const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr) {}

void IndividualSMPolicyDocumentApi::init() {
  setupRoutes();
}

void IndividualSMPolicyDocumentApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(
      *router, base + "/sm-policies/:smPolicyId/delete",
      Routes::bind(
          &IndividualSMPolicyDocumentApi::delete_sm_policy_handler, this));
  Routes::Get(
      *router, base + "/sm-policies/:smPolicyId",
      Routes::bind(
          &IndividualSMPolicyDocumentApi::get_sm_policy_handler, this));
  Routes::Post(
      *router, base + "/sm-policies/:smPolicyId/update",
      Routes::bind(
          &IndividualSMPolicyDocumentApi::update_sm_policy_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &IndividualSMPolicyDocumentApi::
          individual_sm_policy_document_api_default_handler,
      this));
}

std::pair<Pistache::Http::Code, std::string>
IndividualSMPolicyDocumentApi::handleParsingException(
    const std::exception& /* ex */) const noexcept {
  try {
    throw;
  } catch (nlohmann::detail::exception& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    //    } catch (org::openapitools::server::helpers::ValidationException &e) {
    //        return std::make_pair(Pistache::Http::Code::Bad_Request,
    //        e.what());
  } catch (std::exception& e) {
    return std::make_pair(
        Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

std::pair<Pistache::Http::Code, std::string>
IndividualSMPolicyDocumentApi::handleOperationException(
    const std::exception& ex) const noexcept {
  return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void IndividualSMPolicyDocumentApi::delete_sm_policy_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto smPolicyId = request.param(":smPolicyId").as<std::string>();

    // Getting the body param

    SmPolicyDeleteData smPolicyDeleteData;

    try {
      nlohmann::json::parse(request.body()).get_to(smPolicyDeleteData);
      smPolicyDeleteData.validate();
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleParsingException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

    try {
      this->delete_sm_policy(smPolicyId, smPolicyDeleteData, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void IndividualSMPolicyDocumentApi::get_sm_policy_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto smPolicyId = request.param(":smPolicyId").as<std::string>();

    try {
      this->get_sm_policy(smPolicyId, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}
void IndividualSMPolicyDocumentApi::update_sm_policy_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    // Getting the path params
    auto smPolicyId = request.param(":smPolicyId").as<std::string>();

    // Getting the body param

    SmPolicyUpdateContextData smPolicyUpdateContextData;

    try {
      nlohmann::json::parse(request.body()).get_to(smPolicyUpdateContextData);
      smPolicyUpdateContextData.validate();
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleParsingException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

    try {
      this->update_sm_policy(smPolicyId, smPolicyUpdateContextData, response);
    } catch (Pistache::Http::HttpError& e) {
      response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
      return;
    } catch (std::exception& e) {
      const std::pair<Pistache::Http::Code, std::string> errorInfo =
          this->handleOperationException(e);
      response.send(errorInfo.first, errorInfo.second);
      return;
    }

  } catch (std::exception& e) {
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

void IndividualSMPolicyDocumentApi::
    individual_sm_policy_document_api_default_handler(
        const Pistache::Rest::Request&,
        Pistache::Http::ResponseWriter response) {
  response.send(
      Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}  // namespace api
}  // namespace pcf
}  // namespace oai
