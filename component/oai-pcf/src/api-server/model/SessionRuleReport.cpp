/**
 * Npcf_SMPolicyControl API
 * Session Management Policy Control Service Â© 2020, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.1.alpha-5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SessionRuleReport.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace pcf {
namespace model {

SessionRuleReport::SessionRuleReport() {
  m_SessRuleFailureCodeIsSet = false;
}

void SessionRuleReport::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    //        throw
    //        org::openapitools::server::helpers::ValidationException(msg.str());
  }
}

bool SessionRuleReport::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SessionRuleReport::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SessionRuleReport" : pathPrefix;

  /* RuleIds */ {
    const std::vector<std::string>& value = m_RuleIds;
    const std::string currentValuePath    = _pathPrefix + ".ruleIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    /*
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
    */
  }

  return success;
}

bool SessionRuleReport::operator==(const SessionRuleReport& rhs) const {
  return

      (getRuleIds() == rhs.getRuleIds()) &&

      (getRuleStatus() == rhs.getRuleStatus()) &&

      ((!sessRuleFailureCodeIsSet() && !rhs.sessRuleFailureCodeIsSet()) ||
       (sessRuleFailureCodeIsSet() && rhs.sessRuleFailureCodeIsSet() &&
        getSessRuleFailureCode() == rhs.getSessRuleFailureCode()))

          ;
}

bool SessionRuleReport::operator!=(const SessionRuleReport& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SessionRuleReport& o) {
  j               = nlohmann::json();
  j["ruleIds"]    = o.m_RuleIds;
  j["ruleStatus"] = o.m_RuleStatus;
  if (o.sessRuleFailureCodeIsSet())
    j["sessRuleFailureCode"] = o.m_SessRuleFailureCode;
}

void from_json(const nlohmann::json& j, SessionRuleReport& o) {
  j.at("ruleIds").get_to(o.m_RuleIds);
  j.at("ruleStatus").get_to(o.m_RuleStatus);
  if (j.find("sessRuleFailureCode") != j.end()) {
    j.at("sessRuleFailureCode").get_to(o.m_SessRuleFailureCode);
    o.m_SessRuleFailureCodeIsSet = true;
  }
}

std::vector<std::string> SessionRuleReport::getRuleIds() const {
  return m_RuleIds;
}
void SessionRuleReport::setRuleIds(std::vector<std::string> const& value) {
  m_RuleIds = value;
}
RuleStatus SessionRuleReport::getRuleStatus() const {
  return m_RuleStatus;
}
void SessionRuleReport::setRuleStatus(RuleStatus const& value) {
  m_RuleStatus = value;
}
SessionRuleFailureCode SessionRuleReport::getSessRuleFailureCode() const {
  return m_SessRuleFailureCode;
}
void SessionRuleReport::setSessRuleFailureCode(
    SessionRuleFailureCode const& value) {
  m_SessRuleFailureCode      = value;
  m_SessRuleFailureCodeIsSet = true;
}
bool SessionRuleReport::sessRuleFailureCodeIsSet() const {
  return m_SessRuleFailureCodeIsSet;
}
void SessionRuleReport::unsetSessRuleFailureCode() {
  m_SessRuleFailureCodeIsSet = false;
}

}  // namespace model
}  // namespace pcf
}  // namespace oai
