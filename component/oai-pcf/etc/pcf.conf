################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
PCF =
{
    # 0 is the default
    INSTANCE_ID       = {{ env["INSTANCE"] if "INSTANCE" in env.keys() else '0' }};
    # /var/run is the default
    PID_DIRECTORY     = "{{ env["PID_DIRECTORY"] if "PID_DIRECTORY" in env.keys() else '/var/run' }}";
    # PCF local slice config file in json format
    PCF_SLICE_CONFIG = "{{ env["PCF_SLICE_CONFIG"] }}";

    PCF_NAME  = "{{ env["PCF_NAME"] }}";
    FQDN      = "{{ env["PCF_FQDN"] }}";

    PCC_RULES_DIRECTORY = "{{ env["PCC_RULES_DIR"] }}";
    TRAFFIC_RULES_DIRECTORY = "{{ env["TRAFFIC_RULES_DIR"] }}";
    POLICY_DECISIONS_DIRECTORY = "{{ env["POLICY_DECISIONS_DIR"] }}";

    INTERFACES :
    {
        SBI: # PCF binded interface for SBI interface (e.g., communication with AMF, SMF, NRF)
        {
            # STRING, interface name, YOUR NETWORK CONFIG HERE
            INTERFACE_NAME         = "{{ env["SBI_IF_NAME"] }}";
            # STRING, CIDR or "read to let app read interface configured IP address
            IPV4_ADDRESS           = "read";
            # Default is 80
            HTTP1_PORT             = {{ env["SBI_PORT_HTTP1"] if "SBI_PORT_HTTP1" in env.keys() else '80' }};
            # Default is 8080
            HTTP2_PORT             = {{ env["SBI_PORT_HTTP2"] if "SBI_PORT_HTTP2" in env.keys() else '8080' }};
            # Default is v2
            API_VERSION            = "{{ env["SBI_API_VERSION"] if "SBI_API_VERSION"in env.keys() else 'v2' }}";
        };
    };
    # SUPPORT FEATURES
    SUPPORT_FEATURES:
    {
      # STRING, {"yes", "no"},
      # Set to yes if SMF resgisters to an NRF
      REGISTER_NRF = "{{ env["REGISTER_NRF"] if "REGISTER_NRF" in env.keys() else 'no' }}";
      # Set to yes if AMF/UDM/NRF/UPF will relying on a DNS to resolve FQDN
      USE_FQDN     = "{{ env["USE_FQDN_DNS"] if "USE_FQDN_DNS" in env.keys() else 'no' }}";
      # Set to yes if PCF will use HTTP2 as client, default is "no"
      USE_HTTP2    = "{{ env["USE_HTTP2"] if "USE_HTTP2" in env.keys() else 'no' }}";
    }

    NRF :
    {
      {%- if env["NRF_HOSTNAME"] is defined %}
      IPV4_ADDRESS = "{{ resolve(env["NRF_HOSTNAME"]) }}";
      {%- else %}
      IPV4_ADDRESS = "{{ env["NRF_IPV4_ADDRESS"] if "NRF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      {%- endif %}
      # Default: 80
      PORT         = {{ env["NRF_PORT"] if "NRF_PORT" in env.keys() else '80' }};
      # Default: v1
      API_VERSION  = "{{ env["NRF_API_VERSION"] if "NRF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["NRF_FQDN"] if "NRF_FQDN" in env.keys() else 'localhost' }}"
    };

};
