/**
 * Nnef_EventExposure
 * Session Management Event Exposure Service. Â© 2019, 3GPP Organizational
 * Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "NFEventNotifyApiImpl.h"

#include "3gpp_29.500.h"
#include "ProblemDetails.h"
#include "logger.hpp"
#include "nef_app.hpp"
#include "nef_config.hpp"

extern oai::nef::app::nef_config nef_cfg;

namespace oai::nef::api {

using namespace oai::nef::model;

NFEventNotifyApiImpl::NFEventNotifyApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr,
    oai::nef::app::nef_app* nef_app_inst, std::string address)
    : NFEventNotifyApi(rtr), m_nef_app(nef_app_inst), m_address(address) {}

void NFEventNotifyApiImpl::receive_nf_event_notification(
    const NefEventExposureNotif& eventExposureNotif,
    Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info("Got a NF Event Notification");

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  std::string sub_id             = {};
  uint8_t http_version           = 1;
  nlohmann::json response_json   = {};

  NefEventExposureSubsc created_ev_sub = {};
  m_nef_app->handle_nf_event_notification(
      eventExposureNotif, response_json, http_version, http_code);

  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    content_type = "application/problem+json";
  }

  // Content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));
  response.send(Pistache::Http::Code(http_code), response_json.dump().c_str());
}

void NFEventNotifyApiImpl::receive_amf_event_notification(
    const AmfEventNotification& amfEventNotification,
    Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info("Got an Event Notification message from AMF");

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  std::string sub_id             = {};
  uint8_t http_version           = 1;
  nlohmann::json response_json   = {};

  m_nef_app->handle_amf_event_notification(
      amfEventNotification, response_json, http_version, http_code);

  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    content_type = "application/problem+json";
  }

  // Content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));
  response.send(Pistache::Http::Code(http_code), response_json.dump().c_str());
}

void NFEventNotifyApiImpl::receive_smf_event_notification(
    const NsmfEventExposureNotification& smfEventExposureNotification,
    Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info("Got an Event Notification message from SMF");

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  std::string sub_id             = {};
  uint8_t http_version           = 1;
  nlohmann::json response_json   = {};

  m_nef_app->handle_smf_event_notification(
      smfEventExposureNotification, response_json, http_version, http_code);

  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    content_type = "application/problem+json";
  }

  // Content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));
  response.send(Pistache::Http::Code(http_code), response_json.dump().c_str());
}

void NFEventNotifyApiImpl::receive_udm_event_notification(
    const std::vector<MonitoringReport>& eventExposureNotif,
    Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info("Got an Event Notification message from UDM");

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  std::string sub_id             = {};
  uint8_t http_version           = 1;
  nlohmann::json response_json   = {};

  m_nef_app->handle_udm_event_notification(
      eventExposureNotif, response_json, http_version, http_code);

  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    content_type = "application/problem+json";
  }

  // Content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));
  response.send(Pistache::Http::Code(http_code), response_json.dump().c_str());
}

}  // namespace oai::nef::api
