/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * MonitoringEventSubscriptionsApiImpl.h
 *
 *
 */

#ifndef MONITORING_EVENT_SUBSCRIPTIONS_API_IMPL_H_
#define MONITORING_EVENT_SUBSCRIPTIONS_API_IMPL_H_

#include <MonitoringEventSubscriptionsApi.h>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <memory>
#include <optional>
#include <string>

#include "IpAddr.h"
#include "MonitoringEventReport.h"
#include "MonitoringEventReports.h"
#include "MonitoringEventSubscription.h"
#include "ProblemDetails.h"
#include "nef_app.hpp"

namespace oai::nef::api {

using namespace oai::nef::model;

class MonitoringEventSubscriptionsApiImpl
    : public oai::nef::api::MonitoringEventSubscriptionsApi {
 public:
  explicit MonitoringEventSubscriptionsApiImpl(
      const std::shared_ptr<Pistache::Rest::Router>& rtr,
      oai::nef::app::nef_app* nef_app_inst, std::string address);
  ~MonitoringEventSubscriptionsApiImpl() override = default;

  void create_monitoring_event_subscription(
      const std::string& scsAsId,
      const MonitoringEventSubscription& monitoringEventSubscription,
      Pistache::Http::ResponseWriter& response);
  void fetch_all_monitoring_event_subscriptions(
      const std::string& scsAsId,
      const std::optional<std::vector<IpAddr>>& ipAddrs,
      const std::optional<std::string>& ipDomain,
      const std::optional<std::vector<std::string>>& macAddrs,
      Pistache::Http::ResponseWriter& response);

 private:
  oai::nef::app::nef_app* m_nef_app;
  std::string m_address;
};

}  // namespace oai::nef::api

#endif
