/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IndividualMonitoringEventSubscriptionApiImpl.h"

#include "3gpp_29.500.h"
#include "logger.hpp"
#include "nef_app.hpp"
#include "nef_config.hpp"

extern oai::nef::app::nef_config nef_cfg;

namespace oai {
namespace nef {
namespace api {

using namespace oai::nef::model;

IndividualMonitoringEventSubscriptionApiImpl::
    IndividualMonitoringEventSubscriptionApiImpl(
        const std::shared_ptr<Pistache::Rest::Router>& rtr,
        oai::nef::app::nef_app* nef_app_inst, std::string address)
    : IndividualMonitoringEventSubscriptionApi(rtr),
      m_nef_app(nef_app_inst),
      m_address(address) {}

void IndividualMonitoringEventSubscriptionApiImpl::
    delete_ind_monitoring_event_subscription(
        const std::string& scsAsId, const std::string& subscriptionId,
        Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info(
      "Got a request to remove an existing Monitoring Event Subscription, "
      "subscription ID %s",
      subscriptionId.c_str());

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  uint8_t http_version           = 1;

  m_nef_app->handle_delete_ind_monitoring_event_subscription(
      scsAsId, subscriptionId, http_version, http_code, problem_details);

  nlohmann::json json_data = {};
  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    to_json(json_data, problem_details);
    content_type = "application/problem+json";
    // content type
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType(content_type));
    response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
  } else {
    // content type
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType(content_type));
    response.send(Pistache::Http::Code(http_code));
  }
}
void IndividualMonitoringEventSubscriptionApiImpl::
    fetch_ind_monitoring_event_subscription(
        const std::string& scsAsId, const std::string& subscriptionId,
        Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info(
      "Got a request to get an existing Monitoring Event Subscription, "
      "subscription ID %s",
      subscriptionId.c_str());

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  uint8_t http_version           = 1;
  nlohmann::json json_data       = {};

  m_nef_app->handle_fetch_ind_monitoring_event_subscription(
      scsAsId, subscriptionId, http_version, json_data, http_code);

  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_200_OK) {
    content_type = "application/problem+json";
  }

  Logger::nef_sbi().debug("Json data: %s", json_data.dump().c_str());

  // content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));

  response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
}
void IndividualMonitoringEventSubscriptionApiImpl::
    modify_ind_monitoring_event_subscription(
        const std::string& scsAsId, const std::string& subscriptionId,
        const std::vector<PatchItem>& patchItem,
        Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info(
      "Got a request to update an existing Monitoring Event Subscription, "
      "subscription ID %s",
      subscriptionId.c_str());

  int http_code                  = 0;
  ProblemDetails problem_details = {};
  uint8_t http_version           = 1;
  m_nef_app->handle_modify_ind_monitoring_event_subscription(
      scsAsId, subscriptionId, patchItem, http_version, http_code,
      problem_details);

  nlohmann::json json_data = {};
  std::string content_type = "application/json";

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT) {
    to_json(json_data, problem_details);
    content_type = "application/problem+json";
    // content type
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType(content_type));
    response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
  } else {
    // content type
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType(content_type));
    response.send(Pistache::Http::Code(http_code));
  }
}
void IndividualMonitoringEventSubscriptionApiImpl::
    update_ind_monitoring_event_subscription(
        const std::string& scsAsId, const std::string& subscriptionId,
        const MonitoringEventSubscription& monitoringEventSubscription,
        Pistache::Http::ResponseWriter& response) {
  Logger::nef_sbi().info(
      "Got a request to update an existing Monitoring Event Subscription, "
      "subscription ID %s",
      subscriptionId.c_str());

  int http_code            = 0;
  uint8_t http_version     = 1;
  nlohmann::json json_data = {};

  m_nef_app->handle_update_ind_monitoring_event_subscription(
      scsAsId, subscriptionId, monitoringEventSubscription, http_version,
      json_data, http_code);

  std::string content_type = "application/json";

  if ((http_code != HTTP_STATUS_CODE_200_OK) and
      (http_code != HTTP_STATUS_CODE_204_NO_CONTENT)) {
    content_type = "application/problem+json";
  }

  Logger::nef_sbi().debug("Json data: %s", json_data.dump().c_str());

  // content type
  response.headers().add<Pistache::Http::Header::ContentType>(
      Pistache::Http::Mime::MediaType(content_type));

  if (http_code != HTTP_STATUS_CODE_204_NO_CONTENT)
    response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
  else
    response.send(Pistache::Http::Code(http_code));
}

}  // namespace api
}  // namespace nef
}  // namespace oai
