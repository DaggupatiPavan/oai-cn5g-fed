/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 *file except in compliance with the License. You may obtain a copy of the
 *License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#ifndef FILE_NEF_API_SERVER_SEEN
#define FILE_NEF_API_SERVER_SEEN

#include "pistache/endpoint.h"
#include "pistache/http.h"
#include "pistache/router.h"
#ifdef __linux__
#include <signal.h>
#include <unistd.h>

#include <vector>
#endif

#include "IndividualMonitoringEventSubscriptionApiImpl.h"
#include "IndividualSubscriptionDocumentApiImpl.h"
#include "MonitoringEventSubscriptionsApiImpl.h"
#include "NFEventNotifyApiImpl.h"
#include "SubscriptionsCollectionApiImpl.h"
#include "nef_app.hpp"

using namespace oai::nef::api;
using namespace oai::nef::app;
class NEFApiServer {
 public:
  NEFApiServer(Pistache::Address address, nef_app* nef_app_inst)
      : m_httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(address)) {
    m_router  = std::make_shared<Pistache::Rest::Router>();
    m_address = address.host() + ":" + (address.port()).toString();

    m_individualSubscriptionDocumentApiImpl =
        std::make_shared<IndividualSubscriptionDocumentApiImpl>(
            m_router, nef_app_inst, m_address);

    m_nfEventNotifyApiImpl = std::make_shared<NFEventNotifyApiImpl>(
        m_router, nef_app_inst, m_address);
    m_subscriptionsCollectionApiImpl =
        std::make_shared<SubscriptionsCollectionApiImpl>(
            m_router, nef_app_inst, m_address);

    m_individualMonitoringEventSubscriptionApiImpl =
        std::make_shared<IndividualMonitoringEventSubscriptionApiImpl>(
            m_router, nef_app_inst, m_address);
    m_monitoringEventSubscriptionsApiImpl =
        std::make_shared<MonitoringEventSubscriptionsApiImpl>(
            m_router, nef_app_inst, m_address);
  }
  void init(size_t thr = 1);
  void start();
  void shutdown();

 private:
  std::shared_ptr<Pistache::Http::Endpoint> m_httpEndpoint;
  std::shared_ptr<Pistache::Rest::Router> m_router;
  std::string m_address;
  std::shared_ptr<IndividualSubscriptionDocumentApiImpl>
      m_individualSubscriptionDocumentApiImpl;
  std::shared_ptr<NFEventNotifyApiImpl> m_nfEventNotifyApiImpl;
  std::shared_ptr<SubscriptionsCollectionApiImpl>
      m_subscriptionsCollectionApiImpl;

  std::shared_ptr<IndividualMonitoringEventSubscriptionApiImpl>
      m_individualMonitoringEventSubscriptionApiImpl;
  std::shared_ptr<MonitoringEventSubscriptionsApiImpl>
      m_monitoringEventSubscriptionsApiImpl;
};

#endif
