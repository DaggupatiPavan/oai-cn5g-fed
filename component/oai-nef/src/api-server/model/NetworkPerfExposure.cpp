/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NetworkPerfExposure.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

NetworkPerfExposure::NetworkPerfExposure() {
  m_RelativeRatio      = 0;
  m_RelativeRatioIsSet = false;
  m_AbsoluteNum        = 0;
  m_AbsoluteNumIsSet   = false;
  m_Confidence         = 0;
  m_ConfidenceIsSet    = false;
}

void NetworkPerfExposure::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool NetworkPerfExposure::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NetworkPerfExposure::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NetworkPerfExposure" : pathPrefix;

  if (relativeRatioIsSet()) {
    const int32_t& value               = m_RelativeRatio;
    const std::string currentValuePath = _pathPrefix + ".relativeRatio";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  if (absoluteNumIsSet()) {
    const int32_t& value               = m_AbsoluteNum;
    const std::string currentValuePath = _pathPrefix + ".absoluteNum";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (confidenceIsSet()) {
    const int32_t& value               = m_Confidence;
    const std::string currentValuePath = _pathPrefix + ".confidence";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool NetworkPerfExposure::operator==(const NetworkPerfExposure& rhs) const {
  return

      (getLocArea() == rhs.getLocArea()) &&

      (getNwPerfType() == rhs.getNwPerfType()) &&

      ((!relativeRatioIsSet() && !rhs.relativeRatioIsSet()) ||
       (relativeRatioIsSet() && rhs.relativeRatioIsSet() &&
        getRelativeRatio() == rhs.getRelativeRatio())) &&

      ((!absoluteNumIsSet() && !rhs.absoluteNumIsSet()) ||
       (absoluteNumIsSet() && rhs.absoluteNumIsSet() &&
        getAbsoluteNum() == rhs.getAbsoluteNum())) &&

      ((!confidenceIsSet() && !rhs.confidenceIsSet()) ||
       (confidenceIsSet() && rhs.confidenceIsSet() &&
        getConfidence() == rhs.getConfidence()))

          ;
}

bool NetworkPerfExposure::operator!=(const NetworkPerfExposure& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NetworkPerfExposure& o) {
  j               = nlohmann::json();
  j["locArea"]    = o.m_LocArea;
  j["nwPerfType"] = o.m_NwPerfType;
  if (o.relativeRatioIsSet()) j["relativeRatio"] = o.m_RelativeRatio;
  if (o.absoluteNumIsSet()) j["absoluteNum"] = o.m_AbsoluteNum;
  if (o.confidenceIsSet()) j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json& j, NetworkPerfExposure& o) {
  j.at("locArea").get_to(o.m_LocArea);
  j.at("nwPerfType").get_to(o.m_NwPerfType);
  if (j.find("relativeRatio") != j.end()) {
    j.at("relativeRatio").get_to(o.m_RelativeRatio);
    o.m_RelativeRatioIsSet = true;
  }
  if (j.find("absoluteNum") != j.end()) {
    j.at("absoluteNum").get_to(o.m_AbsoluteNum);
    o.m_AbsoluteNumIsSet = true;
  }
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

LocationArea5G NetworkPerfExposure::getLocArea() const {
  return m_LocArea;
}
void NetworkPerfExposure::setLocArea(LocationArea5G const& value) {
  m_LocArea = value;
}
NetworkPerfType NetworkPerfExposure::getNwPerfType() const {
  return m_NwPerfType;
}
void NetworkPerfExposure::setNwPerfType(NetworkPerfType const& value) {
  m_NwPerfType = value;
}
int32_t NetworkPerfExposure::getRelativeRatio() const {
  return m_RelativeRatio;
}
void NetworkPerfExposure::setRelativeRatio(int32_t const value) {
  m_RelativeRatio      = value;
  m_RelativeRatioIsSet = true;
}
bool NetworkPerfExposure::relativeRatioIsSet() const {
  return m_RelativeRatioIsSet;
}
void NetworkPerfExposure::unsetRelativeRatio() {
  m_RelativeRatioIsSet = false;
}
int32_t NetworkPerfExposure::getAbsoluteNum() const {
  return m_AbsoluteNum;
}
void NetworkPerfExposure::setAbsoluteNum(int32_t const value) {
  m_AbsoluteNum      = value;
  m_AbsoluteNumIsSet = true;
}
bool NetworkPerfExposure::absoluteNumIsSet() const {
  return m_AbsoluteNumIsSet;
}
void NetworkPerfExposure::unsetAbsoluteNum() {
  m_AbsoluteNumIsSet = false;
}
int32_t NetworkPerfExposure::getConfidence() const {
  return m_Confidence;
}
void NetworkPerfExposure::setConfidence(int32_t const value) {
  m_Confidence      = value;
  m_ConfidenceIsSet = true;
}
bool NetworkPerfExposure::confidenceIsSet() const {
  return m_ConfidenceIsSet;
}
void NetworkPerfExposure::unsetConfidence() {
  m_ConfidenceIsSet = false;
}

}  // namespace oai::nef::model
