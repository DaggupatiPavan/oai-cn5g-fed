/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeCommunication.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

UeCommunication::UeCommunication() {
  m_CommDur                = 0;
  m_CommDurVariance        = 0.0f;
  m_CommDurVarianceIsSet   = false;
  m_PerioTime              = 0;
  m_PerioTimeIsSet         = false;
  m_PerioTimeVariance      = 0.0f;
  m_PerioTimeVarianceIsSet = false;
  m_Ts                     = "";
  m_TsIsSet                = false;
  m_TsVariance             = 0.0f;
  m_TsVarianceIsSet        = false;
  m_RecurringTimeIsSet     = false;
  m_Ratio                  = 0;
  m_RatioIsSet             = false;
  m_Confidence             = 0;
  m_ConfidenceIsSet        = false;
}

void UeCommunication::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool UeCommunication::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeCommunication::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeCommunication" : pathPrefix;

  if (ratioIsSet()) {
    const int32_t& value               = m_Ratio;
    const std::string currentValuePath = _pathPrefix + ".ratio";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  if (confidenceIsSet()) {
    const int32_t& value               = m_Confidence;
    const std::string currentValuePath = _pathPrefix + ".confidence";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool UeCommunication::operator==(const UeCommunication& rhs) const {
  return

      (getCommDur() == rhs.getCommDur()) &&

      ((!commDurVarianceIsSet() && !rhs.commDurVarianceIsSet()) ||
       (commDurVarianceIsSet() && rhs.commDurVarianceIsSet() &&
        getCommDurVariance() == rhs.getCommDurVariance())) &&

      ((!perioTimeIsSet() && !rhs.perioTimeIsSet()) ||
       (perioTimeIsSet() && rhs.perioTimeIsSet() &&
        getPerioTime() == rhs.getPerioTime())) &&

      ((!perioTimeVarianceIsSet() && !rhs.perioTimeVarianceIsSet()) ||
       (perioTimeVarianceIsSet() && rhs.perioTimeVarianceIsSet() &&
        getPerioTimeVariance() == rhs.getPerioTimeVariance())) &&

      ((!tsIsSet() && !rhs.tsIsSet()) ||
       (tsIsSet() && rhs.tsIsSet() && getTs() == rhs.getTs())) &&

      ((!tsVarianceIsSet() && !rhs.tsVarianceIsSet()) ||
       (tsVarianceIsSet() && rhs.tsVarianceIsSet() &&
        getTsVariance() == rhs.getTsVariance())) &&

      ((!recurringTimeIsSet() && !rhs.recurringTimeIsSet()) ||
       (recurringTimeIsSet() && rhs.recurringTimeIsSet() &&
        getRecurringTime() == rhs.getRecurringTime())) &&

      (getTrafChar() == rhs.getTrafChar()) &&

      ((!ratioIsSet() && !rhs.ratioIsSet()) ||
       (ratioIsSet() && rhs.ratioIsSet() && getRatio() == rhs.getRatio())) &&

      ((!confidenceIsSet() && !rhs.confidenceIsSet()) ||
       (confidenceIsSet() && rhs.confidenceIsSet() &&
        getConfidence() == rhs.getConfidence()))

          ;
}

bool UeCommunication::operator!=(const UeCommunication& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeCommunication& o) {
  j            = nlohmann::json();
  j["commDur"] = o.m_CommDur;
  if (o.commDurVarianceIsSet()) j["commDurVariance"] = o.m_CommDurVariance;
  if (o.perioTimeIsSet()) j["perioTime"] = o.m_PerioTime;
  if (o.perioTimeVarianceIsSet())
    j["perioTimeVariance"] = o.m_PerioTimeVariance;
  if (o.tsIsSet()) j["ts"] = o.m_Ts;
  if (o.tsVarianceIsSet()) j["tsVariance"] = o.m_TsVariance;
  if (o.recurringTimeIsSet()) j["recurringTime"] = o.m_RecurringTime;
  j["trafChar"] = o.m_TrafChar;
  if (o.ratioIsSet()) j["ratio"] = o.m_Ratio;
  if (o.confidenceIsSet()) j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json& j, UeCommunication& o) {
  j.at("commDur").get_to(o.m_CommDur);
  if (j.find("commDurVariance") != j.end()) {
    j.at("commDurVariance").get_to(o.m_CommDurVariance);
    o.m_CommDurVarianceIsSet = true;
  }
  if (j.find("perioTime") != j.end()) {
    j.at("perioTime").get_to(o.m_PerioTime);
    o.m_PerioTimeIsSet = true;
  }
  if (j.find("perioTimeVariance") != j.end()) {
    j.at("perioTimeVariance").get_to(o.m_PerioTimeVariance);
    o.m_PerioTimeVarianceIsSet = true;
  }
  if (j.find("ts") != j.end()) {
    j.at("ts").get_to(o.m_Ts);
    o.m_TsIsSet = true;
  }
  if (j.find("tsVariance") != j.end()) {
    j.at("tsVariance").get_to(o.m_TsVariance);
    o.m_TsVarianceIsSet = true;
  }
  if (j.find("recurringTime") != j.end()) {
    j.at("recurringTime").get_to(o.m_RecurringTime);
    o.m_RecurringTimeIsSet = true;
  }
  j.at("trafChar").get_to(o.m_TrafChar);
  if (j.find("ratio") != j.end()) {
    j.at("ratio").get_to(o.m_Ratio);
    o.m_RatioIsSet = true;
  }
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

int32_t UeCommunication::getCommDur() const {
  return m_CommDur;
}
void UeCommunication::setCommDur(int32_t const value) {
  m_CommDur = value;
}
float UeCommunication::getCommDurVariance() const {
  return m_CommDurVariance;
}
void UeCommunication::setCommDurVariance(float const value) {
  m_CommDurVariance      = value;
  m_CommDurVarianceIsSet = true;
}
bool UeCommunication::commDurVarianceIsSet() const {
  return m_CommDurVarianceIsSet;
}
void UeCommunication::unsetCommDurVariance() {
  m_CommDurVarianceIsSet = false;
}
int32_t UeCommunication::getPerioTime() const {
  return m_PerioTime;
}
void UeCommunication::setPerioTime(int32_t const value) {
  m_PerioTime      = value;
  m_PerioTimeIsSet = true;
}
bool UeCommunication::perioTimeIsSet() const {
  return m_PerioTimeIsSet;
}
void UeCommunication::unsetPerioTime() {
  m_PerioTimeIsSet = false;
}
float UeCommunication::getPerioTimeVariance() const {
  return m_PerioTimeVariance;
}
void UeCommunication::setPerioTimeVariance(float const value) {
  m_PerioTimeVariance      = value;
  m_PerioTimeVarianceIsSet = true;
}
bool UeCommunication::perioTimeVarianceIsSet() const {
  return m_PerioTimeVarianceIsSet;
}
void UeCommunication::unsetPerioTimeVariance() {
  m_PerioTimeVarianceIsSet = false;
}
std::string UeCommunication::getTs() const {
  return m_Ts;
}
void UeCommunication::setTs(std::string const& value) {
  m_Ts      = value;
  m_TsIsSet = true;
}
bool UeCommunication::tsIsSet() const {
  return m_TsIsSet;
}
void UeCommunication::unsetTs() {
  m_TsIsSet = false;
}
float UeCommunication::getTsVariance() const {
  return m_TsVariance;
}
void UeCommunication::setTsVariance(float const value) {
  m_TsVariance      = value;
  m_TsVarianceIsSet = true;
}
bool UeCommunication::tsVarianceIsSet() const {
  return m_TsVarianceIsSet;
}
void UeCommunication::unsetTsVariance() {
  m_TsVarianceIsSet = false;
}
ScheduledCommunicationTime UeCommunication::getRecurringTime() const {
  return m_RecurringTime;
}
void UeCommunication::setRecurringTime(
    ScheduledCommunicationTime const& value) {
  m_RecurringTime      = value;
  m_RecurringTimeIsSet = true;
}
bool UeCommunication::recurringTimeIsSet() const {
  return m_RecurringTimeIsSet;
}
void UeCommunication::unsetRecurringTime() {
  m_RecurringTimeIsSet = false;
}
TrafficCharacterization UeCommunication::getTrafChar() const {
  return m_TrafChar;
}
void UeCommunication::setTrafChar(TrafficCharacterization const& value) {
  m_TrafChar = value;
}
int32_t UeCommunication::getRatio() const {
  return m_Ratio;
}
void UeCommunication::setRatio(int32_t const value) {
  m_Ratio      = value;
  m_RatioIsSet = true;
}
bool UeCommunication::ratioIsSet() const {
  return m_RatioIsSet;
}
void UeCommunication::unsetRatio() {
  m_RatioIsSet = false;
}
int32_t UeCommunication::getConfidence() const {
  return m_Confidence;
}
void UeCommunication::setConfidence(int32_t const value) {
  m_Confidence      = value;
  m_ConfidenceIsSet = true;
}
bool UeCommunication::confidenceIsSet() const {
  return m_ConfidenceIsSet;
}
void UeCommunication::unsetConfidence() {
  m_ConfidenceIsSet = false;
}

}  // namespace oai::nef::model
