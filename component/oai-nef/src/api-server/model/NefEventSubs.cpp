/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefEventSubs.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

NefEventSubs::NefEventSubs() {
  m_EventFilterIsSet = false;
}

void NefEventSubs::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool NefEventSubs::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NefEventSubs::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NefEventSubs" : pathPrefix;

  return success;
}

bool NefEventSubs::operator==(const NefEventSubs& rhs) const {
  return

      (getEvent() == rhs.getEvent()) &&

      ((!eventFilterIsSet() && !rhs.eventFilterIsSet()) ||
       (eventFilterIsSet() && rhs.eventFilterIsSet() &&
        getEventFilter() == rhs.getEventFilter()))

          ;
}

bool NefEventSubs::operator!=(const NefEventSubs& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NefEventSubs& o) {
  j          = nlohmann::json();
  j["event"] = o.m_Event;
  if (o.eventFilterIsSet()) j["eventFilter"] = o.m_EventFilter;
}

void from_json(const nlohmann::json& j, NefEventSubs& o) {
  j.at("event").get_to(o.m_Event);
  if (j.find("eventFilter") != j.end()) {
    j.at("eventFilter").get_to(o.m_EventFilter);
    o.m_EventFilterIsSet = true;
  }
}

NefEvent NefEventSubs::getEvent() const {
  return m_Event;
}
void NefEventSubs::setEvent(NefEvent const& value) {
  m_Event = value;
}
NefEventFilter NefEventSubs::getEventFilter() const {
  return m_EventFilter;
}
void NefEventSubs::setEventFilter(NefEventFilter const& value) {
  m_EventFilter      = value;
  m_EventFilterIsSet = true;
}
bool NefEventSubs::eventFilterIsSet() const {
  return m_EventFilterIsSet;
}
void NefEventSubs::unsetEventFilter() {
  m_EventFilterIsSet = false;
}

}  // namespace oai::nef::model
