/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TrafficInfluSub.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

TrafficInfluSub::TrafficInfluSub() {
  m_AfServiceId                  = "";
  m_AfServiceIdIsSet             = false;
  m_AfAppId                      = "";
  m_AfAppIdIsSet                 = false;
  m_AfTransId                    = "";
  m_AfTransIdIsSet               = false;
  m_AppReloInd                   = false;
  m_AppReloIndIsSet              = false;
  m_Dnn                          = "";
  m_DnnIsSet                     = false;
  m_SnssaiIsSet                  = false;
  m_ExternalGroupId              = "";
  m_ExternalGroupIdIsSet         = false;
  m_AnyUeInd                     = false;
  m_AnyUeIndIsSet                = false;
  m_SubscribedEventsIsSet        = false;
  m_Gpsi                         = "";
  m_GpsiIsSet                    = false;
  m_Ipv4Addr                     = "";
  m_Ipv4AddrIsSet                = false;
  m_IpDomain                     = "";
  m_IpDomainIsSet                = false;
  m_Ipv6Addr                     = "";
  m_Ipv6AddrIsSet                = false;
  m_MacAddr                      = "";
  m_MacAddrIsSet                 = false;
  m_DnaiChgTypeIsSet             = false;
  m_NotificationDestination      = "";
  m_NotificationDestinationIsSet = false;
  m_RequestTestNotification      = false;
  m_RequestTestNotificationIsSet = false;
  m_WebsockNotifConfigIsSet      = false;
  m_Self                         = "";
  m_SelfIsSet                    = false;
  m_TrafficFiltersIsSet          = false;
  m_EthTrafficFiltersIsSet       = false;
  m_TrafficRoutesIsSet           = false;
  m_TfcCorrInd                   = false;
  m_TfcCorrIndIsSet              = false;
  m_TempValiditiesIsSet          = false;
  m_ValidGeoZoneIdsIsSet         = false;
  m_AfAckInd                     = false;
  m_AfAckIndIsSet                = false;
  m_AddrPreserInd                = false;
  m_AddrPreserIndIsSet           = false;
  m_SuppFeat                     = "";
  m_SuppFeatIsSet                = false;
}

void TrafficInfluSub::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool TrafficInfluSub::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TrafficInfluSub::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TrafficInfluSub" : pathPrefix;

  if (subscribedEventsIsSet()) {
    const std::vector<SubscribedEvent>& value = m_SubscribedEvents;
    const std::string currentValuePath = _pathPrefix + ".subscribedEvents";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const SubscribedEvent& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".subscribedEvents") &&
                  success;

        i++;
      }
    }
  }

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  if (macAddrIsSet()) {
    const std::string& value           = m_MacAddr;
    const std::string currentValuePath = _pathPrefix + ".macAddr";
  }

  if (trafficFiltersIsSet()) {
    const std::vector<FlowInfo>& value = m_TrafficFilters;
    const std::string currentValuePath = _pathPrefix + ".trafficFilters";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const FlowInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".trafficFilters") &&
                  success;

        i++;
      }
    }
  }

  if (ethTrafficFiltersIsSet()) {
    const std::vector<EthFlowDescription>& value = m_EthTrafficFilters;
    const std::string currentValuePath = _pathPrefix + ".ethTrafficFilters";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const EthFlowDescription& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".ethTrafficFilters") &&
            success;

        i++;
      }
    }
  }

  if (trafficRoutesIsSet()) {
    const std::vector<RouteToLocation>& value = m_TrafficRoutes;
    const std::string currentValuePath        = _pathPrefix + ".trafficRoutes";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const RouteToLocation& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".trafficRoutes") && success;

        i++;
      }
    }
  }

  if (tempValiditiesIsSet()) {
    const std::vector<TemporalValidity>& value = m_TempValidities;
    const std::string currentValuePath = _pathPrefix + ".tempValidities";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const TemporalValidity& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".tempValidities") &&
                  success;

        i++;
      }
    }
  }

  if (validGeoZoneIdsIsSet()) {
    const std::vector<std::string>& value = m_ValidGeoZoneIds;
    const std::string currentValuePath    = _pathPrefix + ".validGeoZoneIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (suppFeatIsSet()) {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool TrafficInfluSub::operator==(const TrafficInfluSub& rhs) const {
  return

      ((!afServiceIdIsSet() && !rhs.afServiceIdIsSet()) ||
       (afServiceIdIsSet() && rhs.afServiceIdIsSet() &&
        getAfServiceId() == rhs.getAfServiceId())) &&

      ((!afAppIdIsSet() && !rhs.afAppIdIsSet()) ||
       (afAppIdIsSet() && rhs.afAppIdIsSet() &&
        getAfAppId() == rhs.getAfAppId())) &&

      ((!afTransIdIsSet() && !rhs.afTransIdIsSet()) ||
       (afTransIdIsSet() && rhs.afTransIdIsSet() &&
        getAfTransId() == rhs.getAfTransId())) &&

      ((!appReloIndIsSet() && !rhs.appReloIndIsSet()) ||
       (appReloIndIsSet() && rhs.appReloIndIsSet() &&
        isAppReloInd() == rhs.isAppReloInd())) &&

      ((!dnnIsSet() && !rhs.dnnIsSet()) ||
       (dnnIsSet() && rhs.dnnIsSet() && getDnn() == rhs.getDnn())) &&

      ((!snssaiIsSet() && !rhs.snssaiIsSet()) ||
       (snssaiIsSet() && rhs.snssaiIsSet() &&
        getSnssai() == rhs.getSnssai())) &&

      ((!externalGroupIdIsSet() && !rhs.externalGroupIdIsSet()) ||
       (externalGroupIdIsSet() && rhs.externalGroupIdIsSet() &&
        getExternalGroupId() == rhs.getExternalGroupId())) &&

      ((!anyUeIndIsSet() && !rhs.anyUeIndIsSet()) ||
       (anyUeIndIsSet() && rhs.anyUeIndIsSet() &&
        isAnyUeInd() == rhs.isAnyUeInd())) &&

      ((!subscribedEventsIsSet() && !rhs.subscribedEventsIsSet()) ||
       (subscribedEventsIsSet() && rhs.subscribedEventsIsSet() &&
        getSubscribedEvents() == rhs.getSubscribedEvents())) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi())) &&

      ((!ipv4AddrIsSet() && !rhs.ipv4AddrIsSet()) ||
       (ipv4AddrIsSet() && rhs.ipv4AddrIsSet() &&
        getIpv4Addr() == rhs.getIpv4Addr())) &&

      ((!ipDomainIsSet() && !rhs.ipDomainIsSet()) ||
       (ipDomainIsSet() && rhs.ipDomainIsSet() &&
        getIpDomain() == rhs.getIpDomain())) &&

      ((!ipv6AddrIsSet() && !rhs.ipv6AddrIsSet()) ||
       (ipv6AddrIsSet() && rhs.ipv6AddrIsSet() &&
        getIpv6Addr() == rhs.getIpv6Addr())) &&

      ((!macAddrIsSet() && !rhs.macAddrIsSet()) ||
       (macAddrIsSet() && rhs.macAddrIsSet() &&
        getMacAddr() == rhs.getMacAddr())) &&

      ((!dnaiChgTypeIsSet() && !rhs.dnaiChgTypeIsSet()) ||
       (dnaiChgTypeIsSet() && rhs.dnaiChgTypeIsSet() &&
        getDnaiChgType() == rhs.getDnaiChgType())) &&

      ((!notificationDestinationIsSet() &&
        !rhs.notificationDestinationIsSet()) ||
       (notificationDestinationIsSet() && rhs.notificationDestinationIsSet() &&
        getNotificationDestination() == rhs.getNotificationDestination())) &&

      ((!requestTestNotificationIsSet() &&
        !rhs.requestTestNotificationIsSet()) ||
       (requestTestNotificationIsSet() && rhs.requestTestNotificationIsSet() &&
        isRequestTestNotification() == rhs.isRequestTestNotification())) &&

      ((!websockNotifConfigIsSet() && !rhs.websockNotifConfigIsSet()) ||
       (websockNotifConfigIsSet() && rhs.websockNotifConfigIsSet() &&
        getWebsockNotifConfig() == rhs.getWebsockNotifConfig())) &&

      ((!selfIsSet() && !rhs.selfIsSet()) ||
       (selfIsSet() && rhs.selfIsSet() && getSelf() == rhs.getSelf())) &&

      ((!trafficFiltersIsSet() && !rhs.trafficFiltersIsSet()) ||
       (trafficFiltersIsSet() && rhs.trafficFiltersIsSet() &&
        getTrafficFilters() == rhs.getTrafficFilters())) &&

      ((!ethTrafficFiltersIsSet() && !rhs.ethTrafficFiltersIsSet()) ||
       (ethTrafficFiltersIsSet() && rhs.ethTrafficFiltersIsSet() &&
        getEthTrafficFilters() == rhs.getEthTrafficFilters())) &&

      ((!trafficRoutesIsSet() && !rhs.trafficRoutesIsSet()) ||
       (trafficRoutesIsSet() && rhs.trafficRoutesIsSet() &&
        getTrafficRoutes() == rhs.getTrafficRoutes())) &&

      ((!tfcCorrIndIsSet() && !rhs.tfcCorrIndIsSet()) ||
       (tfcCorrIndIsSet() && rhs.tfcCorrIndIsSet() &&
        isTfcCorrInd() == rhs.isTfcCorrInd())) &&

      ((!tempValiditiesIsSet() && !rhs.tempValiditiesIsSet()) ||
       (tempValiditiesIsSet() && rhs.tempValiditiesIsSet() &&
        getTempValidities() == rhs.getTempValidities())) &&

      ((!validGeoZoneIdsIsSet() && !rhs.validGeoZoneIdsIsSet()) ||
       (validGeoZoneIdsIsSet() && rhs.validGeoZoneIdsIsSet() &&
        getValidGeoZoneIds() == rhs.getValidGeoZoneIds())) &&

      ((!afAckIndIsSet() && !rhs.afAckIndIsSet()) ||
       (afAckIndIsSet() && rhs.afAckIndIsSet() &&
        isAfAckInd() == rhs.isAfAckInd())) &&

      ((!addrPreserIndIsSet() && !rhs.addrPreserIndIsSet()) ||
       (addrPreserIndIsSet() && rhs.addrPreserIndIsSet() &&
        isAddrPreserInd() == rhs.isAddrPreserInd())) &&

      ((!suppFeatIsSet() && !rhs.suppFeatIsSet()) ||
       (suppFeatIsSet() && rhs.suppFeatIsSet() &&
        getSuppFeat() == rhs.getSuppFeat()))

          ;
}

bool TrafficInfluSub::operator!=(const TrafficInfluSub& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TrafficInfluSub& o) {
  j = nlohmann::json();
  if (o.afServiceIdIsSet()) j["afServiceId"] = o.m_AfServiceId;
  if (o.afAppIdIsSet()) j["afAppId"] = o.m_AfAppId;
  if (o.afTransIdIsSet()) j["afTransId"] = o.m_AfTransId;
  if (o.appReloIndIsSet()) j["appReloInd"] = o.m_AppReloInd;
  if (o.dnnIsSet()) j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet()) j["snssai"] = o.m_Snssai;
  if (o.externalGroupIdIsSet()) j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.anyUeIndIsSet()) j["anyUeInd"] = o.m_AnyUeInd;
  if (o.subscribedEventsIsSet() || !o.m_SubscribedEvents.empty())
    j["subscribedEvents"] = o.m_SubscribedEvents;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  if (o.ipv4AddrIsSet()) j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipDomainIsSet()) j["ipDomain"] = o.m_IpDomain;
  if (o.ipv6AddrIsSet()) j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.macAddrIsSet()) j["macAddr"] = o.m_MacAddr;
  if (o.dnaiChgTypeIsSet()) j["dnaiChgType"] = o.m_DnaiChgType;
  if (o.notificationDestinationIsSet())
    j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  if (o.selfIsSet()) j["self"] = o.m_Self;
  if (o.trafficFiltersIsSet() || !o.m_TrafficFilters.empty())
    j["trafficFilters"] = o.m_TrafficFilters;
  if (o.ethTrafficFiltersIsSet() || !o.m_EthTrafficFilters.empty())
    j["ethTrafficFilters"] = o.m_EthTrafficFilters;
  if (o.trafficRoutesIsSet() || !o.m_TrafficRoutes.empty())
    j["trafficRoutes"] = o.m_TrafficRoutes;
  if (o.tfcCorrIndIsSet()) j["tfcCorrInd"] = o.m_TfcCorrInd;
  if (o.tempValiditiesIsSet() || !o.m_TempValidities.empty())
    j["tempValidities"] = o.m_TempValidities;
  if (o.validGeoZoneIdsIsSet() || !o.m_ValidGeoZoneIds.empty())
    j["validGeoZoneIds"] = o.m_ValidGeoZoneIds;
  if (o.afAckIndIsSet()) j["afAckInd"] = o.m_AfAckInd;
  if (o.addrPreserIndIsSet()) j["addrPreserInd"] = o.m_AddrPreserInd;
  if (o.suppFeatIsSet()) j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json& j, TrafficInfluSub& o) {
  if (j.find("afServiceId") != j.end()) {
    j.at("afServiceId").get_to(o.m_AfServiceId);
    o.m_AfServiceIdIsSet = true;
  }
  if (j.find("afAppId") != j.end()) {
    j.at("afAppId").get_to(o.m_AfAppId);
    o.m_AfAppIdIsSet = true;
  }
  if (j.find("afTransId") != j.end()) {
    j.at("afTransId").get_to(o.m_AfTransId);
    o.m_AfTransIdIsSet = true;
  }
  if (j.find("appReloInd") != j.end()) {
    j.at("appReloInd").get_to(o.m_AppReloInd);
    o.m_AppReloIndIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("subscribedEvents") != j.end()) {
    j.at("subscribedEvents").get_to(o.m_SubscribedEvents);
    o.m_SubscribedEventsIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipDomain") != j.end()) {
    j.at("ipDomain").get_to(o.m_IpDomain);
    o.m_IpDomainIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("macAddr") != j.end()) {
    j.at("macAddr").get_to(o.m_MacAddr);
    o.m_MacAddrIsSet = true;
  }
  if (j.find("dnaiChgType") != j.end()) {
    j.at("dnaiChgType").get_to(o.m_DnaiChgType);
    o.m_DnaiChgTypeIsSet = true;
  }
  if (j.find("notificationDestination") != j.end()) {
    j.at("notificationDestination").get_to(o.m_NotificationDestination);
    o.m_NotificationDestinationIsSet = true;
  }
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("trafficFilters") != j.end()) {
    j.at("trafficFilters").get_to(o.m_TrafficFilters);
    o.m_TrafficFiltersIsSet = true;
  }
  if (j.find("ethTrafficFilters") != j.end()) {
    j.at("ethTrafficFilters").get_to(o.m_EthTrafficFilters);
    o.m_EthTrafficFiltersIsSet = true;
  }
  if (j.find("trafficRoutes") != j.end()) {
    j.at("trafficRoutes").get_to(o.m_TrafficRoutes);
    o.m_TrafficRoutesIsSet = true;
  }
  if (j.find("tfcCorrInd") != j.end()) {
    j.at("tfcCorrInd").get_to(o.m_TfcCorrInd);
    o.m_TfcCorrIndIsSet = true;
  }
  if (j.find("tempValidities") != j.end()) {
    j.at("tempValidities").get_to(o.m_TempValidities);
    o.m_TempValiditiesIsSet = true;
  }
  if (j.find("validGeoZoneIds") != j.end()) {
    j.at("validGeoZoneIds").get_to(o.m_ValidGeoZoneIds);
    o.m_ValidGeoZoneIdsIsSet = true;
  }
  if (j.find("afAckInd") != j.end()) {
    j.at("afAckInd").get_to(o.m_AfAckInd);
    o.m_AfAckIndIsSet = true;
  }
  if (j.find("addrPreserInd") != j.end()) {
    j.at("addrPreserInd").get_to(o.m_AddrPreserInd);
    o.m_AddrPreserIndIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string TrafficInfluSub::getAfServiceId() const {
  return m_AfServiceId;
}
void TrafficInfluSub::setAfServiceId(std::string const& value) {
  m_AfServiceId      = value;
  m_AfServiceIdIsSet = true;
}
bool TrafficInfluSub::afServiceIdIsSet() const {
  return m_AfServiceIdIsSet;
}
void TrafficInfluSub::unsetAfServiceId() {
  m_AfServiceIdIsSet = false;
}
std::string TrafficInfluSub::getAfAppId() const {
  return m_AfAppId;
}
void TrafficInfluSub::setAfAppId(std::string const& value) {
  m_AfAppId      = value;
  m_AfAppIdIsSet = true;
}
bool TrafficInfluSub::afAppIdIsSet() const {
  return m_AfAppIdIsSet;
}
void TrafficInfluSub::unsetAfAppId() {
  m_AfAppIdIsSet = false;
}
std::string TrafficInfluSub::getAfTransId() const {
  return m_AfTransId;
}
void TrafficInfluSub::setAfTransId(std::string const& value) {
  m_AfTransId      = value;
  m_AfTransIdIsSet = true;
}
bool TrafficInfluSub::afTransIdIsSet() const {
  return m_AfTransIdIsSet;
}
void TrafficInfluSub::unsetAfTransId() {
  m_AfTransIdIsSet = false;
}
bool TrafficInfluSub::isAppReloInd() const {
  return m_AppReloInd;
}
void TrafficInfluSub::setAppReloInd(bool const value) {
  m_AppReloInd      = value;
  m_AppReloIndIsSet = true;
}
bool TrafficInfluSub::appReloIndIsSet() const {
  return m_AppReloIndIsSet;
}
void TrafficInfluSub::unsetAppReloInd() {
  m_AppReloIndIsSet = false;
}
std::string TrafficInfluSub::getDnn() const {
  return m_Dnn;
}
void TrafficInfluSub::setDnn(std::string const& value) {
  m_Dnn      = value;
  m_DnnIsSet = true;
}
bool TrafficInfluSub::dnnIsSet() const {
  return m_DnnIsSet;
}
void TrafficInfluSub::unsetDnn() {
  m_DnnIsSet = false;
}
Snssai TrafficInfluSub::getSnssai() const {
  return m_Snssai;
}
void TrafficInfluSub::setSnssai(Snssai const& value) {
  m_Snssai      = value;
  m_SnssaiIsSet = true;
}
bool TrafficInfluSub::snssaiIsSet() const {
  return m_SnssaiIsSet;
}
void TrafficInfluSub::unsetSnssai() {
  m_SnssaiIsSet = false;
}
std::string TrafficInfluSub::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void TrafficInfluSub::setExternalGroupId(std::string const& value) {
  m_ExternalGroupId      = value;
  m_ExternalGroupIdIsSet = true;
}
bool TrafficInfluSub::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void TrafficInfluSub::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
bool TrafficInfluSub::isAnyUeInd() const {
  return m_AnyUeInd;
}
void TrafficInfluSub::setAnyUeInd(bool const value) {
  m_AnyUeInd      = value;
  m_AnyUeIndIsSet = true;
}
bool TrafficInfluSub::anyUeIndIsSet() const {
  return m_AnyUeIndIsSet;
}
void TrafficInfluSub::unsetAnyUeInd() {
  m_AnyUeIndIsSet = false;
}
std::vector<SubscribedEvent> TrafficInfluSub::getSubscribedEvents() const {
  return m_SubscribedEvents;
}
void TrafficInfluSub::setSubscribedEvents(
    std::vector<SubscribedEvent> const& value) {
  m_SubscribedEvents      = value;
  m_SubscribedEventsIsSet = true;
}
bool TrafficInfluSub::subscribedEventsIsSet() const {
  return m_SubscribedEventsIsSet;
}
void TrafficInfluSub::unsetSubscribedEvents() {
  m_SubscribedEventsIsSet = false;
}
std::string TrafficInfluSub::getGpsi() const {
  return m_Gpsi;
}
void TrafficInfluSub::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool TrafficInfluSub::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void TrafficInfluSub::unsetGpsi() {
  m_GpsiIsSet = false;
}
std::string TrafficInfluSub::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void TrafficInfluSub::setIpv4Addr(std::string const& value) {
  m_Ipv4Addr      = value;
  m_Ipv4AddrIsSet = true;
}
bool TrafficInfluSub::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void TrafficInfluSub::unsetIpv4Addr() {
  m_Ipv4AddrIsSet = false;
}
std::string TrafficInfluSub::getIpDomain() const {
  return m_IpDomain;
}
void TrafficInfluSub::setIpDomain(std::string const& value) {
  m_IpDomain      = value;
  m_IpDomainIsSet = true;
}
bool TrafficInfluSub::ipDomainIsSet() const {
  return m_IpDomainIsSet;
}
void TrafficInfluSub::unsetIpDomain() {
  m_IpDomainIsSet = false;
}
std::string TrafficInfluSub::getIpv6Addr() const {
  return m_Ipv6Addr;
}
void TrafficInfluSub::setIpv6Addr(std::string const& value) {
  m_Ipv6Addr      = value;
  m_Ipv6AddrIsSet = true;
}
bool TrafficInfluSub::ipv6AddrIsSet() const {
  return m_Ipv6AddrIsSet;
}
void TrafficInfluSub::unsetIpv6Addr() {
  m_Ipv6AddrIsSet = false;
}
std::string TrafficInfluSub::getMacAddr() const {
  return m_MacAddr;
}
void TrafficInfluSub::setMacAddr(std::string const& value) {
  m_MacAddr      = value;
  m_MacAddrIsSet = true;
}
bool TrafficInfluSub::macAddrIsSet() const {
  return m_MacAddrIsSet;
}
void TrafficInfluSub::unsetMacAddr() {
  m_MacAddrIsSet = false;
}
DnaiChangeType TrafficInfluSub::getDnaiChgType() const {
  return m_DnaiChgType;
}
void TrafficInfluSub::setDnaiChgType(DnaiChangeType const& value) {
  m_DnaiChgType      = value;
  m_DnaiChgTypeIsSet = true;
}
bool TrafficInfluSub::dnaiChgTypeIsSet() const {
  return m_DnaiChgTypeIsSet;
}
void TrafficInfluSub::unsetDnaiChgType() {
  m_DnaiChgTypeIsSet = false;
}
std::string TrafficInfluSub::getNotificationDestination() const {
  return m_NotificationDestination;
}
void TrafficInfluSub::setNotificationDestination(std::string const& value) {
  m_NotificationDestination      = value;
  m_NotificationDestinationIsSet = true;
}
bool TrafficInfluSub::notificationDestinationIsSet() const {
  return m_NotificationDestinationIsSet;
}
void TrafficInfluSub::unsetNotificationDestination() {
  m_NotificationDestinationIsSet = false;
}
bool TrafficInfluSub::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void TrafficInfluSub::setRequestTestNotification(bool const value) {
  m_RequestTestNotification      = value;
  m_RequestTestNotificationIsSet = true;
}
bool TrafficInfluSub::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void TrafficInfluSub::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig TrafficInfluSub::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void TrafficInfluSub::setWebsockNotifConfig(WebsockNotifConfig const& value) {
  m_WebsockNotifConfig      = value;
  m_WebsockNotifConfigIsSet = true;
}
bool TrafficInfluSub::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void TrafficInfluSub::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
std::string TrafficInfluSub::getSelf() const {
  return m_Self;
}
void TrafficInfluSub::setSelf(std::string const& value) {
  m_Self      = value;
  m_SelfIsSet = true;
}
bool TrafficInfluSub::selfIsSet() const {
  return m_SelfIsSet;
}
void TrafficInfluSub::unsetSelf() {
  m_SelfIsSet = false;
}
std::vector<FlowInfo> TrafficInfluSub::getTrafficFilters() const {
  return m_TrafficFilters;
}
void TrafficInfluSub::setTrafficFilters(std::vector<FlowInfo> const& value) {
  m_TrafficFilters      = value;
  m_TrafficFiltersIsSet = true;
}
bool TrafficInfluSub::trafficFiltersIsSet() const {
  return m_TrafficFiltersIsSet;
}
void TrafficInfluSub::unsetTrafficFilters() {
  m_TrafficFiltersIsSet = false;
}
std::vector<EthFlowDescription> TrafficInfluSub::getEthTrafficFilters() const {
  return m_EthTrafficFilters;
}
void TrafficInfluSub::setEthTrafficFilters(
    std::vector<EthFlowDescription> const& value) {
  m_EthTrafficFilters      = value;
  m_EthTrafficFiltersIsSet = true;
}
bool TrafficInfluSub::ethTrafficFiltersIsSet() const {
  return m_EthTrafficFiltersIsSet;
}
void TrafficInfluSub::unsetEthTrafficFilters() {
  m_EthTrafficFiltersIsSet = false;
}
std::vector<RouteToLocation> TrafficInfluSub::getTrafficRoutes() const {
  return m_TrafficRoutes;
}
void TrafficInfluSub::setTrafficRoutes(
    std::vector<RouteToLocation> const& value) {
  m_TrafficRoutes      = value;
  m_TrafficRoutesIsSet = true;
}
bool TrafficInfluSub::trafficRoutesIsSet() const {
  return m_TrafficRoutesIsSet;
}
void TrafficInfluSub::unsetTrafficRoutes() {
  m_TrafficRoutesIsSet = false;
}
bool TrafficInfluSub::isTfcCorrInd() const {
  return m_TfcCorrInd;
}
void TrafficInfluSub::setTfcCorrInd(bool const value) {
  m_TfcCorrInd      = value;
  m_TfcCorrIndIsSet = true;
}
bool TrafficInfluSub::tfcCorrIndIsSet() const {
  return m_TfcCorrIndIsSet;
}
void TrafficInfluSub::unsetTfcCorrInd() {
  m_TfcCorrIndIsSet = false;
}
std::vector<TemporalValidity> TrafficInfluSub::getTempValidities() const {
  return m_TempValidities;
}
void TrafficInfluSub::setTempValidities(
    std::vector<TemporalValidity> const& value) {
  m_TempValidities      = value;
  m_TempValiditiesIsSet = true;
}
bool TrafficInfluSub::tempValiditiesIsSet() const {
  return m_TempValiditiesIsSet;
}
void TrafficInfluSub::unsetTempValidities() {
  m_TempValiditiesIsSet = false;
}
std::vector<std::string> TrafficInfluSub::getValidGeoZoneIds() const {
  return m_ValidGeoZoneIds;
}
void TrafficInfluSub::setValidGeoZoneIds(
    std::vector<std::string> const& value) {
  m_ValidGeoZoneIds      = value;
  m_ValidGeoZoneIdsIsSet = true;
}
bool TrafficInfluSub::validGeoZoneIdsIsSet() const {
  return m_ValidGeoZoneIdsIsSet;
}
void TrafficInfluSub::unsetValidGeoZoneIds() {
  m_ValidGeoZoneIdsIsSet = false;
}
bool TrafficInfluSub::isAfAckInd() const {
  return m_AfAckInd;
}
void TrafficInfluSub::setAfAckInd(bool const value) {
  m_AfAckInd      = value;
  m_AfAckIndIsSet = true;
}
bool TrafficInfluSub::afAckIndIsSet() const {
  return m_AfAckIndIsSet;
}
void TrafficInfluSub::unsetAfAckInd() {
  m_AfAckIndIsSet = false;
}
bool TrafficInfluSub::isAddrPreserInd() const {
  return m_AddrPreserInd;
}
void TrafficInfluSub::setAddrPreserInd(bool const value) {
  m_AddrPreserInd      = value;
  m_AddrPreserIndIsSet = true;
}
bool TrafficInfluSub::addrPreserIndIsSet() const {
  return m_AddrPreserIndIsSet;
}
void TrafficInfluSub::unsetAddrPreserInd() {
  m_AddrPreserIndIsSet = false;
}
std::string TrafficInfluSub::getSuppFeat() const {
  return m_SuppFeat;
}
void TrafficInfluSub::setSuppFeat(std::string const& value) {
  m_SuppFeat      = value;
  m_SuppFeatIsSet = true;
}
bool TrafficInfluSub::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void TrafficInfluSub::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}

}  // namespace oai::nef::model
