/**
 * 3gpp-nidd-configuration-trigger
 * API for NIDD Configuration Trigger. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NiddConfigurationTrigger.h
 *
 *
 */

#ifndef NiddConfigurationTrigger_H_
#define NiddConfigurationTrigger_H_

#include <nlohmann/json.hpp>
#include <string>

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class NiddConfigurationTrigger {
 public:
  NiddConfigurationTrigger();
  virtual ~NiddConfigurationTrigger() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NiddConfigurationTrigger& rhs) const;
  bool operator!=(const NiddConfigurationTrigger& rhs) const;

  /////////////////////////////////////////////
  /// NiddConfigurationTrigger members

  /// <summary>
  /// Identifies the trigger receiving entity.
  /// </summary>
  std::string getAfId() const;
  void setAfId(std::string const& value);
  /// <summary>
  /// Identifies the trigger sending entity.
  /// </summary>
  std::string getNefId() const;
  void setNefId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const& value);

  friend void to_json(nlohmann::json& j, const NiddConfigurationTrigger& o);
  friend void from_json(const nlohmann::json& j, NiddConfigurationTrigger& o);

 protected:
  std::string m_AfId;

  std::string m_NefId;

  std::string m_Gpsi;

  std::string m_SuppFeat;
};

}  // namespace oai::nef::model

#endif /* NiddConfigurationTrigger_H_ */
