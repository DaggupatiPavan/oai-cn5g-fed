/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsFailureCode.h
 *
 * Possible values are   - UNAVAILABLE_DATA: The event is rejected since
 * necessary data to perform the service is unavailable.   -
 * BOTH_STAT_PRED_NOT_ALLOWED: The event is rejected since the start time is in
 * the past and the end time is in the future, which means the NF service
 * consumer requested both statistics and prediction for the analytics.   -
 * OTHER: The event is rejected due to other reasons.
 */

#ifndef AnalyticsFailureCode_H_
#define AnalyticsFailureCode_H_

#include <nlohmann/json.hpp>

#include "AnalyticsFailureCode_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are   - UNAVAILABLE_DATA: The event is rejected since
/// necessary data to perform the service is unavailable.   -
/// BOTH_STAT_PRED_NOT_ALLOWED: The event is rejected since the start time is in
/// the past and the end time is in the future, which means the NF service
/// consumer requested both statistics and prediction for the analytics.   -
/// OTHER: The event is rejected due to other reasons.
/// </summary>
class AnalyticsFailureCode {
 public:
  AnalyticsFailureCode();
  virtual ~AnalyticsFailureCode() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnalyticsFailureCode& rhs) const;
  bool operator!=(const AnalyticsFailureCode& rhs) const;

  /////////////////////////////////////////////
  /// AnalyticsFailureCode members

  AnalyticsFailureCode_anyOf getValue() const;
  void setValue(AnalyticsFailureCode_anyOf value);
  AnalyticsFailureCode_anyOf::eAnalyticsFailureCode_anyOf getEnumValue() const;
  void setEnumValue(
      AnalyticsFailureCode_anyOf::eAnalyticsFailureCode_anyOf value);
  friend void to_json(nlohmann::json& j, const AnalyticsFailureCode& o);
  friend void from_json(const nlohmann::json& j, AnalyticsFailureCode& o);
  friend void to_json(nlohmann::json& j, const AnalyticsFailureCode_anyOf& o);
  friend void from_json(const nlohmann::json& j, AnalyticsFailureCode_anyOf& o);

 protected:
  AnalyticsFailureCode_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* AnalyticsFailureCode_H_ */
