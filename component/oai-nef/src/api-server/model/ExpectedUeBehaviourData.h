/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExpectedUeBehaviourData.h
 *
 *
 */

#ifndef ExpectedUeBehaviourData_H_
#define ExpectedUeBehaviourData_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "BatteryIndication.h"
#include "LocationArea.h"
#include "ScheduledCommunicationTime_1.h"
#include "ScheduledCommunicationType.h"
#include "StationaryIndication.h"
#include "TrafficProfile.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class ExpectedUeBehaviourData {
 public:
  ExpectedUeBehaviourData();
  virtual ~ExpectedUeBehaviourData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ExpectedUeBehaviourData& rhs) const;
  bool operator!=(const ExpectedUeBehaviourData& rhs) const;

  /////////////////////////////////////////////
  /// ExpectedUeBehaviourData members

  /// <summary>
  ///
  /// </summary>
  StationaryIndication getStationaryIndication() const;
  void setStationaryIndication(StationaryIndication const& value);
  bool stationaryIndicationIsSet() const;
  void unsetStationaryIndication();
  /// <summary>
  ///
  /// </summary>
  int32_t getCommunicationDurationTime() const;
  void setCommunicationDurationTime(int32_t const value);
  bool communicationDurationTimeIsSet() const;
  void unsetCommunicationDurationTime();
  /// <summary>
  ///
  /// </summary>
  int32_t getPeriodicTime() const;
  void setPeriodicTime(int32_t const value);
  bool periodicTimeIsSet() const;
  void unsetPeriodicTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime_1 getScheduledCommunicationTime() const;
  void setScheduledCommunicationTime(ScheduledCommunicationTime_1 const& value);
  bool scheduledCommunicationTimeIsSet() const;
  void unsetScheduledCommunicationTime();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationType getScheduledCommunicationType() const;
  void setScheduledCommunicationType(ScheduledCommunicationType const& value);
  bool scheduledCommunicationTypeIsSet() const;
  void unsetScheduledCommunicationType();
  /// <summary>
  /// Identifies the UE&#39;s expected geographical movement. The attribute is
  /// only applicable in 5G.
  /// </summary>
  std::vector<LocationArea> getExpectedUmts() const;
  void setExpectedUmts(std::vector<LocationArea> const& value);
  bool expectedUmtsIsSet() const;
  void unsetExpectedUmts();
  /// <summary>
  ///
  /// </summary>
  TrafficProfile getTrafficProfile() const;
  void setTrafficProfile(TrafficProfile const& value);
  bool trafficProfileIsSet() const;
  void unsetTrafficProfile();
  /// <summary>
  ///
  /// </summary>
  BatteryIndication getBatteryIndication() const;
  void setBatteryIndication(BatteryIndication const& value);
  bool batteryIndicationIsSet() const;
  void unsetBatteryIndication();
  /// <summary>
  ///
  /// </summary>
  std::string getValidityTime() const;
  void setValidityTime(std::string const& value);
  bool validityTimeIsSet() const;
  void unsetValidityTime();

  friend void to_json(nlohmann::json& j, const ExpectedUeBehaviourData& o);
  friend void from_json(const nlohmann::json& j, ExpectedUeBehaviourData& o);

 protected:
  StationaryIndication m_StationaryIndication;
  bool m_StationaryIndicationIsSet;
  int32_t m_CommunicationDurationTime;
  bool m_CommunicationDurationTimeIsSet;
  int32_t m_PeriodicTime;
  bool m_PeriodicTimeIsSet;
  ScheduledCommunicationTime_1 m_ScheduledCommunicationTime;
  bool m_ScheduledCommunicationTimeIsSet;
  ScheduledCommunicationType m_ScheduledCommunicationType;
  bool m_ScheduledCommunicationTypeIsSet;
  std::vector<LocationArea> m_ExpectedUmts;
  bool m_ExpectedUmtsIsSet;
  TrafficProfile m_TrafficProfile;
  bool m_TrafficProfileIsSet;
  BatteryIndication m_BatteryIndication;
  bool m_BatteryIndicationIsSet;
  std::string m_ValidityTime;
  bool m_ValidityTimeIsSet;
};

}  // namespace oai::nef::model

#endif /* ExpectedUeBehaviourData_H_ */
