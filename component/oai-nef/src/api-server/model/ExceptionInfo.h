/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExceptionInfo.h
 *
 *
 */

#ifndef ExceptionInfo_H_
#define ExceptionInfo_H_

#include <nlohmann/json.hpp>
#include <vector>

#include "EthFlowDescription.h"
#include "Exception.h"
#include "FlowInfo.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class ExceptionInfo {
 public:
  ExceptionInfo();
  virtual ~ExceptionInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ExceptionInfo& rhs) const;
  bool operator!=(const ExceptionInfo& rhs) const;

  /////////////////////////////////////////////
  /// ExceptionInfo members

  /// <summary>
  ///
  /// </summary>
  FlowInfo getIpTrafficFilter() const;
  void setIpTrafficFilter(FlowInfo const& value);
  bool ipTrafficFilterIsSet() const;
  void unsetIpTrafficFilter();
  /// <summary>
  ///
  /// </summary>
  EthFlowDescription getEthTrafficFilter() const;
  void setEthTrafficFilter(EthFlowDescription const& value);
  bool ethTrafficFilterIsSet() const;
  void unsetEthTrafficFilter();
  /// <summary>
  ///
  /// </summary>
  std::vector<Exception> getExceps() const;
  void setExceps(std::vector<Exception> const& value);
  bool excepsIsSet() const;
  void unsetExceps();

  friend void to_json(nlohmann::json& j, const ExceptionInfo& o);
  friend void from_json(const nlohmann::json& j, ExceptionInfo& o);

 protected:
  FlowInfo m_IpTrafficFilter;
  bool m_IpTrafficFilterIsSet;
  EthFlowDescription m_EthTrafficFilter;
  bool m_EthTrafficFilterIsSet;
  std::vector<Exception> m_Exceps;
  bool m_ExcepsIsSet;
};

}  // namespace oai::nef::model

#endif /* ExceptionInfo_H_ */
