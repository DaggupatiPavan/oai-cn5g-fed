/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefEventExposureSubsc.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

NefEventExposureSubsc::NefEventExposureSubsc() {
  m_EventsRepInfoIsSet = false;
  m_NotifUri           = "";
  m_NotifId            = "";
  m_EventNotifsIsSet   = false;
  m_SuppFeat           = "";
  m_SuppFeatIsSet      = false;
}

void NefEventExposureSubsc::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool NefEventExposureSubsc::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NefEventExposureSubsc::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NefEventExposureSubsc" : pathPrefix;

  /* EventsSubs */ {
    const std::vector<NefEventSubs>& value = m_EventsSubs;
    const std::string currentValuePath     = _pathPrefix + ".eventsSubs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const NefEventSubs& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".eventsSubs") && success;

        i++;
      }
    }
  }

  if (eventNotifsIsSet()) {
    const std::vector<NefEventNotification>& value = m_EventNotifs;
    const std::string currentValuePath = _pathPrefix + ".eventNotifs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const NefEventNotification& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".eventNotifs") && success;

        i++;
      }
    }
  }

  if (suppFeatIsSet()) {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool NefEventExposureSubsc::operator==(const NefEventExposureSubsc& rhs) const {
  return

      (getEventsSubs() == rhs.getEventsSubs()) &&

      ((!eventsRepInfoIsSet() && !rhs.eventsRepInfoIsSet()) ||
       (eventsRepInfoIsSet() && rhs.eventsRepInfoIsSet() &&
        getEventsRepInfo() == rhs.getEventsRepInfo())) &&

      (getNotifUri() == rhs.getNotifUri()) &&

      (getNotifId() == rhs.getNotifId()) &&

      ((!eventNotifsIsSet() && !rhs.eventNotifsIsSet()) ||
       (eventNotifsIsSet() && rhs.eventNotifsIsSet() &&
        getEventNotifs() == rhs.getEventNotifs())) &&

      ((!suppFeatIsSet() && !rhs.suppFeatIsSet()) ||
       (suppFeatIsSet() && rhs.suppFeatIsSet() &&
        getSuppFeat() == rhs.getSuppFeat()))

          ;
}

bool NefEventExposureSubsc::operator!=(const NefEventExposureSubsc& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NefEventExposureSubsc& o) {
  j               = nlohmann::json();
  j["eventsSubs"] = o.m_EventsSubs;
  if (o.eventsRepInfoIsSet()) j["eventsRepInfo"] = o.m_EventsRepInfo;
  j["notifUri"] = o.m_NotifUri;
  j["notifId"]  = o.m_NotifId;
  if (o.eventNotifsIsSet() || !o.m_EventNotifs.empty())
    j["eventNotifs"] = o.m_EventNotifs;
  if (o.suppFeatIsSet()) j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json& j, NefEventExposureSubsc& o) {
  j.at("eventsSubs").get_to(o.m_EventsSubs);
  if (j.find("eventsRepInfo") != j.end()) {
    j.at("eventsRepInfo").get_to(o.m_EventsRepInfo);
    o.m_EventsRepInfoIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  j.at("notifId").get_to(o.m_NotifId);
  if (j.find("eventNotifs") != j.end()) {
    j.at("eventNotifs").get_to(o.m_EventNotifs);
    o.m_EventNotifsIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::vector<NefEventSubs> NefEventExposureSubsc::getEventsSubs() const {
  return m_EventsSubs;
}
void NefEventExposureSubsc::setEventsSubs(
    std::vector<NefEventSubs> const& value) {
  m_EventsSubs = value;
}
ReportingInformation NefEventExposureSubsc::getEventsRepInfo() const {
  return m_EventsRepInfo;
}
void NefEventExposureSubsc::setEventsRepInfo(
    ReportingInformation const& value) {
  m_EventsRepInfo      = value;
  m_EventsRepInfoIsSet = true;
}
bool NefEventExposureSubsc::eventsRepInfoIsSet() const {
  return m_EventsRepInfoIsSet;
}
void NefEventExposureSubsc::unsetEventsRepInfo() {
  m_EventsRepInfoIsSet = false;
}
std::string NefEventExposureSubsc::getNotifUri() const {
  return m_NotifUri;
}
void NefEventExposureSubsc::setNotifUri(std::string const& value) {
  m_NotifUri = value;
}
std::string NefEventExposureSubsc::getNotifId() const {
  return m_NotifId;
}
void NefEventExposureSubsc::setNotifId(std::string const& value) {
  m_NotifId = value;
}
std::vector<NefEventNotification> NefEventExposureSubsc::getEventNotifs()
    const {
  return m_EventNotifs;
}
void NefEventExposureSubsc::setEventNotifs(
    std::vector<NefEventNotification> const& value) {
  m_EventNotifs      = value;
  m_EventNotifsIsSet = true;
}
bool NefEventExposureSubsc::eventNotifsIsSet() const {
  return m_EventNotifsIsSet;
}
void NefEventExposureSubsc::unsetEventNotifs() {
  m_EventNotifsIsSet = false;
}
std::string NefEventExposureSubsc::getSuppFeat() const {
  return m_SuppFeat;
}
void NefEventExposureSubsc::setSuppFeat(std::string const& value) {
  m_SuppFeat      = value;
  m_SuppFeatIsSet = true;
}
bool NefEventExposureSubsc::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void NefEventExposureSubsc::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}

}  // namespace oai::nef::model
