/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeMobilityExposure.h
 *
 *
 */

#ifndef UeMobilityExposure_H_
#define UeMobilityExposure_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ScheduledCommunicationTime.h"
#include "UeLocationInfo.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class UeMobilityExposure {
 public:
  UeMobilityExposure();
  virtual ~UeMobilityExposure() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UeMobilityExposure& rhs) const;
  bool operator!=(const UeMobilityExposure& rhs) const;

  /////////////////////////////////////////////
  /// UeMobilityExposure members

  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getTs() const;
  void setTs(std::string const& value);
  bool tsIsSet() const;
  void unsetTs();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime getRecurringTime() const;
  void setRecurringTime(ScheduledCommunicationTime const& value);
  bool recurringTimeIsSet() const;
  void unsetRecurringTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getDuration() const;
  void setDuration(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  float getDurationVariance() const;
  void setDurationVariance(float const value);
  bool durationVarianceIsSet() const;
  void unsetDurationVariance();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeLocationInfo> getLocInfo() const;
  void setLocInfo(std::vector<UeLocationInfo> const& value);

  friend void to_json(nlohmann::json& j, const UeMobilityExposure& o);
  friend void from_json(const nlohmann::json& j, UeMobilityExposure& o);

 protected:
  std::string m_Ts;
  bool m_TsIsSet;
  ScheduledCommunicationTime m_RecurringTime;
  bool m_RecurringTimeIsSet;
  int32_t m_Duration;

  float m_DurationVariance;
  bool m_DurationVarianceIsSet;
  std::vector<UeLocationInfo> m_LocInfo;
};

}  // namespace oai::nef::model

#endif /* UeMobilityExposure_H_ */
