/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocationArea.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

LocationArea::LocationArea() {
  m_GeographicAreasIsSet = false;
  m_CivicAddressesIsSet  = false;
  m_NwAreaInfoIsSet      = false;
}

void LocationArea::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool LocationArea::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool LocationArea::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "LocationArea" : pathPrefix;

  if (geographicAreasIsSet()) {
    const std::vector<GeographicArea>& value = m_GeographicAreas;
    const std::string currentValuePath       = _pathPrefix + ".geographicAreas";

    if (value.size() < 0) {
      success = false;
      msg << currentValuePath << ": must have at least 0 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const GeographicArea& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".geographicAreas") &&
                  success;

        i++;
      }
    }
  }

  if (civicAddressesIsSet()) {
    const std::vector<CivicAddress>& value = m_CivicAddresses;
    const std::string currentValuePath     = _pathPrefix + ".civicAddresses";

    if (value.size() < 0) {
      success = false;
      msg << currentValuePath << ": must have at least 0 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const CivicAddress& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".civicAddresses") &&
                  success;

        i++;
      }
    }
  }

  return success;
}

bool LocationArea::operator==(const LocationArea& rhs) const {
  return

      ((!geographicAreasIsSet() && !rhs.geographicAreasIsSet()) ||
       (geographicAreasIsSet() && rhs.geographicAreasIsSet() &&
        getGeographicAreas() == rhs.getGeographicAreas())) &&

      ((!civicAddressesIsSet() && !rhs.civicAddressesIsSet()) ||
       (civicAddressesIsSet() && rhs.civicAddressesIsSet() &&
        getCivicAddresses() == rhs.getCivicAddresses())) &&

      ((!nwAreaInfoIsSet() && !rhs.nwAreaInfoIsSet()) ||
       (nwAreaInfoIsSet() && rhs.nwAreaInfoIsSet() &&
        getNwAreaInfo() == rhs.getNwAreaInfo()))

          ;
}

bool LocationArea::operator!=(const LocationArea& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LocationArea& o) {
  j = nlohmann::json();
  if (o.geographicAreasIsSet() || !o.m_GeographicAreas.empty())
    j["geographicAreas"] = o.m_GeographicAreas;
  if (o.civicAddressesIsSet() || !o.m_CivicAddresses.empty())
    j["civicAddresses"] = o.m_CivicAddresses;
  if (o.nwAreaInfoIsSet()) j["nwAreaInfo"] = o.m_NwAreaInfo;
}

void from_json(const nlohmann::json& j, LocationArea& o) {
  if (j.find("geographicAreas") != j.end()) {
    j.at("geographicAreas").get_to(o.m_GeographicAreas);
    o.m_GeographicAreasIsSet = true;
  }
  if (j.find("civicAddresses") != j.end()) {
    j.at("civicAddresses").get_to(o.m_CivicAddresses);
    o.m_CivicAddressesIsSet = true;
  }
  if (j.find("nwAreaInfo") != j.end()) {
    j.at("nwAreaInfo").get_to(o.m_NwAreaInfo);
    o.m_NwAreaInfoIsSet = true;
  }
}

std::vector<GeographicArea> LocationArea::getGeographicAreas() const {
  return m_GeographicAreas;
}
void LocationArea::setGeographicAreas(
    std::vector<GeographicArea> const& value) {
  m_GeographicAreas      = value;
  m_GeographicAreasIsSet = true;
}
bool LocationArea::geographicAreasIsSet() const {
  return m_GeographicAreasIsSet;
}
void LocationArea::unsetGeographicAreas() {
  m_GeographicAreasIsSet = false;
}
std::vector<CivicAddress> LocationArea::getCivicAddresses() const {
  return m_CivicAddresses;
}
void LocationArea::setCivicAddresses(std::vector<CivicAddress> const& value) {
  m_CivicAddresses      = value;
  m_CivicAddressesIsSet = true;
}
bool LocationArea::civicAddressesIsSet() const {
  return m_CivicAddressesIsSet;
}
void LocationArea::unsetCivicAddresses() {
  m_CivicAddressesIsSet = false;
}
NetworkAreaInfo LocationArea::getNwAreaInfo() const {
  return m_NwAreaInfo;
}
void LocationArea::setNwAreaInfo(NetworkAreaInfo const& value) {
  m_NwAreaInfo      = value;
  m_NwAreaInfoIsSet = true;
}
bool LocationArea::nwAreaInfoIsSet() const {
  return m_NwAreaInfoIsSet;
}
void LocationArea::unsetNwAreaInfo() {
  m_NwAreaInfoIsSet = false;
}

}  // namespace oai::nef::model
