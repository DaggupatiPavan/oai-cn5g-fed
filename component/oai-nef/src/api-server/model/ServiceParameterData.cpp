/**
 * 3gpp-service-parameter
 * API for AF service paramter Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceParameterData.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

ServiceParameterData::ServiceParameterData() {
  m_AfServiceId          = "";
  m_AfServiceIdIsSet     = false;
  m_AppId                = "";
  m_AppIdIsSet           = false;
  m_Dnn                  = "";
  m_DnnIsSet             = false;
  m_SnssaiIsSet          = false;
  m_ExternalGroupId      = "";
  m_ExternalGroupIdIsSet = false;
  m_AnyUeInd             = false;
  m_AnyUeIndIsSet        = false;
  m_Gpsi                 = "";
  m_GpsiIsSet            = false;
  m_UeIpv4               = "";
  m_UeIpv4IsSet          = false;
  m_UeIpv6IsSet          = false;
  m_UeMac                = "";
  m_UeMacIsSet           = false;
  m_Self                 = "";
  m_SelfIsSet            = false;
  m_ParamOverPc5         = "";
  m_ParamOverPc5IsSet    = false;
  m_ParamOverUu          = "";
  m_ParamOverUuIsSet     = false;
  m_MtcProviderId        = "";
  m_MtcProviderIdIsSet   = false;
  m_SuppFeat             = "";
  m_SuppFeatIsSet        = false;
}

void ServiceParameterData::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool ServiceParameterData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ServiceParameterData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ServiceParameterData" : pathPrefix;

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  if (ueIpv4IsSet()) {
    const std::string& value           = m_UeIpv4;
    const std::string currentValuePath = _pathPrefix + ".ueIpv4";
  }

  if (ueMacIsSet()) {
    const std::string& value           = m_UeMac;
    const std::string currentValuePath = _pathPrefix + ".ueMac";
  }

  if (suppFeatIsSet()) {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool ServiceParameterData::operator==(const ServiceParameterData& rhs) const {
  return

      ((!afServiceIdIsSet() && !rhs.afServiceIdIsSet()) ||
       (afServiceIdIsSet() && rhs.afServiceIdIsSet() &&
        getAfServiceId() == rhs.getAfServiceId())) &&

      ((!appIdIsSet() && !rhs.appIdIsSet()) ||
       (appIdIsSet() && rhs.appIdIsSet() && getAppId() == rhs.getAppId())) &&

      ((!dnnIsSet() && !rhs.dnnIsSet()) ||
       (dnnIsSet() && rhs.dnnIsSet() && getDnn() == rhs.getDnn())) &&

      ((!snssaiIsSet() && !rhs.snssaiIsSet()) ||
       (snssaiIsSet() && rhs.snssaiIsSet() &&
        getSnssai() == rhs.getSnssai())) &&

      ((!externalGroupIdIsSet() && !rhs.externalGroupIdIsSet()) ||
       (externalGroupIdIsSet() && rhs.externalGroupIdIsSet() &&
        getExternalGroupId() == rhs.getExternalGroupId())) &&

      ((!anyUeIndIsSet() && !rhs.anyUeIndIsSet()) ||
       (anyUeIndIsSet() && rhs.anyUeIndIsSet() &&
        isAnyUeInd() == rhs.isAnyUeInd())) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi())) &&

      ((!ueIpv4IsSet() && !rhs.ueIpv4IsSet()) ||
       (ueIpv4IsSet() && rhs.ueIpv4IsSet() &&
        getUeIpv4() == rhs.getUeIpv4())) &&

      ((!ueIpv6IsSet() && !rhs.ueIpv6IsSet()) ||
       (ueIpv6IsSet() && rhs.ueIpv6IsSet() &&
        getUeIpv6() == rhs.getUeIpv6())) &&

      ((!ueMacIsSet() && !rhs.ueMacIsSet()) ||
       (ueMacIsSet() && rhs.ueMacIsSet() && getUeMac() == rhs.getUeMac())) &&

      ((!selfIsSet() && !rhs.selfIsSet()) ||
       (selfIsSet() && rhs.selfIsSet() && getSelf() == rhs.getSelf())) &&

      ((!paramOverPc5IsSet() && !rhs.paramOverPc5IsSet()) ||
       (paramOverPc5IsSet() && rhs.paramOverPc5IsSet() &&
        getParamOverPc5() == rhs.getParamOverPc5())) &&

      ((!paramOverUuIsSet() && !rhs.paramOverUuIsSet()) ||
       (paramOverUuIsSet() && rhs.paramOverUuIsSet() &&
        getParamOverUu() == rhs.getParamOverUu())) &&

      ((!mtcProviderIdIsSet() && !rhs.mtcProviderIdIsSet()) ||
       (mtcProviderIdIsSet() && rhs.mtcProviderIdIsSet() &&
        getMtcProviderId() == rhs.getMtcProviderId())) &&

      ((!suppFeatIsSet() && !rhs.suppFeatIsSet()) ||
       (suppFeatIsSet() && rhs.suppFeatIsSet() &&
        getSuppFeat() == rhs.getSuppFeat()))

          ;
}

bool ServiceParameterData::operator!=(const ServiceParameterData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ServiceParameterData& o) {
  j = nlohmann::json();
  if (o.afServiceIdIsSet()) j["afServiceId"] = o.m_AfServiceId;
  if (o.appIdIsSet()) j["appId"] = o.m_AppId;
  if (o.dnnIsSet()) j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet()) j["snssai"] = o.m_Snssai;
  if (o.externalGroupIdIsSet()) j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.anyUeIndIsSet()) j["anyUeInd"] = o.m_AnyUeInd;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  if (o.ueIpv4IsSet()) j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet()) j["ueIpv6"] = o.m_UeIpv6;
  if (o.ueMacIsSet()) j["ueMac"] = o.m_UeMac;
  if (o.selfIsSet()) j["self"] = o.m_Self;
  if (o.paramOverPc5IsSet()) j["paramOverPc5"] = o.m_ParamOverPc5;
  if (o.paramOverUuIsSet()) j["paramOverUu"] = o.m_ParamOverUu;
  if (o.mtcProviderIdIsSet()) j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.suppFeatIsSet()) j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json& j, ServiceParameterData& o) {
  if (j.find("afServiceId") != j.end()) {
    j.at("afServiceId").get_to(o.m_AfServiceId);
    o.m_AfServiceIdIsSet = true;
  }
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
  if (j.find("ueMac") != j.end()) {
    j.at("ueMac").get_to(o.m_UeMac);
    o.m_UeMacIsSet = true;
  }
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("paramOverPc5") != j.end()) {
    j.at("paramOverPc5").get_to(o.m_ParamOverPc5);
    o.m_ParamOverPc5IsSet = true;
  }
  if (j.find("paramOverUu") != j.end()) {
    j.at("paramOverUu").get_to(o.m_ParamOverUu);
    o.m_ParamOverUuIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string ServiceParameterData::getAfServiceId() const {
  return m_AfServiceId;
}
void ServiceParameterData::setAfServiceId(std::string const& value) {
  m_AfServiceId      = value;
  m_AfServiceIdIsSet = true;
}
bool ServiceParameterData::afServiceIdIsSet() const {
  return m_AfServiceIdIsSet;
}
void ServiceParameterData::unsetAfServiceId() {
  m_AfServiceIdIsSet = false;
}
std::string ServiceParameterData::getAppId() const {
  return m_AppId;
}
void ServiceParameterData::setAppId(std::string const& value) {
  m_AppId      = value;
  m_AppIdIsSet = true;
}
bool ServiceParameterData::appIdIsSet() const {
  return m_AppIdIsSet;
}
void ServiceParameterData::unsetAppId() {
  m_AppIdIsSet = false;
}
std::string ServiceParameterData::getDnn() const {
  return m_Dnn;
}
void ServiceParameterData::setDnn(std::string const& value) {
  m_Dnn      = value;
  m_DnnIsSet = true;
}
bool ServiceParameterData::dnnIsSet() const {
  return m_DnnIsSet;
}
void ServiceParameterData::unsetDnn() {
  m_DnnIsSet = false;
}
Snssai ServiceParameterData::getSnssai() const {
  return m_Snssai;
}
void ServiceParameterData::setSnssai(Snssai const& value) {
  m_Snssai      = value;
  m_SnssaiIsSet = true;
}
bool ServiceParameterData::snssaiIsSet() const {
  return m_SnssaiIsSet;
}
void ServiceParameterData::unsetSnssai() {
  m_SnssaiIsSet = false;
}
std::string ServiceParameterData::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void ServiceParameterData::setExternalGroupId(std::string const& value) {
  m_ExternalGroupId      = value;
  m_ExternalGroupIdIsSet = true;
}
bool ServiceParameterData::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void ServiceParameterData::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
bool ServiceParameterData::isAnyUeInd() const {
  return m_AnyUeInd;
}
void ServiceParameterData::setAnyUeInd(bool const value) {
  m_AnyUeInd      = value;
  m_AnyUeIndIsSet = true;
}
bool ServiceParameterData::anyUeIndIsSet() const {
  return m_AnyUeIndIsSet;
}
void ServiceParameterData::unsetAnyUeInd() {
  m_AnyUeIndIsSet = false;
}
std::string ServiceParameterData::getGpsi() const {
  return m_Gpsi;
}
void ServiceParameterData::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool ServiceParameterData::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void ServiceParameterData::unsetGpsi() {
  m_GpsiIsSet = false;
}
std::string ServiceParameterData::getUeIpv4() const {
  return m_UeIpv4;
}
void ServiceParameterData::setUeIpv4(std::string const& value) {
  m_UeIpv4      = value;
  m_UeIpv4IsSet = true;
}
bool ServiceParameterData::ueIpv4IsSet() const {
  return m_UeIpv4IsSet;
}
void ServiceParameterData::unsetUeIpv4() {
  m_UeIpv4IsSet = false;
}
Ipv6Addr ServiceParameterData::getUeIpv6() const {
  return m_UeIpv6;
}
void ServiceParameterData::setUeIpv6(Ipv6Addr const& value) {
  m_UeIpv6      = value;
  m_UeIpv6IsSet = true;
}
bool ServiceParameterData::ueIpv6IsSet() const {
  return m_UeIpv6IsSet;
}
void ServiceParameterData::unsetUeIpv6() {
  m_UeIpv6IsSet = false;
}
std::string ServiceParameterData::getUeMac() const {
  return m_UeMac;
}
void ServiceParameterData::setUeMac(std::string const& value) {
  m_UeMac      = value;
  m_UeMacIsSet = true;
}
bool ServiceParameterData::ueMacIsSet() const {
  return m_UeMacIsSet;
}
void ServiceParameterData::unsetUeMac() {
  m_UeMacIsSet = false;
}
std::string ServiceParameterData::getSelf() const {
  return m_Self;
}
void ServiceParameterData::setSelf(std::string const& value) {
  m_Self      = value;
  m_SelfIsSet = true;
}
bool ServiceParameterData::selfIsSet() const {
  return m_SelfIsSet;
}
void ServiceParameterData::unsetSelf() {
  m_SelfIsSet = false;
}
std::string ServiceParameterData::getParamOverPc5() const {
  return m_ParamOverPc5;
}
void ServiceParameterData::setParamOverPc5(std::string const& value) {
  m_ParamOverPc5      = value;
  m_ParamOverPc5IsSet = true;
}
bool ServiceParameterData::paramOverPc5IsSet() const {
  return m_ParamOverPc5IsSet;
}
void ServiceParameterData::unsetParamOverPc5() {
  m_ParamOverPc5IsSet = false;
}
std::string ServiceParameterData::getParamOverUu() const {
  return m_ParamOverUu;
}
void ServiceParameterData::setParamOverUu(std::string const& value) {
  m_ParamOverUu      = value;
  m_ParamOverUuIsSet = true;
}
bool ServiceParameterData::paramOverUuIsSet() const {
  return m_ParamOverUuIsSet;
}
void ServiceParameterData::unsetParamOverUu() {
  m_ParamOverUuIsSet = false;
}
std::string ServiceParameterData::getMtcProviderId() const {
  return m_MtcProviderId;
}
void ServiceParameterData::setMtcProviderId(std::string const& value) {
  m_MtcProviderId      = value;
  m_MtcProviderIdIsSet = true;
}
bool ServiceParameterData::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void ServiceParameterData::unsetMtcProviderId() {
  m_MtcProviderIdIsSet = false;
}
std::string ServiceParameterData::getSuppFeat() const {
  return m_SuppFeat;
}
void ServiceParameterData::setSuppFeat(std::string const& value) {
  m_SuppFeat      = value;
  m_SuppFeatIsSet = true;
}
bool ServiceParameterData::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void ServiceParameterData::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}

}  // namespace oai::nef::model
