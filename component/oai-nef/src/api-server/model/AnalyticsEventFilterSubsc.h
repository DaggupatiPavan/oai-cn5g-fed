/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsEventFilterSubsc.h
 *
 *
 */

#ifndef AnalyticsEventFilterSubsc_H_
#define AnalyticsEventFilterSubsc_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "EventReportingRequirement.h"
#include "Exception.h"
#include "ExpectedAnalyticsType.h"
#include "ExpectedUeBehaviourData.h"
#include "LocationArea5G.h"
#include "NetworkPerfRequirement.h"
#include "QosRequirement.h"
#include "RetainabilityThreshold.h"
#include "Snssai.h"
#include "ThresholdLevel.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class AnalyticsEventFilterSubsc {
 public:
  AnalyticsEventFilterSubsc();
  virtual ~AnalyticsEventFilterSubsc() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnalyticsEventFilterSubsc& rhs) const;
  bool operator!=(const AnalyticsEventFilterSubsc& rhs) const;

  /////////////////////////////////////////////
  /// AnalyticsEventFilterSubsc members

  /// <summary>
  ///
  /// </summary>
  std::vector<NetworkPerfRequirement> getNwPerfReqs() const;
  void setNwPerfReqs(std::vector<NetworkPerfRequirement> const& value);
  bool nwPerfReqsIsSet() const;
  void unsetNwPerfReqs();
  /// <summary>
  ///
  /// </summary>
  LocationArea5G getLocArea() const;
  void setLocArea(LocationArea5G const& value);
  bool locAreaIsSet() const;
  void unsetLocArea();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getAppIds() const;
  void setAppIds(std::vector<std::string> const& value);
  bool appIdsIsSet() const;
  void unsetAppIds();
  /// <summary>
  ///
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const& value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  std::vector<Exception> getExcepRequs() const;
  void setExcepRequs(std::vector<Exception> const& value);
  bool excepRequsIsSet() const;
  void unsetExcepRequs();
  /// <summary>
  ///
  /// </summary>
  ExpectedAnalyticsType getExptAnaType() const;
  void setExptAnaType(ExpectedAnalyticsType const& value);
  bool exptAnaTypeIsSet() const;
  void unsetExptAnaType();
  /// <summary>
  ///
  /// </summary>
  ExpectedUeBehaviourData getExptUeBehav() const;
  void setExptUeBehav(ExpectedUeBehaviourData const& value);
  bool exptUeBehavIsSet() const;
  void unsetExptUeBehav();
  /// <summary>
  ///
  /// </summary>
  std::vector<ThresholdLevel> getReptThlds() const;
  void setReptThlds(std::vector<ThresholdLevel> const& value);
  bool reptThldsIsSet() const;
  void unsetReptThlds();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const& value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  ///
  /// </summary>
  QosRequirement getQosReq() const;
  void setQosReq(QosRequirement const& value);
  bool qosReqIsSet() const;
  void unsetQosReq();
  /// <summary>
  ///
  /// </summary>
  std::vector<RetainabilityThreshold> getQosFlowRetThds() const;
  void setQosFlowRetThds(std::vector<RetainabilityThreshold> const& value);
  bool qosFlowRetThdsIsSet() const;
  void unsetQosFlowRetThds();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getRanUeThrouThds() const;
  void setRanUeThrouThds(std::vector<std::string> const& value);
  bool ranUeThrouThdsIsSet() const;
  void unsetRanUeThrouThds();
  /// <summary>
  ///
  /// </summary>
  EventReportingRequirement getExtraReportReq() const;
  void setExtraReportReq(EventReportingRequirement const& value);
  bool extraReportReqIsSet() const;
  void unsetExtraReportReq();

  friend void to_json(nlohmann::json& j, const AnalyticsEventFilterSubsc& o);
  friend void from_json(const nlohmann::json& j, AnalyticsEventFilterSubsc& o);

 protected:
  std::vector<NetworkPerfRequirement> m_NwPerfReqs;
  bool m_NwPerfReqsIsSet;
  LocationArea5G m_LocArea;
  bool m_LocAreaIsSet;
  std::vector<std::string> m_AppIds;
  bool m_AppIdsIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::vector<Exception> m_ExcepRequs;
  bool m_ExcepRequsIsSet;
  ExpectedAnalyticsType m_ExptAnaType;
  bool m_ExptAnaTypeIsSet;
  ExpectedUeBehaviourData m_ExptUeBehav;
  bool m_ExptUeBehavIsSet;
  std::vector<ThresholdLevel> m_ReptThlds;
  bool m_ReptThldsIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  QosRequirement m_QosReq;
  bool m_QosReqIsSet;
  std::vector<RetainabilityThreshold> m_QosFlowRetThds;
  bool m_QosFlowRetThdsIsSet;
  std::vector<std::string> m_RanUeThrouThds;
  bool m_RanUeThrouThdsIsSet;
  EventReportingRequirement m_ExtraReportReq;
  bool m_ExtraReportReqIsSet;
};

}  // namespace oai::nef::model

#endif /* AnalyticsEventFilterSubsc_H_ */
