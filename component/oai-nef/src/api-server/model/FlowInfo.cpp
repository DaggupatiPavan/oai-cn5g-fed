/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FlowInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

FlowInfo::FlowInfo() {
  m_FlowId                = 0;
  m_FlowDescriptionsIsSet = false;
}

void FlowInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool FlowInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool FlowInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "FlowInfo" : pathPrefix;

  if (flowDescriptionsIsSet()) {
    const std::vector<std::string>& value = m_FlowDescriptions;
    const std::string currentValuePath    = _pathPrefix + ".flowDescriptions";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    if (value.size() > 2) {
      success = false;
      msg << currentValuePath << ": must have at most 2 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool FlowInfo::operator==(const FlowInfo& rhs) const {
  return

      (getFlowId() == rhs.getFlowId()) &&

      ((!flowDescriptionsIsSet() && !rhs.flowDescriptionsIsSet()) ||
       (flowDescriptionsIsSet() && rhs.flowDescriptionsIsSet() &&
        getFlowDescriptions() == rhs.getFlowDescriptions()))

          ;
}

bool FlowInfo::operator!=(const FlowInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FlowInfo& o) {
  j           = nlohmann::json();
  j["flowId"] = o.m_FlowId;
  if (o.flowDescriptionsIsSet() || !o.m_FlowDescriptions.empty())
    j["flowDescriptions"] = o.m_FlowDescriptions;
}

void from_json(const nlohmann::json& j, FlowInfo& o) {
  j.at("flowId").get_to(o.m_FlowId);
  if (j.find("flowDescriptions") != j.end()) {
    j.at("flowDescriptions").get_to(o.m_FlowDescriptions);
    o.m_FlowDescriptionsIsSet = true;
  }
}

int32_t FlowInfo::getFlowId() const {
  return m_FlowId;
}
void FlowInfo::setFlowId(int32_t const value) {
  m_FlowId = value;
}
std::vector<std::string> FlowInfo::getFlowDescriptions() const {
  return m_FlowDescriptions;
}
void FlowInfo::setFlowDescriptions(std::vector<std::string> const& value) {
  m_FlowDescriptions      = value;
  m_FlowDescriptionsIsSet = true;
}
bool FlowInfo::flowDescriptionsIsSet() const {
  return m_FlowDescriptionsIsSet;
}
void FlowInfo::unsetFlowDescriptions() {
  m_FlowDescriptionsIsSet = false;
}

}  // namespace oai::nef::model
