/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsFailureEventInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AnalyticsFailureEventInfo::AnalyticsFailureEventInfo() {}

void AnalyticsFailureEventInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AnalyticsFailureEventInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AnalyticsFailureEventInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AnalyticsFailureEventInfo" : pathPrefix;

  return success;
}

bool AnalyticsFailureEventInfo::operator==(
    const AnalyticsFailureEventInfo& rhs) const {
  return

      (getEvent() == rhs.getEvent()) &&

      (getFailureCode() == rhs.getFailureCode())

          ;
}

bool AnalyticsFailureEventInfo::operator!=(
    const AnalyticsFailureEventInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AnalyticsFailureEventInfo& o) {
  j                = nlohmann::json();
  j["event"]       = o.m_Event;
  j["failureCode"] = o.m_FailureCode;
}

void from_json(const nlohmann::json& j, AnalyticsFailureEventInfo& o) {
  j.at("event").get_to(o.m_Event);
  j.at("failureCode").get_to(o.m_FailureCode);
}

AnalyticsEvent AnalyticsFailureEventInfo::getEvent() const {
  return m_Event;
}
void AnalyticsFailureEventInfo::setEvent(AnalyticsEvent const& value) {
  m_Event = value;
}
AnalyticsFailureCode AnalyticsFailureEventInfo::getFailureCode() const {
  return m_FailureCode;
}
void AnalyticsFailureEventInfo::setFailureCode(
    AnalyticsFailureCode const& value) {
  m_FailureCode = value;
}

}  // namespace oai::nef::model
