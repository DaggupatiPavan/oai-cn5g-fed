/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UncertaintyEllipse.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

UncertaintyEllipse::UncertaintyEllipse() {
  m_SemiMajor        = 0.0f;
  m_SemiMinor        = 0.0f;
  m_OrientationMajor = 0;
}

void UncertaintyEllipse::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool UncertaintyEllipse::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UncertaintyEllipse::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UncertaintyEllipse" : pathPrefix;

  /* SemiMajor */ {
    const float& value                 = m_SemiMajor;
    const std::string currentValuePath = _pathPrefix + ".semiMajor";

    if (value < static_cast<float>(0)) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  /* SemiMinor */ {
    const float& value                 = m_SemiMinor;
    const std::string currentValuePath = _pathPrefix + ".semiMinor";

    if (value < static_cast<float>(0)) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  /* OrientationMajor */ {
    const int32_t& value               = m_OrientationMajor;
    const std::string currentValuePath = _pathPrefix + ".orientationMajor";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 180) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 180;";
    }
  }

  return success;
}

bool UncertaintyEllipse::operator==(const UncertaintyEllipse& rhs) const {
  return

      (getSemiMajor() == rhs.getSemiMajor()) &&

      (getSemiMinor() == rhs.getSemiMinor()) &&

      (getOrientationMajor() == rhs.getOrientationMajor())

          ;
}

bool UncertaintyEllipse::operator!=(const UncertaintyEllipse& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UncertaintyEllipse& o) {
  j                     = nlohmann::json();
  j["semiMajor"]        = o.m_SemiMajor;
  j["semiMinor"]        = o.m_SemiMinor;
  j["orientationMajor"] = o.m_OrientationMajor;
}

void from_json(const nlohmann::json& j, UncertaintyEllipse& o) {
  j.at("semiMajor").get_to(o.m_SemiMajor);
  j.at("semiMinor").get_to(o.m_SemiMinor);
  j.at("orientationMajor").get_to(o.m_OrientationMajor);
}

float UncertaintyEllipse::getSemiMajor() const {
  return m_SemiMajor;
}
void UncertaintyEllipse::setSemiMajor(float const value) {
  m_SemiMajor = value;
}
float UncertaintyEllipse::getSemiMinor() const {
  return m_SemiMinor;
}
void UncertaintyEllipse::setSemiMinor(float const value) {
  m_SemiMinor = value;
}
int32_t UncertaintyEllipse::getOrientationMajor() const {
  return m_OrientationMajor;
}
void UncertaintyEllipse::setOrientationMajor(int32_t const value) {
  m_OrientationMajor = value;
}

}  // namespace oai::nef::model
