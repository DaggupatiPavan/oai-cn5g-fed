/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmallDataRateControl.h
 *
 *
 */

#ifndef SmallDataRateControl_H_
#define SmallDataRateControl_H_

#include <nlohmann/json.hpp>

#include "SmallDataRateControlTimeUnit.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class SmallDataRateControl {
 public:
  SmallDataRateControl();
  virtual ~SmallDataRateControl() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SmallDataRateControl& rhs) const;
  bool operator!=(const SmallDataRateControl& rhs) const;

  /////////////////////////////////////////////
  /// SmallDataRateControl members

  /// <summary>
  ///
  /// </summary>
  SmallDataRateControlTimeUnit getTimeUnit() const;
  void setTimeUnit(SmallDataRateControlTimeUnit const& value);
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxPacketRateUl() const;
  void setMaxPacketRateUl(int32_t const value);
  bool maxPacketRateUlIsSet() const;
  void unsetMaxPacketRateUl();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxPacketRateDl() const;
  void setMaxPacketRateDl(int32_t const value);
  bool maxPacketRateDlIsSet() const;
  void unsetMaxPacketRateDl();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxAdditionalPacketRateUl() const;
  void setMaxAdditionalPacketRateUl(int32_t const value);
  bool maxAdditionalPacketRateUlIsSet() const;
  void unsetMaxAdditionalPacketRateUl();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxAdditionalPacketRateDl() const;
  void setMaxAdditionalPacketRateDl(int32_t const value);
  bool maxAdditionalPacketRateDlIsSet() const;
  void unsetMaxAdditionalPacketRateDl();

  friend void to_json(nlohmann::json& j, const SmallDataRateControl& o);
  friend void from_json(const nlohmann::json& j, SmallDataRateControl& o);

 protected:
  SmallDataRateControlTimeUnit m_TimeUnit;

  int32_t m_MaxPacketRateUl;
  bool m_MaxPacketRateUlIsSet;
  int32_t m_MaxPacketRateDl;
  bool m_MaxPacketRateDlIsSet;
  int32_t m_MaxAdditionalPacketRateUl;
  bool m_MaxAdditionalPacketRateUlIsSet;
  int32_t m_MaxAdditionalPacketRateDl;
  bool m_MaxAdditionalPacketRateDlIsSet;
};

}  // namespace oai::nef::model

#endif /* SmallDataRateControl_H_ */
