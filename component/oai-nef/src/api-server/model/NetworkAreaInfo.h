/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkAreaInfo.h
 *
 * Describes a network area information in which the NF service consumer
 * requests the number of UEs.
 */

#ifndef NetworkAreaInfo_H_
#define NetworkAreaInfo_H_

#include <nlohmann/json.hpp>
#include <vector>

#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Ncgi.h"
#include "Tai.h"

namespace oai::nef::model {

/// <summary>
/// Describes a network area information in which the NF service consumer
/// requests the number of UEs.
/// </summary>
class NetworkAreaInfo {
 public:
  NetworkAreaInfo();
  virtual ~NetworkAreaInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NetworkAreaInfo& rhs) const;
  bool operator!=(const NetworkAreaInfo& rhs) const;

  /////////////////////////////////////////////
  /// NetworkAreaInfo members

  /// <summary>
  /// Contains a list of E-UTRA cell identities.
  /// </summary>
  std::vector<Ecgi> getEcgis() const;
  void setEcgis(std::vector<Ecgi> const& value);
  bool ecgisIsSet() const;
  void unsetEcgis();
  /// <summary>
  /// Contains a list of NR cell identities.
  /// </summary>
  std::vector<Ncgi> getNcgis() const;
  void setNcgis(std::vector<Ncgi> const& value);
  bool ncgisIsSet() const;
  void unsetNcgis();
  /// <summary>
  /// Contains a list of NG RAN nodes.
  /// </summary>
  std::vector<GlobalRanNodeId> getGRanNodeIds() const;
  void setGRanNodeIds(std::vector<GlobalRanNodeId> const& value);
  bool gRanNodeIdsIsSet() const;
  void unsetGRanNodeIds();
  /// <summary>
  /// Contains a list of tracking area identities.
  /// </summary>
  std::vector<Tai> getTais() const;
  void setTais(std::vector<Tai> const& value);
  bool taisIsSet() const;
  void unsetTais();

  friend void to_json(nlohmann::json& j, const NetworkAreaInfo& o);
  friend void from_json(const nlohmann::json& j, NetworkAreaInfo& o);

 protected:
  std::vector<Ecgi> m_Ecgis;
  bool m_EcgisIsSet;
  std::vector<Ncgi> m_Ncgis;
  bool m_NcgisIsSet;
  std::vector<GlobalRanNodeId> m_GRanNodeIds;
  bool m_GRanNodeIdsIsSet;
  std::vector<Tai> m_Tais;
  bool m_TaisIsSet;
};

}  // namespace oai::nef::model

#endif /* NetworkAreaInfo_H_ */
