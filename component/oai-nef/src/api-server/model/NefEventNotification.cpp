/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NefEventNotification.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

NefEventNotification::NefEventNotification() {
  m_TimeStamp            = "";
  m_SvcExprcInfosIsSet   = false;
  m_UeMobilityInfosIsSet = false;
  m_UeCommInfosIsSet     = false;
  m_ExcepInfosIsSet      = false;
}

void NefEventNotification::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool NefEventNotification::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NefEventNotification::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NefEventNotification" : pathPrefix;

  if (svcExprcInfosIsSet()) {
    const std::vector<ServiceExperienceInfo>& value = m_SvcExprcInfos;
    const std::string currentValuePath = _pathPrefix + ".svcExprcInfos";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const ServiceExperienceInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".svcExprcInfos") && success;

        i++;
      }
    }
  }

  if (ueMobilityInfosIsSet()) {
    const std::vector<UeMobilityInfo>& value = m_UeMobilityInfos;
    const std::string currentValuePath       = _pathPrefix + ".ueMobilityInfos";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const UeMobilityInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".ueMobilityInfos") &&
                  success;

        i++;
      }
    }
  }

  if (ueCommInfosIsSet()) {
    const std::vector<UeCommunicationInfo>& value = m_UeCommInfos;
    const std::string currentValuePath = _pathPrefix + ".ueCommInfos";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const UeCommunicationInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".ueCommInfos") && success;

        i++;
      }
    }
  }

  if (excepInfosIsSet()) {
    const std::vector<ExceptionInfo>& value = m_ExcepInfos;
    const std::string currentValuePath      = _pathPrefix + ".excepInfos";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const ExceptionInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".excepInfos") && success;

        i++;
      }
    }
  }

  return success;
}

bool NefEventNotification::operator==(const NefEventNotification& rhs) const {
  return

      (getEvent() == rhs.getEvent()) &&

      (getTimeStamp() == rhs.getTimeStamp()) &&

      ((!svcExprcInfosIsSet() && !rhs.svcExprcInfosIsSet()) ||
       (svcExprcInfosIsSet() && rhs.svcExprcInfosIsSet() &&
        getSvcExprcInfos() == rhs.getSvcExprcInfos())) &&

      ((!ueMobilityInfosIsSet() && !rhs.ueMobilityInfosIsSet()) ||
       (ueMobilityInfosIsSet() && rhs.ueMobilityInfosIsSet() &&
        getUeMobilityInfos() == rhs.getUeMobilityInfos())) &&

      ((!ueCommInfosIsSet() && !rhs.ueCommInfosIsSet()) ||
       (ueCommInfosIsSet() && rhs.ueCommInfosIsSet() &&
        getUeCommInfos() == rhs.getUeCommInfos())) &&

      ((!excepInfosIsSet() && !rhs.excepInfosIsSet()) ||
       (excepInfosIsSet() && rhs.excepInfosIsSet() &&
        getExcepInfos() == rhs.getExcepInfos()))

          ;
}

bool NefEventNotification::operator!=(const NefEventNotification& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NefEventNotification& o) {
  j              = nlohmann::json();
  j["event"]     = o.m_Event;
  j["timeStamp"] = o.m_TimeStamp;
  if (o.svcExprcInfosIsSet() || !o.m_SvcExprcInfos.empty())
    j["svcExprcInfos"] = o.m_SvcExprcInfos;
  if (o.ueMobilityInfosIsSet() || !o.m_UeMobilityInfos.empty())
    j["ueMobilityInfos"] = o.m_UeMobilityInfos;
  if (o.ueCommInfosIsSet() || !o.m_UeCommInfos.empty())
    j["ueCommInfos"] = o.m_UeCommInfos;
  if (o.excepInfosIsSet() || !o.m_ExcepInfos.empty())
    j["excepInfos"] = o.m_ExcepInfos;
}

void from_json(const nlohmann::json& j, NefEventNotification& o) {
  j.at("event").get_to(o.m_Event);
  j.at("timeStamp").get_to(o.m_TimeStamp);
  if (j.find("svcExprcInfos") != j.end()) {
    j.at("svcExprcInfos").get_to(o.m_SvcExprcInfos);
    o.m_SvcExprcInfosIsSet = true;
  }
  if (j.find("ueMobilityInfos") != j.end()) {
    j.at("ueMobilityInfos").get_to(o.m_UeMobilityInfos);
    o.m_UeMobilityInfosIsSet = true;
  }
  if (j.find("ueCommInfos") != j.end()) {
    j.at("ueCommInfos").get_to(o.m_UeCommInfos);
    o.m_UeCommInfosIsSet = true;
  }
  if (j.find("excepInfos") != j.end()) {
    j.at("excepInfos").get_to(o.m_ExcepInfos);
    o.m_ExcepInfosIsSet = true;
  }
}

NefEvent NefEventNotification::getEvent() const {
  return m_Event;
}
void NefEventNotification::setEvent(NefEvent const& value) {
  m_Event = value;
}
std::string NefEventNotification::getTimeStamp() const {
  return m_TimeStamp;
}
void NefEventNotification::setTimeStamp(std::string const& value) {
  m_TimeStamp = value;
}
std::vector<ServiceExperienceInfo> NefEventNotification::getSvcExprcInfos()
    const {
  return m_SvcExprcInfos;
}
void NefEventNotification::setSvcExprcInfos(
    std::vector<ServiceExperienceInfo> const& value) {
  m_SvcExprcInfos      = value;
  m_SvcExprcInfosIsSet = true;
}
bool NefEventNotification::svcExprcInfosIsSet() const {
  return m_SvcExprcInfosIsSet;
}
void NefEventNotification::unsetSvcExprcInfos() {
  m_SvcExprcInfosIsSet = false;
}
std::vector<UeMobilityInfo> NefEventNotification::getUeMobilityInfos() const {
  return m_UeMobilityInfos;
}
void NefEventNotification::setUeMobilityInfos(
    std::vector<UeMobilityInfo> const& value) {
  m_UeMobilityInfos      = value;
  m_UeMobilityInfosIsSet = true;
}
bool NefEventNotification::ueMobilityInfosIsSet() const {
  return m_UeMobilityInfosIsSet;
}
void NefEventNotification::unsetUeMobilityInfos() {
  m_UeMobilityInfosIsSet = false;
}
std::vector<UeCommunicationInfo> NefEventNotification::getUeCommInfos() const {
  return m_UeCommInfos;
}
void NefEventNotification::setUeCommInfos(
    std::vector<UeCommunicationInfo> const& value) {
  m_UeCommInfos      = value;
  m_UeCommInfosIsSet = true;
}
bool NefEventNotification::ueCommInfosIsSet() const {
  return m_UeCommInfosIsSet;
}
void NefEventNotification::unsetUeCommInfos() {
  m_UeCommInfosIsSet = false;
}
std::vector<ExceptionInfo> NefEventNotification::getExcepInfos() const {
  return m_ExcepInfos;
}
void NefEventNotification::setExcepInfos(
    std::vector<ExceptionInfo> const& value) {
  m_ExcepInfos      = value;
  m_ExcepInfosIsSet = true;
}
bool NefEventNotification::excepInfosIsSet() const {
  return m_ExcepInfosIsSet;
}
void NefEventNotification::unsetExcepInfos() {
  m_ExcepInfosIsSet = false;
}

}  // namespace oai::nef::model
