/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UePerLocationReport.h
 *
 * Represents the number of UEs found at the indicated location.
 */

#ifndef UePerLocationReport_H_
#define UePerLocationReport_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace oai::nef::model {

/// <summary>
/// Represents the number of UEs found at the indicated location.
/// </summary>
class UePerLocationReport {
 public:
  UePerLocationReport();
  virtual ~UePerLocationReport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UePerLocationReport& rhs) const;
  bool operator!=(const UePerLocationReport& rhs) const;

  /////////////////////////////////////////////
  /// UePerLocationReport members

  /// <summary>
  /// Identifies the number of UEs.
  /// </summary>
  int32_t getUeCount() const;
  void setUeCount(int32_t const value);
  /// <summary>
  /// Each element uniquely identifies a user.
  /// </summary>
  std::vector<std::string> getExternalIds() const;
  void setExternalIds(std::vector<std::string> const& value);
  bool externalIdsIsSet() const;
  void unsetExternalIds();
  /// <summary>
  /// Each element identifies the MS internal PSTN/ISDN number allocated for a
  /// UE.
  /// </summary>
  std::vector<std::string> getMsisdns() const;
  void setMsisdns(std::vector<std::string> const& value);
  bool msisdnsIsSet() const;
  void unsetMsisdns();
  /// <summary>
  /// Each element uniquely identifies a UAV.
  /// </summary>
  std::vector<std::string> getServLevelDevIds() const;
  void setServLevelDevIds(std::vector<std::string> const& value);
  bool servLevelDevIdsIsSet() const;
  void unsetServLevelDevIds();

  friend void to_json(nlohmann::json& j, const UePerLocationReport& o);
  friend void from_json(const nlohmann::json& j, UePerLocationReport& o);

 protected:
  int32_t m_UeCount;

  std::vector<std::string> m_ExternalIds;
  bool m_ExternalIdsIsSet;
  std::vector<std::string> m_Msisdns;
  bool m_MsisdnsIsSet;
  std::vector<std::string> m_ServLevelDevIds;
  bool m_ServLevelDevIdsIsSet;
};

}  // namespace oai::nef::model

#endif /* UePerLocationReport_H_ */
