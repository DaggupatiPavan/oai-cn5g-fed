/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeLocationInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

UeLocationInfo::UeLocationInfo() {
  m_Ratio           = 0;
  m_RatioIsSet      = false;
  m_Confidence      = 0;
  m_ConfidenceIsSet = false;
}

void UeLocationInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool UeLocationInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeLocationInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeLocationInfo" : pathPrefix;

  if (ratioIsSet()) {
    const int32_t& value               = m_Ratio;
    const std::string currentValuePath = _pathPrefix + ".ratio";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  if (confidenceIsSet()) {
    const int32_t& value               = m_Confidence;
    const std::string currentValuePath = _pathPrefix + ".confidence";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool UeLocationInfo::operator==(const UeLocationInfo& rhs) const {
  return

      (getLoc() == rhs.getLoc()) &&

      ((!ratioIsSet() && !rhs.ratioIsSet()) ||
       (ratioIsSet() && rhs.ratioIsSet() && getRatio() == rhs.getRatio())) &&

      ((!confidenceIsSet() && !rhs.confidenceIsSet()) ||
       (confidenceIsSet() && rhs.confidenceIsSet() &&
        getConfidence() == rhs.getConfidence()))

          ;
}

bool UeLocationInfo::operator!=(const UeLocationInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeLocationInfo& o) {
  j        = nlohmann::json();
  j["loc"] = o.m_Loc;
  if (o.ratioIsSet()) j["ratio"] = o.m_Ratio;
  if (o.confidenceIsSet()) j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json& j, UeLocationInfo& o) {
  j.at("loc").get_to(o.m_Loc);
  if (j.find("ratio") != j.end()) {
    j.at("ratio").get_to(o.m_Ratio);
    o.m_RatioIsSet = true;
  }
  if (j.find("confidence") != j.end()) {
    j.at("confidence").get_to(o.m_Confidence);
    o.m_ConfidenceIsSet = true;
  }
}

LocationArea5G UeLocationInfo::getLoc() const {
  return m_Loc;
}
void UeLocationInfo::setLoc(LocationArea5G const& value) {
  m_Loc = value;
}
int32_t UeLocationInfo::getRatio() const {
  return m_Ratio;
}
void UeLocationInfo::setRatio(int32_t const value) {
  m_Ratio      = value;
  m_RatioIsSet = true;
}
bool UeLocationInfo::ratioIsSet() const {
  return m_RatioIsSet;
}
void UeLocationInfo::unsetRatio() {
  m_RatioIsSet = false;
}
int32_t UeLocationInfo::getConfidence() const {
  return m_Confidence;
}
void UeLocationInfo::setConfidence(int32_t const value) {
  m_Confidence      = value;
  m_ConfidenceIsSet = true;
}
bool UeLocationInfo::confidenceIsSet() const {
  return m_ConfidenceIsSet;
}
void UeLocationInfo::unsetConfidence() {
  m_ConfidenceIsSet = false;
}

}  // namespace oai::nef::model
