/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExceptionId.h
 *
 * Possible values are   - UNEXPECTED_UE_LOCATION: Unexpected UE location   -
 * UNEXPECTED_LONG_LIVE_FLOW: Unexpected long-live rate flows   -
 * UNEXPECTED_LARGE_RATE_FLOW: Unexpected large rate flows   -
 * UNEXPECTED_WAKEUP: Unexpected wakeup   - SUSPICION_OF_DDOS_ATTACK: Suspicion
 * of DDoS attack   - WRONG_DESTINATION_ADDRESS: Wrong destination address   -
 * TOO_FREQUENT_SERVICE_ACCESS: Too frequent Service Access   -
 * UNEXPECTED_RADIO_LINK_FAILURES: Unexpected radio link failures   -
 * PING_PONG_ACROSS_CELLS: Ping-ponging across neighbouring cells
 */

#ifndef ExceptionId_H_
#define ExceptionId_H_

#include <nlohmann/json.hpp>

#include "ExceptionId_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are   - UNEXPECTED_UE_LOCATION: Unexpected UE location   -
/// UNEXPECTED_LONG_LIVE_FLOW: Unexpected long-live rate flows   -
/// UNEXPECTED_LARGE_RATE_FLOW: Unexpected large rate flows   -
/// UNEXPECTED_WAKEUP: Unexpected wakeup   - SUSPICION_OF_DDOS_ATTACK: Suspicion
/// of DDoS attack   - WRONG_DESTINATION_ADDRESS: Wrong destination address   -
/// TOO_FREQUENT_SERVICE_ACCESS: Too frequent Service Access   -
/// UNEXPECTED_RADIO_LINK_FAILURES: Unexpected radio link failures   -
/// PING_PONG_ACROSS_CELLS: Ping-ponging across neighbouring cells
/// </summary>
class ExceptionId {
 public:
  ExceptionId();
  virtual ~ExceptionId() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ExceptionId& rhs) const;
  bool operator!=(const ExceptionId& rhs) const;

  /////////////////////////////////////////////
  /// ExceptionId members

  ExceptionId_anyOf getValue() const;
  void setValue(ExceptionId_anyOf value);
  ExceptionId_anyOf::eExceptionId_anyOf getEnumValue() const;
  void setEnumValue(ExceptionId_anyOf::eExceptionId_anyOf value);
  friend void to_json(nlohmann::json& j, const ExceptionId& o);
  friend void from_json(const nlohmann::json& j, ExceptionId& o);
  friend void to_json(nlohmann::json& j, const ExceptionId_anyOf& o);
  friend void from_json(const nlohmann::json& j, ExceptionId_anyOf& o);

 protected:
  ExceptionId_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* ExceptionId_H_ */
