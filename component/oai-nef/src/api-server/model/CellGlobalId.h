/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CellGlobalId.h
 *
 * Contains a Cell Global Identification as defined in 3GPP TS 23.003,
 * clause 4.3.1.
 */

#ifndef CellGlobalId_H_
#define CellGlobalId_H_

#include <nlohmann/json.hpp>
#include <string>

#include "PlmnId.h"

namespace oai::nef::model {

/// <summary>
/// Contains a Cell Global Identification as defined in 3GPP TS 23.003,
/// clause 4.3.1.
/// </summary>
class CellGlobalId {
 public:
  CellGlobalId();
  virtual ~CellGlobalId() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const CellGlobalId& rhs) const;
  bool operator!=(const CellGlobalId& rhs) const;

  /////////////////////////////////////////////
  /// CellGlobalId members

  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getLac() const;
  void setLac(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getCellId() const;
  void setCellId(std::string const& value);

  friend void to_json(nlohmann::json& j, const CellGlobalId& o);
  friend void from_json(const nlohmann::json& j, CellGlobalId& o);

 protected:
  PlmnId m_PlmnId;

  std::string m_Lac;

  std::string m_CellId;
};

}  // namespace oai::nef::model

#endif /* CellGlobalId_H_ */
