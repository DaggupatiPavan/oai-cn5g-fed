/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmallDataRateControl.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

SmallDataRateControl::SmallDataRateControl() {
  m_MaxPacketRateUl                = 0;
  m_MaxPacketRateUlIsSet           = false;
  m_MaxPacketRateDl                = 0;
  m_MaxPacketRateDlIsSet           = false;
  m_MaxAdditionalPacketRateUl      = 0;
  m_MaxAdditionalPacketRateUlIsSet = false;
  m_MaxAdditionalPacketRateDl      = 0;
  m_MaxAdditionalPacketRateDlIsSet = false;
}

void SmallDataRateControl::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool SmallDataRateControl::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SmallDataRateControl::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SmallDataRateControl" : pathPrefix;

  return success;
}

bool SmallDataRateControl::operator==(const SmallDataRateControl& rhs) const {
  return

      (getTimeUnit() == rhs.getTimeUnit()) &&

      ((!maxPacketRateUlIsSet() && !rhs.maxPacketRateUlIsSet()) ||
       (maxPacketRateUlIsSet() && rhs.maxPacketRateUlIsSet() &&
        getMaxPacketRateUl() == rhs.getMaxPacketRateUl())) &&

      ((!maxPacketRateDlIsSet() && !rhs.maxPacketRateDlIsSet()) ||
       (maxPacketRateDlIsSet() && rhs.maxPacketRateDlIsSet() &&
        getMaxPacketRateDl() == rhs.getMaxPacketRateDl())) &&

      ((!maxAdditionalPacketRateUlIsSet() &&
        !rhs.maxAdditionalPacketRateUlIsSet()) ||
       (maxAdditionalPacketRateUlIsSet() &&
        rhs.maxAdditionalPacketRateUlIsSet() &&
        getMaxAdditionalPacketRateUl() ==
            rhs.getMaxAdditionalPacketRateUl())) &&

      ((!maxAdditionalPacketRateDlIsSet() &&
        !rhs.maxAdditionalPacketRateDlIsSet()) ||
       (maxAdditionalPacketRateDlIsSet() &&
        rhs.maxAdditionalPacketRateDlIsSet() &&
        getMaxAdditionalPacketRateDl() == rhs.getMaxAdditionalPacketRateDl()))

          ;
}

bool SmallDataRateControl::operator!=(const SmallDataRateControl& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SmallDataRateControl& o) {
  j             = nlohmann::json();
  j["timeUnit"] = o.m_TimeUnit;
  if (o.maxPacketRateUlIsSet()) j["maxPacketRateUl"] = o.m_MaxPacketRateUl;
  if (o.maxPacketRateDlIsSet()) j["maxPacketRateDl"] = o.m_MaxPacketRateDl;
  if (o.maxAdditionalPacketRateUlIsSet())
    j["maxAdditionalPacketRateUl"] = o.m_MaxAdditionalPacketRateUl;
  if (o.maxAdditionalPacketRateDlIsSet())
    j["maxAdditionalPacketRateDl"] = o.m_MaxAdditionalPacketRateDl;
}

void from_json(const nlohmann::json& j, SmallDataRateControl& o) {
  j.at("timeUnit").get_to(o.m_TimeUnit);
  if (j.find("maxPacketRateUl") != j.end()) {
    j.at("maxPacketRateUl").get_to(o.m_MaxPacketRateUl);
    o.m_MaxPacketRateUlIsSet = true;
  }
  if (j.find("maxPacketRateDl") != j.end()) {
    j.at("maxPacketRateDl").get_to(o.m_MaxPacketRateDl);
    o.m_MaxPacketRateDlIsSet = true;
  }
  if (j.find("maxAdditionalPacketRateUl") != j.end()) {
    j.at("maxAdditionalPacketRateUl").get_to(o.m_MaxAdditionalPacketRateUl);
    o.m_MaxAdditionalPacketRateUlIsSet = true;
  }
  if (j.find("maxAdditionalPacketRateDl") != j.end()) {
    j.at("maxAdditionalPacketRateDl").get_to(o.m_MaxAdditionalPacketRateDl);
    o.m_MaxAdditionalPacketRateDlIsSet = true;
  }
}

SmallDataRateControlTimeUnit SmallDataRateControl::getTimeUnit() const {
  return m_TimeUnit;
}
void SmallDataRateControl::setTimeUnit(
    SmallDataRateControlTimeUnit const& value) {
  m_TimeUnit = value;
}
int32_t SmallDataRateControl::getMaxPacketRateUl() const {
  return m_MaxPacketRateUl;
}
void SmallDataRateControl::setMaxPacketRateUl(int32_t const value) {
  m_MaxPacketRateUl      = value;
  m_MaxPacketRateUlIsSet = true;
}
bool SmallDataRateControl::maxPacketRateUlIsSet() const {
  return m_MaxPacketRateUlIsSet;
}
void SmallDataRateControl::unsetMaxPacketRateUl() {
  m_MaxPacketRateUlIsSet = false;
}
int32_t SmallDataRateControl::getMaxPacketRateDl() const {
  return m_MaxPacketRateDl;
}
void SmallDataRateControl::setMaxPacketRateDl(int32_t const value) {
  m_MaxPacketRateDl      = value;
  m_MaxPacketRateDlIsSet = true;
}
bool SmallDataRateControl::maxPacketRateDlIsSet() const {
  return m_MaxPacketRateDlIsSet;
}
void SmallDataRateControl::unsetMaxPacketRateDl() {
  m_MaxPacketRateDlIsSet = false;
}
int32_t SmallDataRateControl::getMaxAdditionalPacketRateUl() const {
  return m_MaxAdditionalPacketRateUl;
}
void SmallDataRateControl::setMaxAdditionalPacketRateUl(int32_t const value) {
  m_MaxAdditionalPacketRateUl      = value;
  m_MaxAdditionalPacketRateUlIsSet = true;
}
bool SmallDataRateControl::maxAdditionalPacketRateUlIsSet() const {
  return m_MaxAdditionalPacketRateUlIsSet;
}
void SmallDataRateControl::unsetMaxAdditionalPacketRateUl() {
  m_MaxAdditionalPacketRateUlIsSet = false;
}
int32_t SmallDataRateControl::getMaxAdditionalPacketRateDl() const {
  return m_MaxAdditionalPacketRateDl;
}
void SmallDataRateControl::setMaxAdditionalPacketRateDl(int32_t const value) {
  m_MaxAdditionalPacketRateDl      = value;
  m_MaxAdditionalPacketRateDlIsSet = true;
}
bool SmallDataRateControl::maxAdditionalPacketRateDlIsSet() const {
  return m_MaxAdditionalPacketRateDlIsSet;
}
void SmallDataRateControl::unsetMaxAdditionalPacketRateDl() {
  m_MaxAdditionalPacketRateDlIsSet = false;
}

}  // namespace oai::nef::model
