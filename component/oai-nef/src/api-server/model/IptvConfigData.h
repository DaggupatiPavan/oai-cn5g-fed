/**
 * 3gpp-iptvconfiguration
 * API for IPTV configuration. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IptvConfigData.h
 *
 *
 */

#ifndef IptvConfigData_H_
#define IptvConfigData_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "MulticastAccessControl.h"
#include "Snssai.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class IptvConfigData {
 public:
  IptvConfigData();
  virtual ~IptvConfigData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const IptvConfigData& rhs) const;
  bool operator!=(const IptvConfigData& rhs) const;

  /////////////////////////////////////////////
  /// IptvConfigData members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const& value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  ///
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const& value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExterGroupId() const;
  void setExterGroupId(std::string const& value);
  bool exterGroupIdIsSet() const;
  void unsetExterGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getAfAppId() const;
  void setAfAppId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const& value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const& value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  ///
  /// </summary>
  std::map<std::string, MulticastAccessControl> getMultiAccCtrls() const;
  void setMultiAccCtrls(
      std::map<std::string, MulticastAccessControl> const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const& value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const& value);

  friend void to_json(nlohmann::json& j, const IptvConfigData& o);
  friend void from_json(const nlohmann::json& j, IptvConfigData& o);

 protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_ExterGroupId;
  bool m_ExterGroupIdIsSet;
  std::string m_AfAppId;

  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::map<std::string, MulticastAccessControl> m_MultiAccCtrls;

  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  std::string m_SuppFeat;
};

}  // namespace oai::nef::model

#endif /* IptvConfigData_H_ */
