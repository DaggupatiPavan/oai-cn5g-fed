/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringType.h
 *
 * Possible values are - LOSS_OF_CONNECTIVITY: The SCS/AS requests to be
 * notified when the 3GPP network detects that the UE is no longer reachable for
 * signalling or user plane communication - UE_REACHABILITY: The SCS/AS requests
 * to be notified when the UE becomes reachable for sending either SMS or
 * downlink data to the UE - LOCATION_REPORTING: The SCS/AS requests to be
 * notified of the current location or the last known location of the UE -
 * CHANGE_OF_IMSI_IMEI_ASSOCIATION: The SCS/AS requests to be notified when the
 * association of an ME (IMEI(SV)) that uses a specific subscription (IMSI) is
 * changed - ROAMING_STATUS: The SCS/AS queries the UE&#39;s current roaming
 * status and requests to get notified when the status changes -
 * COMMUNICATION_FAILURE: The SCS/AS requests to be notified of communication
 * failure events - AVAILABILITY_AFTER_DDN_FAILURE: The SCS/AS requests to be
 * notified when the UE has become available after a DDN failure -
 * NUMBER_OF_UES_IN_AN_AREA: The SCS/AS requests to be notified the number of
 * UEs in a given geographic area - PDN_CONNECTIVITY_STATUS: The SCS/AS requests
 * to be notified when the 3GPP network detects that the UE’s PDN connection is
 * set up or torn down - DOWNLINK_DATA_DELIVERY_STATUS: The AF requests to be
 * notified when the 3GPP network detects that the downlink data delivery status
 * is changed. - API_SUPPORT_CAPABILITY: The SCS/AS requests to be notified of
 * the availability of support of service APIs. - NUM_OF_REGD_UES: The AF
 * requests to be notified of the current number of registered UEs for a network
 * slice. - NUM_OF_ESTD_PDU_SESSIONS: The AF requests to be notified of the
 * current number of established PDU Sessions for a network slice. -
 * AREA_OF_INTEREST: The SCS/AS requests to be notified when the UAV moves in or
 * out of the geographic area.
 */

#ifndef MonitoringType_H_
#define MonitoringType_H_

#include <nlohmann/json.hpp>

#include "MonitoringType_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - LOSS_OF_CONNECTIVITY: The SCS/AS requests to be
/// notified when the 3GPP network detects that the UE is no longer reachable
/// for signalling or user plane communication - UE_REACHABILITY: The SCS/AS
/// requests to be notified when the UE becomes reachable for sending either SMS
/// or downlink data to the UE - LOCATION_REPORTING: The SCS/AS requests to be
/// notified of the current location or the last known location of the UE -
/// CHANGE_OF_IMSI_IMEI_ASSOCIATION: The SCS/AS requests to be notified when the
/// association of an ME (IMEI(SV)) that uses a specific subscription (IMSI) is
/// changed - ROAMING_STATUS: The SCS/AS queries the UE&#39;s current roaming
/// status and requests to get notified when the status changes -
/// COMMUNICATION_FAILURE: The SCS/AS requests to be notified of communication
/// failure events - AVAILABILITY_AFTER_DDN_FAILURE: The SCS/AS requests to be
/// notified when the UE has become available after a DDN failure -
/// NUMBER_OF_UES_IN_AN_AREA: The SCS/AS requests to be notified the number of
/// UEs in a given geographic area - PDN_CONNECTIVITY_STATUS: The SCS/AS
/// requests to be notified when the 3GPP network detects that the UE’s PDN
/// connection is set up or torn down - DOWNLINK_DATA_DELIVERY_STATUS: The AF
/// requests to be notified when the 3GPP network detects that the downlink data
/// delivery status is changed. - API_SUPPORT_CAPABILITY: The SCS/AS requests to
/// be notified of the availability of support of service APIs. -
/// NUM_OF_REGD_UES: The AF requests to be notified of the current number of
/// registered UEs for a network slice. - NUM_OF_ESTD_PDU_SESSIONS: The AF
/// requests to be notified of the current number of established PDU Sessions
/// for a network slice. - AREA_OF_INTEREST: The SCS/AS requests to be notified
/// when the UAV moves in or out of the geographic area.
/// </summary>
class MonitoringType {
 public:
  MonitoringType();
  virtual ~MonitoringType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MonitoringType& rhs) const;
  bool operator!=(const MonitoringType& rhs) const;

  /////////////////////////////////////////////
  /// MonitoringType members

  MonitoringType_anyOf getValue() const;
  void setValue(MonitoringType_anyOf value);
  MonitoringType_anyOf::eMonitoringType_anyOf getEnumValue() const;
  void setEnumValue(MonitoringType_anyOf::eMonitoringType_anyOf value);
  friend void to_json(nlohmann::json& j, const MonitoringType& o);
  friend void from_json(const nlohmann::json& j, MonitoringType& o);
  friend void to_json(nlohmann::json& j, const MonitoringType_anyOf& o);
  friend void from_json(const nlohmann::json& j, MonitoringType_anyOf& o);

 protected:
  MonitoringType_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* MonitoringType_H_ */
