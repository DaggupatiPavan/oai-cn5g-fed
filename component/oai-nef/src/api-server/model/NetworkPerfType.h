/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkPerfType.h
 *
 * Possible values are   - GNB_ACTIVE_RATIO: Indicates that the network
 * performance requirement is gNodeB active (i.e. up and running) rate.
 * Indicates the ratio of gNB active (i.e. up and running) number to the total
 * number of gNB   - GNB_COMPUTING_USAGE: Indicates gNodeB computing resource
 * usage.   - GNB_MEMORY_USAGE: Indicates gNodeB memory usage.   -
 * GNB_DISK_USAGE: Indicates gNodeB disk usage.   - NUM_OF_UE: Indicates number
 * of UEs.   - SESS_SUCC_RATIO: Indicates ratio of successful setup of PDU
 * sessions to total PDU session setup attempts.   - SESS_SUCC_RATIO: Indicates
 * Ratio of successful handovers to the total handover attempts.
 */

#ifndef NetworkPerfType_H_
#define NetworkPerfType_H_

#include <nlohmann/json.hpp>

#include "NetworkPerfType_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are   - GNB_ACTIVE_RATIO: Indicates that the network
/// performance requirement is gNodeB active (i.e. up and running) rate.
/// Indicates the ratio of gNB active (i.e. up and running) number to the total
/// number of gNB   - GNB_COMPUTING_USAGE: Indicates gNodeB computing resource
/// usage.   - GNB_MEMORY_USAGE: Indicates gNodeB memory usage.   -
/// GNB_DISK_USAGE: Indicates gNodeB disk usage.   - NUM_OF_UE: Indicates number
/// of UEs.   - SESS_SUCC_RATIO: Indicates ratio of successful setup of PDU
/// sessions to total PDU session setup attempts.   - SESS_SUCC_RATIO: Indicates
/// Ratio of successful handovers to the total handover attempts.
/// </summary>
class NetworkPerfType {
 public:
  NetworkPerfType();
  virtual ~NetworkPerfType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NetworkPerfType& rhs) const;
  bool operator!=(const NetworkPerfType& rhs) const;

  /////////////////////////////////////////////
  /// NetworkPerfType members

  NetworkPerfType_anyOf getValue() const;
  void setValue(NetworkPerfType_anyOf value);
  NetworkPerfType_anyOf::eNetworkPerfType_anyOf getEnumValue() const;
  void setEnumValue(NetworkPerfType_anyOf::eNetworkPerfType_anyOf value);
  friend void to_json(nlohmann::json& j, const NetworkPerfType& o);
  friend void from_json(const nlohmann::json& j, NetworkPerfType& o);
  friend void to_json(nlohmann::json& j, const NetworkPerfType_anyOf& o);
  friend void from_json(const nlohmann::json& j, NetworkPerfType_anyOf& o);

 protected:
  NetworkPerfType_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* NetworkPerfType_H_ */
