/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringEventReport.h
 *
 * Represents an event monitoring report.
 */

#ifndef MonitoringEventReport_H_
#define MonitoringEventReport_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ApiCapabilityInfo.h"
#include "AssociationType.h"
#include "DddTrafficDescriptor.h"
#include "DlDataDeliveryStatus.h"
#include "FailureCause.h"
#include "IdleStatusInfo.h"
#include "LocationFailureCause.h"
#include "LocationInfo.h"
#include "MonitoringType.h"
#include "PdnConnectionInformation.h"
#include "PlmnId.h"
#include "ReachabilityType.h"
#include "SACEventStatus.h"
#include "UePerLocationReport.h"

namespace oai::nef::model {

/// <summary>
/// Represents an event monitoring report.
/// </summary>
class MonitoringEventReport {
 public:
  MonitoringEventReport();
  virtual ~MonitoringEventReport() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MonitoringEventReport& rhs) const;
  bool operator!=(const MonitoringEventReport& rhs) const;

  /////////////////////////////////////////////
  /// MonitoringEventReport members

  /// <summary>
  ///
  /// </summary>
  AssociationType getImeiChange() const;
  void setImeiChange(AssociationType const& value);
  bool imeiChangeIsSet() const;
  void unsetImeiChange();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const& value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  ///
  /// </summary>
  IdleStatusInfo getIdleStatusInfo() const;
  void setIdleStatusInfo(IdleStatusInfo const& value);
  bool idleStatusInfoIsSet() const;
  void unsetIdleStatusInfo();
  /// <summary>
  ///
  /// </summary>
  LocationInfo getLocationInfo() const;
  void setLocationInfo(LocationInfo const& value);
  bool locationInfoIsSet() const;
  void unsetLocationInfo();
  /// <summary>
  ///
  /// </summary>
  LocationFailureCause getLocFailureCause() const;
  void setLocFailureCause(LocationFailureCause const& value);
  bool locFailureCauseIsSet() const;
  void unsetLocFailureCause();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;LOSS_OF_CONNECTIVITY\&quot;,
  /// this parameter shall be included if available to identify the reason why
  /// loss of connectivity is reported. Refer to 3GPP TS 29.336
  /// subclause 8.4.58.
  /// </summary>
  int32_t getLossOfConnectReason() const;
  void setLossOfConnectReason(int32_t const value);
  bool lossOfConnectReasonIsSet() const;
  void unsetLossOfConnectReason();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMaxUEAvailabilityTime() const;
  void setMaxUEAvailabilityTime(std::string const& value);
  bool maxUEAvailabilityTimeIsSet() const;
  void unsetMaxUEAvailabilityTime();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const& value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  ///
  /// </summary>
  MonitoringType getMonitoringType() const;
  void setMonitoringType(MonitoringType const& value);
  /// <summary>
  ///
  /// </summary>
  UePerLocationReport getUePerLocationReport() const;
  void setUePerLocationReport(UePerLocationReport const& value);
  bool uePerLocationReportIsSet() const;
  void unsetUePerLocationReport();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const& value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  ReachabilityType getReachabilityType() const;
  void setReachabilityType(ReachabilityType const& value);
  bool reachabilityTypeIsSet() const;
  void unsetReachabilityType();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;ROAMING_STATUS\&quot;, this
  /// parameter shall be set to \&quot;true\&quot; if the UE is on roaming
  /// status. Set to false or omitted otherwise.
  /// </summary>
  bool isRoamingStatus() const;
  void setRoamingStatus(bool const value);
  bool roamingStatusIsSet() const;
  void unsetRoamingStatus();
  /// <summary>
  ///
  /// </summary>
  FailureCause getFailureCause() const;
  void setFailureCause(FailureCause const& value);
  bool failureCauseIsSet() const;
  void unsetFailureCause();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getEventTime() const;
  void setEventTime(std::string const& value);
  bool eventTimeIsSet() const;
  void unsetEventTime();
  /// <summary>
  ///
  /// </summary>
  std::vector<PdnConnectionInformation> getPdnConnInfoList() const;
  void setPdnConnInfoList(std::vector<PdnConnectionInformation> const& value);
  bool pdnConnInfoListIsSet() const;
  void unsetPdnConnInfoList();
  /// <summary>
  ///
  /// </summary>
  DlDataDeliveryStatus getDddStatus() const;
  void setDddStatus(DlDataDeliveryStatus const& value);
  bool dddStatusIsSet() const;
  void unsetDddStatus();
  /// <summary>
  ///
  /// </summary>
  DddTrafficDescriptor getDddTrafDescriptor() const;
  void setDddTrafDescriptor(DddTrafficDescriptor const& value);
  bool dddTrafDescriptorIsSet() const;
  void unsetDddTrafDescriptor();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMaxWaitTime() const;
  void setMaxWaitTime(std::string const& value);
  bool maxWaitTimeIsSet() const;
  void unsetMaxWaitTime();
  /// <summary>
  ///
  /// </summary>
  std::vector<ApiCapabilityInfo> getApiCaps() const;
  void setApiCaps(std::vector<ApiCapabilityInfo> const& value);
  bool apiCapsIsSet() const;
  void unsetApiCaps();
  /// <summary>
  ///
  /// </summary>
  SACEventStatus getNSStatusInfo() const;
  void setNSStatusInfo(SACEventStatus const& value);
  bool nSStatusInfoIsSet() const;
  void unsetNSStatusInfo();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;AREA_OF_INTEREST\&quot;, this
  /// parameter may be included to identify the UAV.
  /// </summary>
  std::string getServLevelDevId() const;
  void setServLevelDevId(std::string const& value);
  bool servLevelDevIdIsSet() const;
  void unsetServLevelDevId();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;AREA_OF_INTEREST\&quot;, this
  /// parameter shall be set to true if the specified UAV is in the monitoring
  /// area. Set to false or omitted otherwise.
  /// </summary>
  bool isUavPresInd() const;
  void setUavPresInd(bool const value);
  bool uavPresIndIsSet() const;
  void unsetUavPresInd();

  friend void to_json(nlohmann::json& j, const MonitoringEventReport& o);
  friend void from_json(const nlohmann::json& j, MonitoringEventReport& o);

 protected:
  AssociationType m_ImeiChange;
  bool m_ImeiChangeIsSet;
  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  IdleStatusInfo m_IdleStatusInfo;
  bool m_IdleStatusInfoIsSet;
  LocationInfo m_LocationInfo;
  bool m_LocationInfoIsSet;
  LocationFailureCause m_LocFailureCause;
  bool m_LocFailureCauseIsSet;
  int32_t m_LossOfConnectReason;
  bool m_LossOfConnectReasonIsSet;
  std::string m_MaxUEAvailabilityTime;
  bool m_MaxUEAvailabilityTimeIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  MonitoringType m_MonitoringType;

  UePerLocationReport m_UePerLocationReport;
  bool m_UePerLocationReportIsSet;
  PlmnId m_PlmnId;
  bool m_PlmnIdIsSet;
  ReachabilityType m_ReachabilityType;
  bool m_ReachabilityTypeIsSet;
  bool m_RoamingStatus;
  bool m_RoamingStatusIsSet;
  FailureCause m_FailureCause;
  bool m_FailureCauseIsSet;
  std::string m_EventTime;
  bool m_EventTimeIsSet;
  std::vector<PdnConnectionInformation> m_PdnConnInfoList;
  bool m_PdnConnInfoListIsSet;
  DlDataDeliveryStatus m_DddStatus;
  bool m_DddStatusIsSet;
  DddTrafficDescriptor m_DddTrafDescriptor;
  bool m_DddTrafDescriptorIsSet;
  std::string m_MaxWaitTime;
  bool m_MaxWaitTimeIsSet;
  std::vector<ApiCapabilityInfo> m_ApiCaps;
  bool m_ApiCapsIsSet;
  SACEventStatus m_NSStatusInfo;
  bool m_NSStatusInfoIsSet;
  std::string m_ServLevelDevId;
  bool m_ServLevelDevIdIsSet;
  bool m_UavPresInd;
  bool m_UavPresIndIsSet;
};

}  // namespace oai::nef::model

#endif /* MonitoringEventReport_H_ */
