/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IpAddr.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

IpAddr::IpAddr() {
  m_Ipv4Addr        = "";
  m_Ipv4AddrIsSet   = false;
  m_Ipv6AddrIsSet   = false;
  m_Ipv6PrefixIsSet = false;
}

void IpAddr::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool IpAddr::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool IpAddr::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "IpAddr" : pathPrefix;

  if (ipv4AddrIsSet()) {
    const std::string& value           = m_Ipv4Addr;
    const std::string currentValuePath = _pathPrefix + ".ipv4Addr";
  }

  return success;
}

bool IpAddr::operator==(const IpAddr& rhs) const {
  return

      ((!ipv4AddrIsSet() && !rhs.ipv4AddrIsSet()) ||
       (ipv4AddrIsSet() && rhs.ipv4AddrIsSet() &&
        getIpv4Addr() == rhs.getIpv4Addr())) &&

      ((!ipv6AddrIsSet() && !rhs.ipv6AddrIsSet()) ||
       (ipv6AddrIsSet() && rhs.ipv6AddrIsSet() &&
        getIpv6Addr() == rhs.getIpv6Addr())) &&

      ((!ipv6PrefixIsSet() && !rhs.ipv6PrefixIsSet()) ||
       (ipv6PrefixIsSet() && rhs.ipv6PrefixIsSet() &&
        getIpv6Prefix() == rhs.getIpv6Prefix()))

          ;
}

bool IpAddr::operator!=(const IpAddr& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IpAddr& o) {
  j = nlohmann::json();
  if (o.ipv4AddrIsSet()) j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet()) j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.ipv6PrefixIsSet()) j["ipv6Prefix"] = o.m_Ipv6Prefix;
}

void from_json(const nlohmann::json& j, IpAddr& o) {
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("ipv6Prefix") != j.end()) {
    j.at("ipv6Prefix").get_to(o.m_Ipv6Prefix);
    o.m_Ipv6PrefixIsSet = true;
  }
}

std::string IpAddr::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void IpAddr::setIpv4Addr(std::string const& value) {
  m_Ipv4Addr      = value;
  m_Ipv4AddrIsSet = true;
}
bool IpAddr::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void IpAddr::unsetIpv4Addr() {
  m_Ipv4AddrIsSet = false;
}
Ipv6Addr IpAddr::getIpv6Addr() const {
  return m_Ipv6Addr;
}
void IpAddr::setIpv6Addr(Ipv6Addr const& value) {
  m_Ipv6Addr      = value;
  m_Ipv6AddrIsSet = true;
}
bool IpAddr::ipv6AddrIsSet() const {
  return m_Ipv6AddrIsSet;
}
void IpAddr::unsetIpv6Addr() {
  m_Ipv6AddrIsSet = false;
}
Ipv6Prefix IpAddr::getIpv6Prefix() const {
  return m_Ipv6Prefix;
}
void IpAddr::setIpv6Prefix(Ipv6Prefix const& value) {
  m_Ipv6Prefix      = value;
  m_Ipv6PrefixIsSet = true;
}
bool IpAddr::ipv6PrefixIsSet() const {
  return m_Ipv6PrefixIsSet;
}
void IpAddr::unsetIpv6Prefix() {
  m_Ipv6PrefixIsSet = false;
}

}  // namespace oai::nef::model
