/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContextCreatedData.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

SmContextCreatedData::SmContextCreatedData() {
  m_Supi                   = "";
  m_PduSessionId           = 0;
  m_Dnn                    = "";
  m_NefId                  = "";
  m_RdsSupport             = false;
  m_RdsSupportIsSet        = false;
  m_ExtBufSupport          = false;
  m_ExtBufSupportIsSet     = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
  m_MaxPacketSize          = 0;
  m_MaxPacketSizeIsSet     = false;
}

void SmContextCreatedData::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool SmContextCreatedData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SmContextCreatedData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SmContextCreatedData" : pathPrefix;

  /* Supi */ {
    const std::string& value           = m_Supi;
    const std::string currentValuePath = _pathPrefix + ".supi";
  }

  /* PduSessionId */ {
    const int32_t& value               = m_PduSessionId;
    const std::string currentValuePath = _pathPrefix + ".pduSessionId";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 255) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 255;";
    }
  }

  if (supportedFeaturesIsSet()) {
    const std::string& value           = m_SupportedFeatures;
    const std::string currentValuePath = _pathPrefix + ".supportedFeatures";
  }

  return success;
}

bool SmContextCreatedData::operator==(const SmContextCreatedData& rhs) const {
  return

      (getSupi() == rhs.getSupi()) &&

      (getPduSessionId() == rhs.getPduSessionId()) &&

      (getDnn() == rhs.getDnn()) &&

      (getSnssai() == rhs.getSnssai()) &&

      (getNefId() == rhs.getNefId()) &&

      ((!rdsSupportIsSet() && !rhs.rdsSupportIsSet()) ||
       (rdsSupportIsSet() && rhs.rdsSupportIsSet() &&
        isRdsSupport() == rhs.isRdsSupport())) &&

      ((!extBufSupportIsSet() && !rhs.extBufSupportIsSet()) ||
       (extBufSupportIsSet() && rhs.extBufSupportIsSet() &&
        isExtBufSupport() == rhs.isExtBufSupport())) &&

      ((!supportedFeaturesIsSet() && !rhs.supportedFeaturesIsSet()) ||
       (supportedFeaturesIsSet() && rhs.supportedFeaturesIsSet() &&
        getSupportedFeatures() == rhs.getSupportedFeatures())) &&

      ((!maxPacketSizeIsSet() && !rhs.maxPacketSizeIsSet()) ||
       (maxPacketSizeIsSet() && rhs.maxPacketSizeIsSet() &&
        getMaxPacketSize() == rhs.getMaxPacketSize()))

          ;
}

bool SmContextCreatedData::operator!=(const SmContextCreatedData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SmContextCreatedData& o) {
  j                 = nlohmann::json();
  j["supi"]         = o.m_Supi;
  j["pduSessionId"] = o.m_PduSessionId;
  j["dnn"]          = o.m_Dnn;
  j["snssai"]       = o.m_Snssai;
  j["nefId"]        = o.m_NefId;
  if (o.rdsSupportIsSet()) j["rdsSupport"] = o.m_RdsSupport;
  if (o.extBufSupportIsSet()) j["extBufSupport"] = o.m_ExtBufSupport;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.maxPacketSizeIsSet()) j["maxPacketSize"] = o.m_MaxPacketSize;
}

void from_json(const nlohmann::json& j, SmContextCreatedData& o) {
  j.at("supi").get_to(o.m_Supi);
  j.at("pduSessionId").get_to(o.m_PduSessionId);
  j.at("dnn").get_to(o.m_Dnn);
  j.at("snssai").get_to(o.m_Snssai);
  j.at("nefId").get_to(o.m_NefId);
  if (j.find("rdsSupport") != j.end()) {
    j.at("rdsSupport").get_to(o.m_RdsSupport);
    o.m_RdsSupportIsSet = true;
  }
  if (j.find("extBufSupport") != j.end()) {
    j.at("extBufSupport").get_to(o.m_ExtBufSupport);
    o.m_ExtBufSupportIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("maxPacketSize") != j.end()) {
    j.at("maxPacketSize").get_to(o.m_MaxPacketSize);
    o.m_MaxPacketSizeIsSet = true;
  }
}

std::string SmContextCreatedData::getSupi() const {
  return m_Supi;
}
void SmContextCreatedData::setSupi(std::string const& value) {
  m_Supi = value;
}
int32_t SmContextCreatedData::getPduSessionId() const {
  return m_PduSessionId;
}
void SmContextCreatedData::setPduSessionId(int32_t const value) {
  m_PduSessionId = value;
}
std::string SmContextCreatedData::getDnn() const {
  return m_Dnn;
}
void SmContextCreatedData::setDnn(std::string const& value) {
  m_Dnn = value;
}
Snssai SmContextCreatedData::getSnssai() const {
  return m_Snssai;
}
void SmContextCreatedData::setSnssai(Snssai const& value) {
  m_Snssai = value;
}
std::string SmContextCreatedData::getNefId() const {
  return m_NefId;
}
void SmContextCreatedData::setNefId(std::string const& value) {
  m_NefId = value;
}
bool SmContextCreatedData::isRdsSupport() const {
  return m_RdsSupport;
}
void SmContextCreatedData::setRdsSupport(bool const value) {
  m_RdsSupport      = value;
  m_RdsSupportIsSet = true;
}
bool SmContextCreatedData::rdsSupportIsSet() const {
  return m_RdsSupportIsSet;
}
void SmContextCreatedData::unsetRdsSupport() {
  m_RdsSupportIsSet = false;
}
bool SmContextCreatedData::isExtBufSupport() const {
  return m_ExtBufSupport;
}
void SmContextCreatedData::setExtBufSupport(bool const value) {
  m_ExtBufSupport      = value;
  m_ExtBufSupportIsSet = true;
}
bool SmContextCreatedData::extBufSupportIsSet() const {
  return m_ExtBufSupportIsSet;
}
void SmContextCreatedData::unsetExtBufSupport() {
  m_ExtBufSupportIsSet = false;
}
std::string SmContextCreatedData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void SmContextCreatedData::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool SmContextCreatedData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void SmContextCreatedData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
int32_t SmContextCreatedData::getMaxPacketSize() const {
  return m_MaxPacketSize;
}
void SmContextCreatedData::setMaxPacketSize(int32_t const value) {
  m_MaxPacketSize      = value;
  m_MaxPacketSizeIsSet = true;
}
bool SmContextCreatedData::maxPacketSizeIsSet() const {
  return m_MaxPacketSizeIsSet;
}
void SmContextCreatedData::unsetMaxPacketSize() {
  m_MaxPacketSizeIsSet = false;
}

}  // namespace oai::nef::model
