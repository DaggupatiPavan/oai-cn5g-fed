/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "FailureCause.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

FailureCause::FailureCause() {
  m_BssgpCause       = 0;
  m_BssgpCauseIsSet  = false;
  m_CauseType        = 0;
  m_CauseTypeIsSet   = false;
  m_GmmCause         = 0;
  m_GmmCauseIsSet    = false;
  m_RanapCause       = 0;
  m_RanapCauseIsSet  = false;
  m_RanNasCause      = "";
  m_RanNasCauseIsSet = false;
  m_S1ApCause        = 0;
  m_S1ApCauseIsSet   = false;
  m_SmCause          = 0;
  m_SmCauseIsSet     = false;
}

void FailureCause::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool FailureCause::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool FailureCause::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "FailureCause" : pathPrefix;

  return success;
}

bool FailureCause::operator==(const FailureCause& rhs) const {
  return

      ((!bssgpCauseIsSet() && !rhs.bssgpCauseIsSet()) ||
       (bssgpCauseIsSet() && rhs.bssgpCauseIsSet() &&
        getBssgpCause() == rhs.getBssgpCause())) &&

      ((!causeTypeIsSet() && !rhs.causeTypeIsSet()) ||
       (causeTypeIsSet() && rhs.causeTypeIsSet() &&
        getCauseType() == rhs.getCauseType())) &&

      ((!gmmCauseIsSet() && !rhs.gmmCauseIsSet()) ||
       (gmmCauseIsSet() && rhs.gmmCauseIsSet() &&
        getGmmCause() == rhs.getGmmCause())) &&

      ((!ranapCauseIsSet() && !rhs.ranapCauseIsSet()) ||
       (ranapCauseIsSet() && rhs.ranapCauseIsSet() &&
        getRanapCause() == rhs.getRanapCause())) &&

      ((!ranNasCauseIsSet() && !rhs.ranNasCauseIsSet()) ||
       (ranNasCauseIsSet() && rhs.ranNasCauseIsSet() &&
        getRanNasCause() == rhs.getRanNasCause())) &&

      ((!s1ApCauseIsSet() && !rhs.s1ApCauseIsSet()) ||
       (s1ApCauseIsSet() && rhs.s1ApCauseIsSet() &&
        getS1ApCause() == rhs.getS1ApCause())) &&

      ((!smCauseIsSet() && !rhs.smCauseIsSet()) ||
       (smCauseIsSet() && rhs.smCauseIsSet() &&
        getSmCause() == rhs.getSmCause()))

          ;
}

bool FailureCause::operator!=(const FailureCause& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FailureCause& o) {
  j = nlohmann::json();
  if (o.bssgpCauseIsSet()) j["bssgpCause"] = o.m_BssgpCause;
  if (o.causeTypeIsSet()) j["causeType"] = o.m_CauseType;
  if (o.gmmCauseIsSet()) j["gmmCause"] = o.m_GmmCause;
  if (o.ranapCauseIsSet()) j["ranapCause"] = o.m_RanapCause;
  if (o.ranNasCauseIsSet()) j["ranNasCause"] = o.m_RanNasCause;
  if (o.s1ApCauseIsSet()) j["s1ApCause"] = o.m_S1ApCause;
  if (o.smCauseIsSet()) j["smCause"] = o.m_SmCause;
}

void from_json(const nlohmann::json& j, FailureCause& o) {
  if (j.find("bssgpCause") != j.end()) {
    j.at("bssgpCause").get_to(o.m_BssgpCause);
    o.m_BssgpCauseIsSet = true;
  }
  if (j.find("causeType") != j.end()) {
    j.at("causeType").get_to(o.m_CauseType);
    o.m_CauseTypeIsSet = true;
  }
  if (j.find("gmmCause") != j.end()) {
    j.at("gmmCause").get_to(o.m_GmmCause);
    o.m_GmmCauseIsSet = true;
  }
  if (j.find("ranapCause") != j.end()) {
    j.at("ranapCause").get_to(o.m_RanapCause);
    o.m_RanapCauseIsSet = true;
  }
  if (j.find("ranNasCause") != j.end()) {
    j.at("ranNasCause").get_to(o.m_RanNasCause);
    o.m_RanNasCauseIsSet = true;
  }
  if (j.find("s1ApCause") != j.end()) {
    j.at("s1ApCause").get_to(o.m_S1ApCause);
    o.m_S1ApCauseIsSet = true;
  }
  if (j.find("smCause") != j.end()) {
    j.at("smCause").get_to(o.m_SmCause);
    o.m_SmCauseIsSet = true;
  }
}

int32_t FailureCause::getBssgpCause() const {
  return m_BssgpCause;
}
void FailureCause::setBssgpCause(int32_t const value) {
  m_BssgpCause      = value;
  m_BssgpCauseIsSet = true;
}
bool FailureCause::bssgpCauseIsSet() const {
  return m_BssgpCauseIsSet;
}
void FailureCause::unsetBssgpCause() {
  m_BssgpCauseIsSet = false;
}
int32_t FailureCause::getCauseType() const {
  return m_CauseType;
}
void FailureCause::setCauseType(int32_t const value) {
  m_CauseType      = value;
  m_CauseTypeIsSet = true;
}
bool FailureCause::causeTypeIsSet() const {
  return m_CauseTypeIsSet;
}
void FailureCause::unsetCauseType() {
  m_CauseTypeIsSet = false;
}
int32_t FailureCause::getGmmCause() const {
  return m_GmmCause;
}
void FailureCause::setGmmCause(int32_t const value) {
  m_GmmCause      = value;
  m_GmmCauseIsSet = true;
}
bool FailureCause::gmmCauseIsSet() const {
  return m_GmmCauseIsSet;
}
void FailureCause::unsetGmmCause() {
  m_GmmCauseIsSet = false;
}
int32_t FailureCause::getRanapCause() const {
  return m_RanapCause;
}
void FailureCause::setRanapCause(int32_t const value) {
  m_RanapCause      = value;
  m_RanapCauseIsSet = true;
}
bool FailureCause::ranapCauseIsSet() const {
  return m_RanapCauseIsSet;
}
void FailureCause::unsetRanapCause() {
  m_RanapCauseIsSet = false;
}
std::string FailureCause::getRanNasCause() const {
  return m_RanNasCause;
}
void FailureCause::setRanNasCause(std::string const& value) {
  m_RanNasCause      = value;
  m_RanNasCauseIsSet = true;
}
bool FailureCause::ranNasCauseIsSet() const {
  return m_RanNasCauseIsSet;
}
void FailureCause::unsetRanNasCause() {
  m_RanNasCauseIsSet = false;
}
int32_t FailureCause::getS1ApCause() const {
  return m_S1ApCause;
}
void FailureCause::setS1ApCause(int32_t const value) {
  m_S1ApCause      = value;
  m_S1ApCauseIsSet = true;
}
bool FailureCause::s1ApCauseIsSet() const {
  return m_S1ApCauseIsSet;
}
void FailureCause::unsetS1ApCause() {
  m_S1ApCauseIsSet = false;
}
int32_t FailureCause::getSmCause() const {
  return m_SmCause;
}
void FailureCause::setSmCause(int32_t const value) {
  m_SmCause      = value;
  m_SmCauseIsSet = true;
}
bool FailureCause::smCauseIsSet() const {
  return m_SmCauseIsSet;
}
void FailureCause::unsetSmCause() {
  m_SmCauseIsSet = false;
}

}  // namespace oai::nef::model
