/**
 * 3gpp-applying-bdt-policy
 * API for applying BDT policy Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AppliedBdtPolicy.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AppliedBdtPolicy::AppliedBdtPolicy() {
  m_ExternalGroupId      = "";
  m_ExternalGroupIdIsSet = false;
  m_Gpsi                 = "";
  m_GpsiIsSet            = false;
  m_BdtRefId             = "";
  m_SuppFeat             = "";
  m_Self                 = "";
  m_SelfIsSet            = false;
}

void AppliedBdtPolicy::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AppliedBdtPolicy::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AppliedBdtPolicy::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AppliedBdtPolicy" : pathPrefix;

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  /* SuppFeat */ {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool AppliedBdtPolicy::operator==(const AppliedBdtPolicy& rhs) const {
  return

      ((!externalGroupIdIsSet() && !rhs.externalGroupIdIsSet()) ||
       (externalGroupIdIsSet() && rhs.externalGroupIdIsSet() &&
        getExternalGroupId() == rhs.getExternalGroupId())) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi())) &&

      (getBdtRefId() == rhs.getBdtRefId()) &&

      (getSuppFeat() == rhs.getSuppFeat()) &&

      ((!selfIsSet() && !rhs.selfIsSet()) ||
       (selfIsSet() && rhs.selfIsSet() && getSelf() == rhs.getSelf()))

          ;
}

bool AppliedBdtPolicy::operator!=(const AppliedBdtPolicy& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AppliedBdtPolicy& o) {
  j = nlohmann::json();
  if (o.externalGroupIdIsSet()) j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  j["bdtRefId"] = o.m_BdtRefId;
  j["suppFeat"] = o.m_SuppFeat;
  if (o.selfIsSet()) j["self"] = o.m_Self;
}

void from_json(const nlohmann::json& j, AppliedBdtPolicy& o) {
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  j.at("bdtRefId").get_to(o.m_BdtRefId);
  j.at("suppFeat").get_to(o.m_SuppFeat);
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
}

std::string AppliedBdtPolicy::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void AppliedBdtPolicy::setExternalGroupId(std::string const& value) {
  m_ExternalGroupId      = value;
  m_ExternalGroupIdIsSet = true;
}
bool AppliedBdtPolicy::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void AppliedBdtPolicy::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
std::string AppliedBdtPolicy::getGpsi() const {
  return m_Gpsi;
}
void AppliedBdtPolicy::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool AppliedBdtPolicy::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void AppliedBdtPolicy::unsetGpsi() {
  m_GpsiIsSet = false;
}
std::string AppliedBdtPolicy::getBdtRefId() const {
  return m_BdtRefId;
}
void AppliedBdtPolicy::setBdtRefId(std::string const& value) {
  m_BdtRefId = value;
}
std::string AppliedBdtPolicy::getSuppFeat() const {
  return m_SuppFeat;
}
void AppliedBdtPolicy::setSuppFeat(std::string const& value) {
  m_SuppFeat = value;
}
std::string AppliedBdtPolicy::getSelf() const {
  return m_Self;
}
void AppliedBdtPolicy::setSelf(std::string const& value) {
  m_Self      = value;
  m_SelfIsSet = true;
}
bool AppliedBdtPolicy::selfIsSet() const {
  return m_SelfIsSet;
}
void AppliedBdtPolicy::unsetSelf() {
  m_SelfIsSet = false;
}

}  // namespace oai::nef::model
