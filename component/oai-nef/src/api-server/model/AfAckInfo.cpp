/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AfAckInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AfAckInfo::AfAckInfo() {
  m_AfTransId      = "";
  m_AfTransIdIsSet = false;
  m_Gpsi           = "";
  m_GpsiIsSet      = false;
}

void AfAckInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AfAckInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AfAckInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "AfAckInfo" : pathPrefix;

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  return success;
}

bool AfAckInfo::operator==(const AfAckInfo& rhs) const {
  return

      ((!afTransIdIsSet() && !rhs.afTransIdIsSet()) ||
       (afTransIdIsSet() && rhs.afTransIdIsSet() &&
        getAfTransId() == rhs.getAfTransId())) &&

      (getAckResult() == rhs.getAckResult()) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi()))

          ;
}

bool AfAckInfo::operator!=(const AfAckInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AfAckInfo& o) {
  j = nlohmann::json();
  if (o.afTransIdIsSet()) j["afTransId"] = o.m_AfTransId;
  j["ackResult"] = o.m_AckResult;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
}

void from_json(const nlohmann::json& j, AfAckInfo& o) {
  if (j.find("afTransId") != j.end()) {
    j.at("afTransId").get_to(o.m_AfTransId);
    o.m_AfTransIdIsSet = true;
  }
  j.at("ackResult").get_to(o.m_AckResult);
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
}

std::string AfAckInfo::getAfTransId() const {
  return m_AfTransId;
}
void AfAckInfo::setAfTransId(std::string const& value) {
  m_AfTransId      = value;
  m_AfTransIdIsSet = true;
}
bool AfAckInfo::afTransIdIsSet() const {
  return m_AfTransIdIsSet;
}
void AfAckInfo::unsetAfTransId() {
  m_AfTransIdIsSet = false;
}
AfResultInfo AfAckInfo::getAckResult() const {
  return m_AckResult;
}
void AfAckInfo::setAckResult(AfResultInfo const& value) {
  m_AckResult = value;
}
std::string AfAckInfo::getGpsi() const {
  return m_Gpsi;
}
void AfAckInfo::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool AfAckInfo::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void AfAckInfo::unsetGpsi() {
  m_GpsiIsSet = false;
}

}  // namespace oai::nef::model
