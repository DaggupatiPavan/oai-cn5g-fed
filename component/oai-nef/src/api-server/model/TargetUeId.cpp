/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TargetUeId.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

TargetUeId::TargetUeId() {
  m_AnyUeInd          = false;
  m_AnyUeIndIsSet     = false;
  m_Gpsi              = "";
  m_GpsiIsSet         = false;
  m_ExterGroupId      = "";
  m_ExterGroupIdIsSet = false;
}

void TargetUeId::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool TargetUeId::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TargetUeId::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TargetUeId" : pathPrefix;

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  return success;
}

bool TargetUeId::operator==(const TargetUeId& rhs) const {
  return

      ((!anyUeIndIsSet() && !rhs.anyUeIndIsSet()) ||
       (anyUeIndIsSet() && rhs.anyUeIndIsSet() &&
        isAnyUeInd() == rhs.isAnyUeInd())) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi())) &&

      ((!exterGroupIdIsSet() && !rhs.exterGroupIdIsSet()) ||
       (exterGroupIdIsSet() && rhs.exterGroupIdIsSet() &&
        getExterGroupId() == rhs.getExterGroupId()))

          ;
}

bool TargetUeId::operator!=(const TargetUeId& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TargetUeId& o) {
  j = nlohmann::json();
  if (o.anyUeIndIsSet()) j["anyUeInd"] = o.m_AnyUeInd;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  if (o.exterGroupIdIsSet()) j["exterGroupId"] = o.m_ExterGroupId;
}

void from_json(const nlohmann::json& j, TargetUeId& o) {
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("exterGroupId") != j.end()) {
    j.at("exterGroupId").get_to(o.m_ExterGroupId);
    o.m_ExterGroupIdIsSet = true;
  }
}

bool TargetUeId::isAnyUeInd() const {
  return m_AnyUeInd;
}
void TargetUeId::setAnyUeInd(bool const value) {
  m_AnyUeInd      = value;
  m_AnyUeIndIsSet = true;
}
bool TargetUeId::anyUeIndIsSet() const {
  return m_AnyUeIndIsSet;
}
void TargetUeId::unsetAnyUeInd() {
  m_AnyUeIndIsSet = false;
}
std::string TargetUeId::getGpsi() const {
  return m_Gpsi;
}
void TargetUeId::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool TargetUeId::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void TargetUeId::unsetGpsi() {
  m_GpsiIsSet = false;
}
std::string TargetUeId::getExterGroupId() const {
  return m_ExterGroupId;
}
void TargetUeId::setExterGroupId(std::string const& value) {
  m_ExterGroupId      = value;
  m_ExterGroupIdIsSet = true;
}
bool TargetUeId::exterGroupIdIsSet() const {
  return m_ExterGroupIdIsSet;
}
void TargetUeId::unsetExterGroupId() {
  m_ExterGroupIdIsSet = false;
}

}  // namespace oai::nef::model
