/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventType_anyOf.h
 *
 *
 */

#ifndef EventType_anyOf_H_
#define EventType_anyOf_H_

#include <nlohmann/json.hpp>

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class EventType_anyOf {
 public:
  EventType_anyOf();
  virtual ~EventType_anyOf() = default;

  enum class eEventType_anyOf {
    // To have a valid default value.
    // Avoiding name clashes with user defined
    // enum values
    INVALID_VALUE_OPENAPI_GENERATED = 0,
    LOSS_OF_CONNECTIVITY,
    UE_REACHABILITY_FOR_DATA,
    UE_REACHABILITY_FOR_SMS,
    LOCATION_REPORTING,
    CHANGE_OF_SUPI_PEI_ASSOCIATION,
    ROAMING_STATUS,
    COMMUNICATION_FAILURE,
    AVAILABILITY_AFTER_DDN_FAILURE,
    CN_TYPE_CHANGE,
    DL_DATA_DELIVERY_STATUS,
    PDN_CONNECTIVITY_STATUS,
    UE_CONNECTION_MANAGEMENT_STATE
  };

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const EventType_anyOf& rhs) const;
  bool operator!=(const EventType_anyOf& rhs) const;

  /////////////////////////////////////////////
  /// EventType_anyOf members

  EventType_anyOf::eEventType_anyOf getValue() const;
  void setValue(EventType_anyOf::eEventType_anyOf value);

  friend void to_json(nlohmann::json& j, const EventType_anyOf& o);
  friend void from_json(const nlohmann::json& j, EventType_anyOf& o);

 protected:
  EventType_anyOf::eEventType_anyOf m_value =
      EventType_anyOf::eEventType_anyOf::INVALID_VALUE_OPENAPI_GENERATED;
};

}  // namespace oai::nef::model

#endif /* EventType_anyOf_H_ */
