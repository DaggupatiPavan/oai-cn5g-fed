/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringNotification.h
 *
 * Represents an event monitoring notification.
 */

#ifndef MonitoringNotification_H_
#define MonitoringNotification_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "AppliedParameterConfiguration.h"
#include "ConfigResult.h"
#include "MonitoringEventReport.h"

namespace oai::nef::model {

/// <summary>
/// Represents an event monitoring notification.
/// </summary>
class MonitoringNotification {
 public:
  MonitoringNotification();
  virtual ~MonitoringNotification() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MonitoringNotification& rhs) const;
  bool operator!=(const MonitoringNotification& rhs) const;

  /////////////////////////////////////////////
  /// MonitoringNotification members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSubscription() const;
  void setSubscription(std::string const& value);
  /// <summary>
  /// Each element identifies a notification of grouping configuration result.
  /// </summary>
  std::vector<ConfigResult> getConfigResults() const;
  void setConfigResults(std::vector<ConfigResult> const& value);
  bool configResultsIsSet() const;
  void unsetConfigResults();
  /// <summary>
  /// Monitoring event reports.
  /// </summary>
  std::vector<MonitoringEventReport> getMonitoringEventReports() const;
  void setMonitoringEventReports(
      std::vector<MonitoringEventReport> const& value);
  bool monitoringEventReportsIsSet() const;
  void unsetMonitoringEventReports();
  /// <summary>
  /// Indicates whether to request to cancel the corresponding monitoring
  /// subscription. Set to false or omitted otherwise.
  /// </summary>
  bool isCancelInd() const;
  void setCancelInd(bool const value);
  bool cancelIndIsSet() const;
  void unsetCancelInd();
  /// <summary>
  /// Identifies the cancelled external Identifier(s) within the active group
  /// via the \&quot;externalGroupId\&quot; attribute within the
  /// MonitoringEventSubscription data.
  /// </summary>
  std::vector<std::string> getCancelExternalIds() const;
  void setCancelExternalIds(std::vector<std::string> const& value);
  bool cancelExternalIdsIsSet() const;
  void unsetCancelExternalIds();
  /// <summary>
  /// Identifies the cancelled MSISDN(s) within the active group via the
  /// \&quot;externalGroupId\&quot; attribute within the
  /// MonitoringEventSubscription data.
  /// </summary>
  std::vector<std::string> getCancelMsisdns() const;
  void setCancelMsisdns(std::vector<std::string> const& value);
  bool cancelMsisdnsIsSet() const;
  void unsetCancelMsisdns();
  /// <summary>
  ///
  /// </summary>
  AppliedParameterConfiguration getAppliedParam() const;
  void setAppliedParam(AppliedParameterConfiguration const& value);
  bool appliedParamIsSet() const;
  void unsetAppliedParam();

  friend void to_json(nlohmann::json& j, const MonitoringNotification& o);
  friend void from_json(const nlohmann::json& j, MonitoringNotification& o);

 protected:
  std::string m_Subscription;

  std::vector<ConfigResult> m_ConfigResults;
  bool m_ConfigResultsIsSet;
  std::vector<MonitoringEventReport> m_MonitoringEventReports;
  bool m_MonitoringEventReportsIsSet;
  bool m_CancelInd;
  bool m_CancelIndIsSet;
  std::vector<std::string> m_CancelExternalIds;
  bool m_CancelExternalIdsIsSet;
  std::vector<std::string> m_CancelMsisdns;
  bool m_CancelMsisdnsIsSet;
  AppliedParameterConfiguration m_AppliedParam;
  bool m_AppliedParamIsSet;
};

}  // namespace oai::nef::model

#endif /* MonitoringNotification_H_ */
