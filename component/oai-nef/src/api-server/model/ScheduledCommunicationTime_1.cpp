/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ScheduledCommunicationTime_1.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

ScheduledCommunicationTime_1::ScheduledCommunicationTime_1() {
  m_DaysOfWeekIsSet     = false;
  m_TimeOfDayStart      = "";
  m_TimeOfDayStartIsSet = false;
  m_TimeOfDayEnd        = "";
  m_TimeOfDayEndIsSet   = false;
}

void ScheduledCommunicationTime_1::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool ScheduledCommunicationTime_1::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ScheduledCommunicationTime_1::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ScheduledCommunicationTime_1" : pathPrefix;

  if (daysOfWeekIsSet()) {
    const std::vector<int32_t>& value  = m_DaysOfWeek;
    const std::string currentValuePath = _pathPrefix + ".daysOfWeek";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    if (value.size() > 6) {
      success = false;
      msg << currentValuePath << ": must have at most 6 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const int32_t& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        if (value < 1) {
          success = false;
          msg << currentValuePath << ": must be greater than or equal to 1;";
        }
        if (value > 7) {
          success = false;
          msg << currentValuePath << ": must be less than or equal to 7;";
        }

        i++;
      }
    }
  }

  return success;
}

bool ScheduledCommunicationTime_1::operator==(
    const ScheduledCommunicationTime_1& rhs) const {
  return

      ((!daysOfWeekIsSet() && !rhs.daysOfWeekIsSet()) ||
       (daysOfWeekIsSet() && rhs.daysOfWeekIsSet() &&
        getDaysOfWeek() == rhs.getDaysOfWeek())) &&

      ((!timeOfDayStartIsSet() && !rhs.timeOfDayStartIsSet()) ||
       (timeOfDayStartIsSet() && rhs.timeOfDayStartIsSet() &&
        getTimeOfDayStart() == rhs.getTimeOfDayStart())) &&

      ((!timeOfDayEndIsSet() && !rhs.timeOfDayEndIsSet()) ||
       (timeOfDayEndIsSet() && rhs.timeOfDayEndIsSet() &&
        getTimeOfDayEnd() == rhs.getTimeOfDayEnd()))

          ;
}

bool ScheduledCommunicationTime_1::operator!=(
    const ScheduledCommunicationTime_1& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ScheduledCommunicationTime_1& o) {
  j = nlohmann::json();
  if (o.daysOfWeekIsSet() || !o.m_DaysOfWeek.empty())
    j["daysOfWeek"] = o.m_DaysOfWeek;
  if (o.timeOfDayStartIsSet()) j["timeOfDayStart"] = o.m_TimeOfDayStart;
  if (o.timeOfDayEndIsSet()) j["timeOfDayEnd"] = o.m_TimeOfDayEnd;
}

void from_json(const nlohmann::json& j, ScheduledCommunicationTime_1& o) {
  if (j.find("daysOfWeek") != j.end()) {
    j.at("daysOfWeek").get_to(o.m_DaysOfWeek);
    o.m_DaysOfWeekIsSet = true;
  }
  if (j.find("timeOfDayStart") != j.end()) {
    j.at("timeOfDayStart").get_to(o.m_TimeOfDayStart);
    o.m_TimeOfDayStartIsSet = true;
  }
  if (j.find("timeOfDayEnd") != j.end()) {
    j.at("timeOfDayEnd").get_to(o.m_TimeOfDayEnd);
    o.m_TimeOfDayEndIsSet = true;
  }
}

std::vector<int32_t> ScheduledCommunicationTime_1::getDaysOfWeek() const {
  return m_DaysOfWeek;
}
void ScheduledCommunicationTime_1::setDaysOfWeek(
    std::vector<int32_t> const value) {
  m_DaysOfWeek      = value;
  m_DaysOfWeekIsSet = true;
}
bool ScheduledCommunicationTime_1::daysOfWeekIsSet() const {
  return m_DaysOfWeekIsSet;
}
void ScheduledCommunicationTime_1::unsetDaysOfWeek() {
  m_DaysOfWeekIsSet = false;
}
std::string ScheduledCommunicationTime_1::getTimeOfDayStart() const {
  return m_TimeOfDayStart;
}
void ScheduledCommunicationTime_1::setTimeOfDayStart(std::string const& value) {
  m_TimeOfDayStart      = value;
  m_TimeOfDayStartIsSet = true;
}
bool ScheduledCommunicationTime_1::timeOfDayStartIsSet() const {
  return m_TimeOfDayStartIsSet;
}
void ScheduledCommunicationTime_1::unsetTimeOfDayStart() {
  m_TimeOfDayStartIsSet = false;
}
std::string ScheduledCommunicationTime_1::getTimeOfDayEnd() const {
  return m_TimeOfDayEnd;
}
void ScheduledCommunicationTime_1::setTimeOfDayEnd(std::string const& value) {
  m_TimeOfDayEnd      = value;
  m_TimeOfDayEndIsSet = true;
}
bool ScheduledCommunicationTime_1::timeOfDayEndIsSet() const {
  return m_TimeOfDayEndIsSet;
}
void ScheduledCommunicationTime_1::unsetTimeOfDayEnd() {
  m_TimeOfDayEndIsSet = false;
}

}  // namespace oai::nef::model
