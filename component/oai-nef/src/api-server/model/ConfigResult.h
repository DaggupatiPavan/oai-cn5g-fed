/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ConfigResult.h
 *
 * Represents one configuration processing result for a group&#39;s members.
 */

#ifndef ConfigResult_H_
#define ConfigResult_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ResultReason.h"

namespace oai::nef::model {

/// <summary>
/// Represents one configuration processing result for a group&#39;s members.
/// </summary>
class ConfigResult {
 public:
  ConfigResult();
  virtual ~ConfigResult() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ConfigResult& rhs) const;
  bool operator!=(const ConfigResult& rhs) const;

  /////////////////////////////////////////////
  /// ConfigResult members

  /// <summary>
  /// Each element indicates an external identifier of the UE.
  /// </summary>
  std::vector<std::string> getExternalIds() const;
  void setExternalIds(std::vector<std::string> const& value);
  bool externalIdsIsSet() const;
  void unsetExternalIds();
  /// <summary>
  /// Each element identifies the MS internal PSTN/ISDN number allocated for the
  /// UE.
  /// </summary>
  std::vector<std::string> getMsisdns() const;
  void setMsisdns(std::vector<std::string> const& value);
  bool msisdnsIsSet() const;
  void unsetMsisdns();
  /// <summary>
  ///
  /// </summary>
  ResultReason getResultReason() const;
  void setResultReason(ResultReason const& value);

  friend void to_json(nlohmann::json& j, const ConfigResult& o);
  friend void from_json(const nlohmann::json& j, ConfigResult& o);

 protected:
  std::vector<std::string> m_ExternalIds;
  bool m_ExternalIdsIsSet;
  std::vector<std::string> m_Msisdns;
  bool m_MsisdnsIsSet;
  ResultReason m_ResultReason;
};

}  // namespace oai::nef::model

#endif /* ConfigResult_H_ */
