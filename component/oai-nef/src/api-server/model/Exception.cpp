/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Exception.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

Exception::Exception() {
  m_ExcepLevel      = 0;
  m_ExcepLevelIsSet = false;
  m_ExcepTrendIsSet = false;
}

void Exception::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool Exception::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Exception::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "Exception" : pathPrefix;

  return success;
}

bool Exception::operator==(const Exception& rhs) const {
  return

      (getExcepId() == rhs.getExcepId()) &&

      ((!excepLevelIsSet() && !rhs.excepLevelIsSet()) ||
       (excepLevelIsSet() && rhs.excepLevelIsSet() &&
        getExcepLevel() == rhs.getExcepLevel())) &&

      ((!excepTrendIsSet() && !rhs.excepTrendIsSet()) ||
       (excepTrendIsSet() && rhs.excepTrendIsSet() &&
        getExcepTrend() == rhs.getExcepTrend()))

          ;
}

bool Exception::operator!=(const Exception& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Exception& o) {
  j            = nlohmann::json();
  j["excepId"] = o.m_ExcepId;
  if (o.excepLevelIsSet()) j["excepLevel"] = o.m_ExcepLevel;
  if (o.excepTrendIsSet()) j["excepTrend"] = o.m_ExcepTrend;
}

void from_json(const nlohmann::json& j, Exception& o) {
  j.at("excepId").get_to(o.m_ExcepId);
  if (j.find("excepLevel") != j.end()) {
    j.at("excepLevel").get_to(o.m_ExcepLevel);
    o.m_ExcepLevelIsSet = true;
  }
  if (j.find("excepTrend") != j.end()) {
    j.at("excepTrend").get_to(o.m_ExcepTrend);
    o.m_ExcepTrendIsSet = true;
  }
}

ExceptionId Exception::getExcepId() const {
  return m_ExcepId;
}
void Exception::setExcepId(ExceptionId const& value) {
  m_ExcepId = value;
}
int32_t Exception::getExcepLevel() const {
  return m_ExcepLevel;
}
void Exception::setExcepLevel(int32_t const value) {
  m_ExcepLevel      = value;
  m_ExcepLevelIsSet = true;
}
bool Exception::excepLevelIsSet() const {
  return m_ExcepLevelIsSet;
}
void Exception::unsetExcepLevel() {
  m_ExcepLevelIsSet = false;
}
ExceptionTrend Exception::getExcepTrend() const {
  return m_ExcepTrend;
}
void Exception::setExcepTrend(ExceptionTrend const& value) {
  m_ExcepTrend      = value;
  m_ExcepTrendIsSet = true;
}
bool Exception::excepTrendIsSet() const {
  return m_ExcepTrendIsSet;
}
void Exception::unsetExcepTrend() {
  m_ExcepTrendIsSet = false;
}

}  // namespace oai::nef::model
