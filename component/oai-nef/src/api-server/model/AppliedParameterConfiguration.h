/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AppliedParameterConfiguration.h
 *
 * Represents the parameter configuration applied in the network.
 */

#ifndef AppliedParameterConfiguration_H_
#define AppliedParameterConfiguration_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace oai::nef::model {

/// <summary>
/// Represents the parameter configuration applied in the network.
/// </summary>
class AppliedParameterConfiguration {
 public:
  AppliedParameterConfiguration();
  virtual ~AppliedParameterConfiguration() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AppliedParameterConfiguration& rhs) const;
  bool operator!=(const AppliedParameterConfiguration& rhs) const;

  /////////////////////////////////////////////
  /// AppliedParameterConfiguration members

  /// <summary>
  /// Each element uniquely identifies a user.
  /// </summary>
  std::vector<std::string> getExternalIds() const;
  void setExternalIds(std::vector<std::string> const& value);
  bool externalIdsIsSet() const;
  void unsetExternalIds();
  /// <summary>
  /// Each element identifies the MS internal PSTN/ISDN number allocated for a
  /// UE.
  /// </summary>
  std::vector<std::string> getMsisdns() const;
  void setMsisdns(std::vector<std::string> const& value);
  bool msisdnsIsSet() const;
  void unsetMsisdns();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumLatency() const;
  void setMaximumLatency(int32_t const value);
  bool maximumLatencyIsSet() const;
  void unsetMaximumLatency();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumResponseTime() const;
  void setMaximumResponseTime(int32_t const value);
  bool maximumResponseTimeIsSet() const;
  void unsetMaximumResponseTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumDetectionTime() const;
  void setMaximumDetectionTime(int32_t const value);
  bool maximumDetectionTimeIsSet() const;
  void unsetMaximumDetectionTime();

  friend void to_json(
      nlohmann::json& j, const AppliedParameterConfiguration& o);
  friend void from_json(
      const nlohmann::json& j, AppliedParameterConfiguration& o);

 protected:
  std::vector<std::string> m_ExternalIds;
  bool m_ExternalIdsIsSet;
  std::vector<std::string> m_Msisdns;
  bool m_MsisdnsIsSet;
  int32_t m_MaximumLatency;
  bool m_MaximumLatencyIsSet;
  int32_t m_MaximumResponseTime;
  bool m_MaximumResponseTimeIsSet;
  int32_t m_MaximumDetectionTime;
  bool m_MaximumDetectionTimeIsSet;
};

}  // namespace oai::nef::model

#endif /* AppliedParameterConfiguration_H_ */
