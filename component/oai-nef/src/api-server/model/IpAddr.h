/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IpAddr.h
 *
 * Contains an IP adresse.
 */

#ifndef IpAddr_H_
#define IpAddr_H_

#include <nlohmann/json.hpp>
#include <string>

#include "Ipv6Addr.h"
#include "Ipv6Prefix.h"

namespace oai::nef::model {

/// <summary>
/// Contains an IP adresse.
/// </summary>
class IpAddr {
 public:
  IpAddr();
  virtual ~IpAddr() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const IpAddr& rhs) const;
  bool operator!=(const IpAddr& rhs) const;

  /////////////////////////////////////////////
  /// IpAddr members

  /// <summary>
  /// String identifying a IPv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const& value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getIpv6Addr() const;
  void setIpv6Addr(Ipv6Addr const& value);
  bool ipv6AddrIsSet() const;
  void unsetIpv6Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Prefix getIpv6Prefix() const;
  void setIpv6Prefix(Ipv6Prefix const& value);
  bool ipv6PrefixIsSet() const;
  void unsetIpv6Prefix();

  friend void to_json(nlohmann::json& j, const IpAddr& o);
  friend void from_json(const nlohmann::json& j, IpAddr& o);

 protected:
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  Ipv6Addr m_Ipv6Addr;
  bool m_Ipv6AddrIsSet;
  Ipv6Prefix m_Ipv6Prefix;
  bool m_Ipv6PrefixIsSet;
};

}  // namespace oai::nef::model

#endif /* IpAddr_H_ */
