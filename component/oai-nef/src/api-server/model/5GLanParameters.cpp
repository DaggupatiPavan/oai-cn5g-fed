/**
 * 3gpp-5glan-pp
 * API for 5G LAN Parameter Provision. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "5GLanParameters.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

_5GLanParameters::_5GLanParameters() {
  m_ExterGroupId       = "";
  m_Dnn                = "";
  m_AaaIpv4Addr        = "";
  m_AaaIpv4AddrIsSet   = false;
  m_AaaIpv6AddrIsSet   = false;
  m_AaaUsgsIsSet       = false;
  m_MtcProviderId      = "";
  m_MtcProviderIdIsSet = false;
}

void _5GLanParameters::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool _5GLanParameters::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool _5GLanParameters::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "5GLanParameters" : pathPrefix;

  /* Gpsis */ {
    const std::map<std::string, std::string>& value = m_Gpsis;
    const std::string currentValuePath              = _pathPrefix + ".gpsis";
  }

  if (aaaIpv4AddrIsSet()) {
    const std::string& value           = m_AaaIpv4Addr;
    const std::string currentValuePath = _pathPrefix + ".aaaIpv4Addr";
  }

  if (aaaUsgsIsSet()) {
    const std::vector<AaaUsage>& value = m_AaaUsgs;
    const std::string currentValuePath = _pathPrefix + ".aaaUsgs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const AaaUsage& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".aaaUsgs") && success;

        i++;
      }
    }
  }

  /* AppDesps */ {
    const std::map<std::string, AppDescriptor>& value = m_AppDesps;
    const std::string currentValuePath = _pathPrefix + ".appDesps";
  }

  return success;
}

bool _5GLanParameters::operator==(const _5GLanParameters& rhs) const {
  return

      (getExterGroupId() == rhs.getExterGroupId()) &&

      (getGpsis() == rhs.getGpsis()) &&

      (getDnn() == rhs.getDnn()) &&

      ((!aaaIpv4AddrIsSet() && !rhs.aaaIpv4AddrIsSet()) ||
       (aaaIpv4AddrIsSet() && rhs.aaaIpv4AddrIsSet() &&
        getAaaIpv4Addr() == rhs.getAaaIpv4Addr())) &&

      ((!aaaIpv6AddrIsSet() && !rhs.aaaIpv6AddrIsSet()) ||
       (aaaIpv6AddrIsSet() && rhs.aaaIpv6AddrIsSet() &&
        getAaaIpv6Addr() == rhs.getAaaIpv6Addr())) &&

      ((!aaaUsgsIsSet() && !rhs.aaaUsgsIsSet()) ||
       (aaaUsgsIsSet() && rhs.aaaUsgsIsSet() &&
        getAaaUsgs() == rhs.getAaaUsgs())) &&

      ((!mtcProviderIdIsSet() && !rhs.mtcProviderIdIsSet()) ||
       (mtcProviderIdIsSet() && rhs.mtcProviderIdIsSet() &&
        getMtcProviderId() == rhs.getMtcProviderId())) &&

      (getSnssai() == rhs.getSnssai()) &&

      (getSessionType() == rhs.getSessionType()) &&

      (getAppDesps() == rhs.getAppDesps())

          ;
}

bool _5GLanParameters::operator!=(const _5GLanParameters& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _5GLanParameters& o) {
  j                 = nlohmann::json();
  j["exterGroupId"] = o.m_ExterGroupId;
  j["gpsis"]        = o.m_Gpsis;
  j["dnn"]          = o.m_Dnn;
  if (o.aaaIpv4AddrIsSet()) j["aaaIpv4Addr"] = o.m_AaaIpv4Addr;
  if (o.aaaIpv6AddrIsSet()) j["aaaIpv6Addr"] = o.m_AaaIpv6Addr;
  if (o.aaaUsgsIsSet() || !o.m_AaaUsgs.empty()) j["aaaUsgs"] = o.m_AaaUsgs;
  if (o.mtcProviderIdIsSet()) j["mtcProviderId"] = o.m_MtcProviderId;
  j["snssai"]      = o.m_Snssai;
  j["sessionType"] = o.m_SessionType;
  j["appDesps"]    = o.m_AppDesps;
}

void from_json(const nlohmann::json& j, _5GLanParameters& o) {
  j.at("exterGroupId").get_to(o.m_ExterGroupId);
  j.at("gpsis").get_to(o.m_Gpsis);
  j.at("dnn").get_to(o.m_Dnn);
  if (j.find("aaaIpv4Addr") != j.end()) {
    j.at("aaaIpv4Addr").get_to(o.m_AaaIpv4Addr);
    o.m_AaaIpv4AddrIsSet = true;
  }
  if (j.find("aaaIpv6Addr") != j.end()) {
    j.at("aaaIpv6Addr").get_to(o.m_AaaIpv6Addr);
    o.m_AaaIpv6AddrIsSet = true;
  }
  if (j.find("aaaUsgs") != j.end()) {
    j.at("aaaUsgs").get_to(o.m_AaaUsgs);
    o.m_AaaUsgsIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  j.at("snssai").get_to(o.m_Snssai);
  j.at("sessionType").get_to(o.m_SessionType);
  j.at("appDesps").get_to(o.m_AppDesps);
}

std::string _5GLanParameters::getExterGroupId() const {
  return m_ExterGroupId;
}
void _5GLanParameters::setExterGroupId(std::string const& value) {
  m_ExterGroupId = value;
}
std::map<std::string, std::string> _5GLanParameters::getGpsis() const {
  return m_Gpsis;
}
void _5GLanParameters::setGpsis(
    std::map<std::string, std::string> const& value) {
  m_Gpsis = value;
}
std::string _5GLanParameters::getDnn() const {
  return m_Dnn;
}
void _5GLanParameters::setDnn(std::string const& value) {
  m_Dnn = value;
}
std::string _5GLanParameters::getAaaIpv4Addr() const {
  return m_AaaIpv4Addr;
}
void _5GLanParameters::setAaaIpv4Addr(std::string const& value) {
  m_AaaIpv4Addr      = value;
  m_AaaIpv4AddrIsSet = true;
}
bool _5GLanParameters::aaaIpv4AddrIsSet() const {
  return m_AaaIpv4AddrIsSet;
}
void _5GLanParameters::unsetAaaIpv4Addr() {
  m_AaaIpv4AddrIsSet = false;
}
Ipv6Addr _5GLanParameters::getAaaIpv6Addr() const {
  return m_AaaIpv6Addr;
}
void _5GLanParameters::setAaaIpv6Addr(Ipv6Addr const& value) {
  m_AaaIpv6Addr      = value;
  m_AaaIpv6AddrIsSet = true;
}
bool _5GLanParameters::aaaIpv6AddrIsSet() const {
  return m_AaaIpv6AddrIsSet;
}
void _5GLanParameters::unsetAaaIpv6Addr() {
  m_AaaIpv6AddrIsSet = false;
}
std::vector<AaaUsage> _5GLanParameters::getAaaUsgs() const {
  return m_AaaUsgs;
}
void _5GLanParameters::setAaaUsgs(std::vector<AaaUsage> const& value) {
  m_AaaUsgs      = value;
  m_AaaUsgsIsSet = true;
}
bool _5GLanParameters::aaaUsgsIsSet() const {
  return m_AaaUsgsIsSet;
}
void _5GLanParameters::unsetAaaUsgs() {
  m_AaaUsgsIsSet = false;
}
std::string _5GLanParameters::getMtcProviderId() const {
  return m_MtcProviderId;
}
void _5GLanParameters::setMtcProviderId(std::string const& value) {
  m_MtcProviderId      = value;
  m_MtcProviderIdIsSet = true;
}
bool _5GLanParameters::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void _5GLanParameters::unsetMtcProviderId() {
  m_MtcProviderIdIsSet = false;
}
Snssai _5GLanParameters::getSnssai() const {
  return m_Snssai;
}
void _5GLanParameters::setSnssai(Snssai const& value) {
  m_Snssai = value;
}
PduSessionType _5GLanParameters::getSessionType() const {
  return m_SessionType;
}
void _5GLanParameters::setSessionType(PduSessionType const& value) {
  m_SessionType = value;
}
std::map<std::string, AppDescriptor> _5GLanParameters::getAppDesps() const {
  return m_AppDesps;
}
void _5GLanParameters::setAppDesps(
    std::map<std::string, AppDescriptor> const& value) {
  m_AppDesps = value;
}

}  // namespace oai::nef::model
