/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CircumstanceDescription.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

CircumstanceDescription::CircumstanceDescription() {
  m_Freq         = 0.0f;
  m_FreqIsSet    = false;
  m_Tm           = "";
  m_TmIsSet      = false;
  m_LocAreaIsSet = false;
  m_Vol          = 0L;
  m_VolIsSet     = false;
}

void CircumstanceDescription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool CircumstanceDescription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool CircumstanceDescription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "CircumstanceDescription" : pathPrefix;

  if (volIsSet()) {
    const int64_t& value               = m_Vol;
    const std::string currentValuePath = _pathPrefix + ".vol";

    if (value < 0ll) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool CircumstanceDescription::operator==(
    const CircumstanceDescription& rhs) const {
  return

      ((!freqIsSet() && !rhs.freqIsSet()) ||
       (freqIsSet() && rhs.freqIsSet() && getFreq() == rhs.getFreq())) &&

      ((!tmIsSet() && !rhs.tmIsSet()) ||
       (tmIsSet() && rhs.tmIsSet() && getTm() == rhs.getTm())) &&

      ((!locAreaIsSet() && !rhs.locAreaIsSet()) ||
       (locAreaIsSet() && rhs.locAreaIsSet() &&
        getLocArea() == rhs.getLocArea())) &&

      ((!volIsSet() && !rhs.volIsSet()) ||
       (volIsSet() && rhs.volIsSet() && getVol() == rhs.getVol()))

          ;
}

bool CircumstanceDescription::operator!=(
    const CircumstanceDescription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CircumstanceDescription& o) {
  j = nlohmann::json();
  if (o.freqIsSet()) j["freq"] = o.m_Freq;
  if (o.tmIsSet()) j["tm"] = o.m_Tm;
  if (o.locAreaIsSet()) j["locArea"] = o.m_LocArea;
  if (o.volIsSet()) j["vol"] = o.m_Vol;
}

void from_json(const nlohmann::json& j, CircumstanceDescription& o) {
  if (j.find("freq") != j.end()) {
    j.at("freq").get_to(o.m_Freq);
    o.m_FreqIsSet = true;
  }
  if (j.find("tm") != j.end()) {
    j.at("tm").get_to(o.m_Tm);
    o.m_TmIsSet = true;
  }
  if (j.find("locArea") != j.end()) {
    j.at("locArea").get_to(o.m_LocArea);
    o.m_LocAreaIsSet = true;
  }
  if (j.find("vol") != j.end()) {
    j.at("vol").get_to(o.m_Vol);
    o.m_VolIsSet = true;
  }
}

float CircumstanceDescription::getFreq() const {
  return m_Freq;
}
void CircumstanceDescription::setFreq(float const value) {
  m_Freq      = value;
  m_FreqIsSet = true;
}
bool CircumstanceDescription::freqIsSet() const {
  return m_FreqIsSet;
}
void CircumstanceDescription::unsetFreq() {
  m_FreqIsSet = false;
}
std::string CircumstanceDescription::getTm() const {
  return m_Tm;
}
void CircumstanceDescription::setTm(std::string const& value) {
  m_Tm      = value;
  m_TmIsSet = true;
}
bool CircumstanceDescription::tmIsSet() const {
  return m_TmIsSet;
}
void CircumstanceDescription::unsetTm() {
  m_TmIsSet = false;
}
NetworkAreaInfo CircumstanceDescription::getLocArea() const {
  return m_LocArea;
}
void CircumstanceDescription::setLocArea(NetworkAreaInfo const& value) {
  m_LocArea      = value;
  m_LocAreaIsSet = true;
}
bool CircumstanceDescription::locAreaIsSet() const {
  return m_LocAreaIsSet;
}
void CircumstanceDescription::unsetLocArea() {
  m_LocAreaIsSet = false;
}
int64_t CircumstanceDescription::getVol() const {
  return m_Vol;
}
void CircumstanceDescription::setVol(int64_t const value) {
  m_Vol      = value;
  m_VolIsSet = true;
}
bool CircumstanceDescription::volIsSet() const {
  return m_VolIsSet;
}
void CircumstanceDescription::unsetVol() {
  m_VolIsSet = false;
}

}  // namespace oai::nef::model
