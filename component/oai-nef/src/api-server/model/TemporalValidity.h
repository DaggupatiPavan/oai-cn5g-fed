/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TemporalValidity.h
 *
 * Indicates the time interval(s) during which the AF request is to be applied
 */

#ifndef TemporalValidity_H_
#define TemporalValidity_H_

#include <nlohmann/json.hpp>
#include <string>

namespace oai::nef::model {

/// <summary>
/// Indicates the time interval(s) during which the AF request is to be applied
/// </summary>
class TemporalValidity {
 public:
  TemporalValidity();
  virtual ~TemporalValidity() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const TemporalValidity& rhs) const;
  bool operator!=(const TemporalValidity& rhs) const;

  /////////////////////////////////////////////
  /// TemporalValidity members

  /// <summary>
  ///
  /// </summary>
  std::string getStartTime() const;
  void setStartTime(std::string const& value);
  bool startTimeIsSet() const;
  void unsetStartTime();
  /// <summary>
  ///
  /// </summary>
  std::string getStopTime() const;
  void setStopTime(std::string const& value);
  bool stopTimeIsSet() const;
  void unsetStopTime();

  friend void to_json(nlohmann::json& j, const TemporalValidity& o);
  friend void from_json(const nlohmann::json& j, TemporalValidity& o);

 protected:
  std::string m_StartTime;
  bool m_StartTimeIsSet;
  std::string m_StopTime;
  bool m_StopTimeIsSet;
};

}  // namespace oai::nef::model

#endif /* TemporalValidity_H_ */
