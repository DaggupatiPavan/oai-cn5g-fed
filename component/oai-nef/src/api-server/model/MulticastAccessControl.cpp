/**
 * 3gpp-iptvconfiguration
 * API for IPTV configuration. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MulticastAccessControl.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

MulticastAccessControl::MulticastAccessControl() {
  m_SrcIpv4Addr          = "";
  m_SrcIpv4AddrIsSet     = false;
  m_SrcIpv6AddrIsSet     = false;
  m_MulticastV4Addr      = "";
  m_MulticastV4AddrIsSet = false;
  m_MulticastV6AddrIsSet = false;
}

void MulticastAccessControl::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool MulticastAccessControl::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool MulticastAccessControl::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "MulticastAccessControl" : pathPrefix;

  if (srcIpv4AddrIsSet()) {
    const std::string& value           = m_SrcIpv4Addr;
    const std::string currentValuePath = _pathPrefix + ".srcIpv4Addr";
  }

  if (multicastV4AddrIsSet()) {
    const std::string& value           = m_MulticastV4Addr;
    const std::string currentValuePath = _pathPrefix + ".multicastV4Addr";
  }

  return success;
}

bool MulticastAccessControl::operator==(
    const MulticastAccessControl& rhs) const {
  return

      ((!srcIpv4AddrIsSet() && !rhs.srcIpv4AddrIsSet()) ||
       (srcIpv4AddrIsSet() && rhs.srcIpv4AddrIsSet() &&
        getSrcIpv4Addr() == rhs.getSrcIpv4Addr())) &&

      ((!srcIpv6AddrIsSet() && !rhs.srcIpv6AddrIsSet()) ||
       (srcIpv6AddrIsSet() && rhs.srcIpv6AddrIsSet() &&
        getSrcIpv6Addr() == rhs.getSrcIpv6Addr())) &&

      ((!multicastV4AddrIsSet() && !rhs.multicastV4AddrIsSet()) ||
       (multicastV4AddrIsSet() && rhs.multicastV4AddrIsSet() &&
        getMulticastV4Addr() == rhs.getMulticastV4Addr())) &&

      ((!multicastV6AddrIsSet() && !rhs.multicastV6AddrIsSet()) ||
       (multicastV6AddrIsSet() && rhs.multicastV6AddrIsSet() &&
        getMulticastV6Addr() == rhs.getMulticastV6Addr())) &&

      (getAccStatus() == rhs.getAccStatus())

          ;
}

bool MulticastAccessControl::operator!=(
    const MulticastAccessControl& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MulticastAccessControl& o) {
  j = nlohmann::json();
  if (o.srcIpv4AddrIsSet()) j["srcIpv4Addr"] = o.m_SrcIpv4Addr;
  if (o.srcIpv6AddrIsSet()) j["srcIpv6Addr"] = o.m_SrcIpv6Addr;
  if (o.multicastV4AddrIsSet()) j["multicastV4Addr"] = o.m_MulticastV4Addr;
  if (o.multicastV6AddrIsSet()) j["multicastV6Addr"] = o.m_MulticastV6Addr;
  j["accStatus"] = o.m_AccStatus;
}

void from_json(const nlohmann::json& j, MulticastAccessControl& o) {
  if (j.find("srcIpv4Addr") != j.end()) {
    j.at("srcIpv4Addr").get_to(o.m_SrcIpv4Addr);
    o.m_SrcIpv4AddrIsSet = true;
  }
  if (j.find("srcIpv6Addr") != j.end()) {
    j.at("srcIpv6Addr").get_to(o.m_SrcIpv6Addr);
    o.m_SrcIpv6AddrIsSet = true;
  }
  if (j.find("multicastV4Addr") != j.end()) {
    j.at("multicastV4Addr").get_to(o.m_MulticastV4Addr);
    o.m_MulticastV4AddrIsSet = true;
  }
  if (j.find("multicastV6Addr") != j.end()) {
    j.at("multicastV6Addr").get_to(o.m_MulticastV6Addr);
    o.m_MulticastV6AddrIsSet = true;
  }
  j.at("accStatus").get_to(o.m_AccStatus);
}

std::string MulticastAccessControl::getSrcIpv4Addr() const {
  return m_SrcIpv4Addr;
}
void MulticastAccessControl::setSrcIpv4Addr(std::string const& value) {
  m_SrcIpv4Addr      = value;
  m_SrcIpv4AddrIsSet = true;
}
bool MulticastAccessControl::srcIpv4AddrIsSet() const {
  return m_SrcIpv4AddrIsSet;
}
void MulticastAccessControl::unsetSrcIpv4Addr() {
  m_SrcIpv4AddrIsSet = false;
}
Ipv6Addr MulticastAccessControl::getSrcIpv6Addr() const {
  return m_SrcIpv6Addr;
}
void MulticastAccessControl::setSrcIpv6Addr(Ipv6Addr const& value) {
  m_SrcIpv6Addr      = value;
  m_SrcIpv6AddrIsSet = true;
}
bool MulticastAccessControl::srcIpv6AddrIsSet() const {
  return m_SrcIpv6AddrIsSet;
}
void MulticastAccessControl::unsetSrcIpv6Addr() {
  m_SrcIpv6AddrIsSet = false;
}
std::string MulticastAccessControl::getMulticastV4Addr() const {
  return m_MulticastV4Addr;
}
void MulticastAccessControl::setMulticastV4Addr(std::string const& value) {
  m_MulticastV4Addr      = value;
  m_MulticastV4AddrIsSet = true;
}
bool MulticastAccessControl::multicastV4AddrIsSet() const {
  return m_MulticastV4AddrIsSet;
}
void MulticastAccessControl::unsetMulticastV4Addr() {
  m_MulticastV4AddrIsSet = false;
}
Ipv6Addr MulticastAccessControl::getMulticastV6Addr() const {
  return m_MulticastV6Addr;
}
void MulticastAccessControl::setMulticastV6Addr(Ipv6Addr const& value) {
  m_MulticastV6Addr      = value;
  m_MulticastV6AddrIsSet = true;
}
bool MulticastAccessControl::multicastV6AddrIsSet() const {
  return m_MulticastV6AddrIsSet;
}
void MulticastAccessControl::unsetMulticastV6Addr() {
  m_MulticastV6AddrIsSet = false;
}
AccessRightStatus MulticastAccessControl::getAccStatus() const {
  return m_AccStatus;
}
void MulticastAccessControl::setAccStatus(AccessRightStatus const& value) {
  m_AccStatus = value;
}

}  // namespace oai::nef::model
