/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SmallDataRateControlTimeUnit.h
 *
 * Possible values are - MINUTE: Indicates the rate control is applied per
 * minute. - HOUR: Indicates the rate control is applied per hour. - DAY:
 * Indicates the rate control is applied per day. - WEEK: Indicates the rate
 * control is applied per week. - 6MINUTES: Indicates the rate control is
 * applied per 6 minutes.
 */

#ifndef SmallDataRateControlTimeUnit_H_
#define SmallDataRateControlTimeUnit_H_

#include <nlohmann/json.hpp>

#include "SmallDataRateControlTimeUnit_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - MINUTE: Indicates the rate control is applied per
/// minute. - HOUR: Indicates the rate control is applied per hour. - DAY:
/// Indicates the rate control is applied per day. - WEEK: Indicates the rate
/// control is applied per week. - 6MINUTES: Indicates the rate control is
/// applied per 6 minutes.
/// </summary>
class SmallDataRateControlTimeUnit {
 public:
  SmallDataRateControlTimeUnit();
  virtual ~SmallDataRateControlTimeUnit() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SmallDataRateControlTimeUnit& rhs) const;
  bool operator!=(const SmallDataRateControlTimeUnit& rhs) const;

  /////////////////////////////////////////////
  /// SmallDataRateControlTimeUnit members

  SmallDataRateControlTimeUnit_anyOf getValue() const;
  void setValue(SmallDataRateControlTimeUnit_anyOf value);
  SmallDataRateControlTimeUnit_anyOf::eSmallDataRateControlTimeUnit_anyOf
  getEnumValue() const;
  void setEnumValue(
      SmallDataRateControlTimeUnit_anyOf::eSmallDataRateControlTimeUnit_anyOf
          value);
  friend void to_json(nlohmann::json& j, const SmallDataRateControlTimeUnit& o);
  friend void from_json(
      const nlohmann::json& j, SmallDataRateControlTimeUnit& o);
  friend void to_json(
      nlohmann::json& j, const SmallDataRateControlTimeUnit_anyOf& o);
  friend void from_json(
      const nlohmann::json& j, SmallDataRateControlTimeUnit_anyOf& o);

 protected:
  SmallDataRateControlTimeUnit_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* SmallDataRateControlTimeUnit_H_ */
