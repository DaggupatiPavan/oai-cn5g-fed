/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmContextConfiguration.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

SmContextConfiguration::SmContextConfiguration() {
  m_SmalDataRateControlIsSet = false;
  m_SmallDataRateStatusIsSet = false;
  m_ServPlmnDataRateCtl      = 0;
  m_ServPlmnDataRateCtlIsSet = false;
}

void SmContextConfiguration::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool SmContextConfiguration::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SmContextConfiguration::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SmContextConfiguration" : pathPrefix;

  if (servPlmnDataRateCtlIsSet()) {
    const int32_t& value               = m_ServPlmnDataRateCtl;
    const std::string currentValuePath = _pathPrefix + ".servPlmnDataRateCtl";

    if (value < 10) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 10;";
    }
  }

  return success;
}

bool SmContextConfiguration::operator==(
    const SmContextConfiguration& rhs) const {
  return

      ((!smalDataRateControlIsSet() && !rhs.smalDataRateControlIsSet()) ||
       (smalDataRateControlIsSet() && rhs.smalDataRateControlIsSet() &&
        getSmalDataRateControl() == rhs.getSmalDataRateControl())) &&

      ((!smallDataRateStatusIsSet() && !rhs.smallDataRateStatusIsSet()) ||
       (smallDataRateStatusIsSet() && rhs.smallDataRateStatusIsSet() &&
        getSmallDataRateStatus() == rhs.getSmallDataRateStatus())) &&

      ((!servPlmnDataRateCtlIsSet() && !rhs.servPlmnDataRateCtlIsSet()) ||
       (servPlmnDataRateCtlIsSet() && rhs.servPlmnDataRateCtlIsSet() &&
        getServPlmnDataRateCtl() == rhs.getServPlmnDataRateCtl()))

          ;
}

bool SmContextConfiguration::operator!=(
    const SmContextConfiguration& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SmContextConfiguration& o) {
  j = nlohmann::json();
  if (o.smalDataRateControlIsSet())
    j["smalDataRateControl"] = o.m_SmalDataRateControl;
  if (o.smallDataRateStatusIsSet())
    j["smallDataRateStatus"] = o.m_SmallDataRateStatus;
  if (o.servPlmnDataRateCtlIsSet())
    j["servPlmnDataRateCtl"] = o.m_ServPlmnDataRateCtl;
}

void from_json(const nlohmann::json& j, SmContextConfiguration& o) {
  if (j.find("smalDataRateControl") != j.end()) {
    j.at("smalDataRateControl").get_to(o.m_SmalDataRateControl);
    o.m_SmalDataRateControlIsSet = true;
  }
  if (j.find("smallDataRateStatus") != j.end()) {
    j.at("smallDataRateStatus").get_to(o.m_SmallDataRateStatus);
    o.m_SmallDataRateStatusIsSet = true;
  }
  if (j.find("servPlmnDataRateCtl") != j.end()) {
    j.at("servPlmnDataRateCtl").get_to(o.m_ServPlmnDataRateCtl);
    o.m_ServPlmnDataRateCtlIsSet = true;
  }
}

SmallDataRateControl SmContextConfiguration::getSmalDataRateControl() const {
  return m_SmalDataRateControl;
}
void SmContextConfiguration::setSmalDataRateControl(
    SmallDataRateControl const& value) {
  m_SmalDataRateControl      = value;
  m_SmalDataRateControlIsSet = true;
}
bool SmContextConfiguration::smalDataRateControlIsSet() const {
  return m_SmalDataRateControlIsSet;
}
void SmContextConfiguration::unsetSmalDataRateControl() {
  m_SmalDataRateControlIsSet = false;
}
SmallDataRateStatus SmContextConfiguration::getSmallDataRateStatus() const {
  return m_SmallDataRateStatus;
}
void SmContextConfiguration::setSmallDataRateStatus(
    SmallDataRateStatus const& value) {
  m_SmallDataRateStatus      = value;
  m_SmallDataRateStatusIsSet = true;
}
bool SmContextConfiguration::smallDataRateStatusIsSet() const {
  return m_SmallDataRateStatusIsSet;
}
void SmContextConfiguration::unsetSmallDataRateStatus() {
  m_SmallDataRateStatusIsSet = false;
}
int32_t SmContextConfiguration::getServPlmnDataRateCtl() const {
  return m_ServPlmnDataRateCtl;
}
void SmContextConfiguration::setServPlmnDataRateCtl(int32_t const value) {
  m_ServPlmnDataRateCtl      = value;
  m_ServPlmnDataRateCtlIsSet = true;
}
bool SmContextConfiguration::servPlmnDataRateCtlIsSet() const {
  return m_ServPlmnDataRateCtlIsSet;
}
void SmContextConfiguration::unsetServPlmnDataRateCtl() {
  m_ServPlmnDataRateCtlIsSet = false;
}

}  // namespace oai::nef::model
