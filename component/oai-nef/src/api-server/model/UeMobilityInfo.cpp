/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeMobilityInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

UeMobilityInfo::UeMobilityInfo() {
  m_Supi       = "";
  m_AppId      = "";
  m_AppIdIsSet = false;
}

void UeMobilityInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool UeMobilityInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeMobilityInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeMobilityInfo" : pathPrefix;

  /* Supi */ {
    const std::string& value           = m_Supi;
    const std::string currentValuePath = _pathPrefix + ".supi";
  }

  /* UeTrajs */ {
    const std::vector<UeTrajectoryInfo>& value = m_UeTrajs;
    const std::string currentValuePath         = _pathPrefix + ".ueTrajs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const UeTrajectoryInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".ueTrajs") && success;

        i++;
      }
    }
  }

  return success;
}

bool UeMobilityInfo::operator==(const UeMobilityInfo& rhs) const {
  return

      (getSupi() == rhs.getSupi()) &&

      ((!appIdIsSet() && !rhs.appIdIsSet()) ||
       (appIdIsSet() && rhs.appIdIsSet() && getAppId() == rhs.getAppId())) &&

      (getUeTrajs() == rhs.getUeTrajs())

          ;
}

bool UeMobilityInfo::operator!=(const UeMobilityInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeMobilityInfo& o) {
  j         = nlohmann::json();
  j["supi"] = o.m_Supi;
  if (o.appIdIsSet()) j["appId"] = o.m_AppId;
  j["ueTrajs"] = o.m_UeTrajs;
}

void from_json(const nlohmann::json& j, UeMobilityInfo& o) {
  j.at("supi").get_to(o.m_Supi);
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  j.at("ueTrajs").get_to(o.m_UeTrajs);
}

std::string UeMobilityInfo::getSupi() const {
  return m_Supi;
}
void UeMobilityInfo::setSupi(std::string const& value) {
  m_Supi = value;
}
std::string UeMobilityInfo::getAppId() const {
  return m_AppId;
}
void UeMobilityInfo::setAppId(std::string const& value) {
  m_AppId      = value;
  m_AppIdIsSet = true;
}
bool UeMobilityInfo::appIdIsSet() const {
  return m_AppIdIsSet;
}
void UeMobilityInfo::unsetAppId() {
  m_AppIdIsSet = false;
}
std::vector<UeTrajectoryInfo> UeMobilityInfo::getUeTrajs() const {
  return m_UeTrajs;
}
void UeMobilityInfo::setUeTrajs(std::vector<UeTrajectoryInfo> const& value) {
  m_UeTrajs = value;
}

}  // namespace oai::nef::model
