/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NefEventNotification.h
 *
 *
 */

#ifndef NefEventNotification_H_
#define NefEventNotification_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ExceptionInfo.h"
#include "NefEvent.h"
#include "ServiceExperienceInfo.h"
#include "UeCommunicationInfo.h"
#include "UeMobilityInfo.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class NefEventNotification {
 public:
  NefEventNotification();
  virtual ~NefEventNotification() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NefEventNotification& rhs) const;
  bool operator!=(const NefEventNotification& rhs) const;

  /////////////////////////////////////////////
  /// NefEventNotification members

  /// <summary>
  ///
  /// </summary>
  NefEvent getEvent() const;
  void setEvent(NefEvent const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getTimeStamp() const;
  void setTimeStamp(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<ServiceExperienceInfo> getSvcExprcInfos() const;
  void setSvcExprcInfos(std::vector<ServiceExperienceInfo> const& value);
  bool svcExprcInfosIsSet() const;
  void unsetSvcExprcInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeMobilityInfo> getUeMobilityInfos() const;
  void setUeMobilityInfos(std::vector<UeMobilityInfo> const& value);
  bool ueMobilityInfosIsSet() const;
  void unsetUeMobilityInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<UeCommunicationInfo> getUeCommInfos() const;
  void setUeCommInfos(std::vector<UeCommunicationInfo> const& value);
  bool ueCommInfosIsSet() const;
  void unsetUeCommInfos();
  /// <summary>
  ///
  /// </summary>
  std::vector<ExceptionInfo> getExcepInfos() const;
  void setExcepInfos(std::vector<ExceptionInfo> const& value);
  bool excepInfosIsSet() const;
  void unsetExcepInfos();

  friend void to_json(nlohmann::json& j, const NefEventNotification& o);
  friend void from_json(const nlohmann::json& j, NefEventNotification& o);

 protected:
  NefEvent m_Event;

  std::string m_TimeStamp;

  std::vector<ServiceExperienceInfo> m_SvcExprcInfos;
  bool m_SvcExprcInfosIsSet;
  std::vector<UeMobilityInfo> m_UeMobilityInfos;
  bool m_UeMobilityInfosIsSet;
  std::vector<UeCommunicationInfo> m_UeCommInfos;
  bool m_UeCommInfosIsSet;
  std::vector<ExceptionInfo> m_ExcepInfos;
  bool m_ExcepInfosIsSet;
};

}  // namespace oai::nef::model

#endif /* NefEventNotification_H_ */
