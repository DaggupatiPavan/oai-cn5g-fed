/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeCommunicationInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

UeCommunicationInfo::UeCommunicationInfo() {
  m_Supi              = "";
  m_SupiIsSet         = false;
  m_InterGroupId      = "";
  m_InterGroupIdIsSet = false;
  m_AppId             = "";
  m_AppIdIsSet        = false;
}

void UeCommunicationInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool UeCommunicationInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool UeCommunicationInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "UeCommunicationInfo" : pathPrefix;

  if (supiIsSet()) {
    const std::string& value           = m_Supi;
    const std::string currentValuePath = _pathPrefix + ".supi";
  }

  if (interGroupIdIsSet()) {
    const std::string& value           = m_InterGroupId;
    const std::string currentValuePath = _pathPrefix + ".interGroupId";
  }

  /* Comms */ {
    const std::vector<CommunicationCollection>& value = m_Comms;
    const std::string currentValuePath                = _pathPrefix + ".comms";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const CommunicationCollection& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".comms") && success;

        i++;
      }
    }
  }

  return success;
}

bool UeCommunicationInfo::operator==(const UeCommunicationInfo& rhs) const {
  return

      ((!supiIsSet() && !rhs.supiIsSet()) ||
       (supiIsSet() && rhs.supiIsSet() && getSupi() == rhs.getSupi())) &&

      ((!interGroupIdIsSet() && !rhs.interGroupIdIsSet()) ||
       (interGroupIdIsSet() && rhs.interGroupIdIsSet() &&
        getInterGroupId() == rhs.getInterGroupId())) &&

      ((!appIdIsSet() && !rhs.appIdIsSet()) ||
       (appIdIsSet() && rhs.appIdIsSet() && getAppId() == rhs.getAppId())) &&

      (getComms() == rhs.getComms())

          ;
}

bool UeCommunicationInfo::operator!=(const UeCommunicationInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UeCommunicationInfo& o) {
  j = nlohmann::json();
  if (o.supiIsSet()) j["supi"] = o.m_Supi;
  if (o.interGroupIdIsSet()) j["interGroupId"] = o.m_InterGroupId;
  if (o.appIdIsSet()) j["appId"] = o.m_AppId;
  j["comms"] = o.m_Comms;
}

void from_json(const nlohmann::json& j, UeCommunicationInfo& o) {
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("interGroupId") != j.end()) {
    j.at("interGroupId").get_to(o.m_InterGroupId);
    o.m_InterGroupIdIsSet = true;
  }
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  j.at("comms").get_to(o.m_Comms);
}

std::string UeCommunicationInfo::getSupi() const {
  return m_Supi;
}
void UeCommunicationInfo::setSupi(std::string const& value) {
  m_Supi      = value;
  m_SupiIsSet = true;
}
bool UeCommunicationInfo::supiIsSet() const {
  return m_SupiIsSet;
}
void UeCommunicationInfo::unsetSupi() {
  m_SupiIsSet = false;
}
std::string UeCommunicationInfo::getInterGroupId() const {
  return m_InterGroupId;
}
void UeCommunicationInfo::setInterGroupId(std::string const& value) {
  m_InterGroupId      = value;
  m_InterGroupIdIsSet = true;
}
bool UeCommunicationInfo::interGroupIdIsSet() const {
  return m_InterGroupIdIsSet;
}
void UeCommunicationInfo::unsetInterGroupId() {
  m_InterGroupIdIsSet = false;
}
std::string UeCommunicationInfo::getAppId() const {
  return m_AppId;
}
void UeCommunicationInfo::setAppId(std::string const& value) {
  m_AppId      = value;
  m_AppIdIsSet = true;
}
bool UeCommunicationInfo::appIdIsSet() const {
  return m_AppIdIsSet;
}
void UeCommunicationInfo::unsetAppId() {
  m_AppIdIsSet = false;
}
std::vector<CommunicationCollection> UeCommunicationInfo::getComms() const {
  return m_Comms;
}
void UeCommunicationInfo::setComms(
    std::vector<CommunicationCollection> const& value) {
  m_Comms = value;
}

}  // namespace oai::nef::model
