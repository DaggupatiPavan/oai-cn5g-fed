/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CongestionType.h
 *
 * Possible values are - USER_PLANE: The congestion analytics type is User
 * Plane.  - CONTROL_PLANE: The congestion analytics type is Control Plane. -
 * USER_AND_CONTROL_PLANE: The congestion analytics type is User Plane and
 * Control Plane.
 */

#ifndef CongestionType_H_
#define CongestionType_H_

#include <nlohmann/json.hpp>

#include "CongestionType_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - USER_PLANE: The congestion analytics type is User
/// Plane.  - CONTROL_PLANE: The congestion analytics type is Control Plane. -
/// USER_AND_CONTROL_PLANE: The congestion analytics type is User Plane and
/// Control Plane.
/// </summary>
class CongestionType {
 public:
  CongestionType();
  virtual ~CongestionType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const CongestionType& rhs) const;
  bool operator!=(const CongestionType& rhs) const;

  /////////////////////////////////////////////
  /// CongestionType members

  CongestionType_anyOf getValue() const;
  void setValue(CongestionType_anyOf value);
  CongestionType_anyOf::eCongestionType_anyOf getEnumValue() const;
  void setEnumValue(CongestionType_anyOf::eCongestionType_anyOf value);
  friend void to_json(nlohmann::json& j, const CongestionType& o);
  friend void from_json(const nlohmann::json& j, CongestionType& o);
  friend void to_json(nlohmann::json& j, const CongestionType_anyOf& o);
  friend void from_json(const nlohmann::json& j, CongestionType_anyOf& o);

 protected:
  CongestionType_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* CongestionType_H_ */
