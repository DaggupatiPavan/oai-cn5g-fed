/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PdnConnectionInformation.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

PdnConnectionInformation::PdnConnectionInformation() {
  m_Apn               = "";
  m_ApnIsSet          = false;
  m_InterfaceIndIsSet = false;
  m_Ipv4Addr          = "";
  m_Ipv4AddrIsSet     = false;
  m_Ipv6AddrsIsSet    = false;
  m_MacAddrsIsSet     = false;
}

void PdnConnectionInformation::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool PdnConnectionInformation::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PdnConnectionInformation::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PdnConnectionInformation" : pathPrefix;

  if (ipv6AddrsIsSet()) {
    const std::vector<std::string>& value = m_Ipv6Addrs;
    const std::string currentValuePath    = _pathPrefix + ".ipv6Addrs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (macAddrsIsSet()) {
    const std::vector<std::string>& value = m_MacAddrs;
    const std::string currentValuePath    = _pathPrefix + ".macAddrs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool PdnConnectionInformation::operator==(
    const PdnConnectionInformation& rhs) const {
  return

      (getStatus() == rhs.getStatus()) &&

      ((!apnIsSet() && !rhs.apnIsSet()) ||
       (apnIsSet() && rhs.apnIsSet() && getApn() == rhs.getApn())) &&

      (getPdnType() == rhs.getPdnType()) &&

      ((!interfaceIndIsSet() && !rhs.interfaceIndIsSet()) ||
       (interfaceIndIsSet() && rhs.interfaceIndIsSet() &&
        getInterfaceInd() == rhs.getInterfaceInd())) &&

      ((!ipv4AddrIsSet() && !rhs.ipv4AddrIsSet()) ||
       (ipv4AddrIsSet() && rhs.ipv4AddrIsSet() &&
        getIpv4Addr() == rhs.getIpv4Addr())) &&

      ((!ipv6AddrsIsSet() && !rhs.ipv6AddrsIsSet()) ||
       (ipv6AddrsIsSet() && rhs.ipv6AddrsIsSet() &&
        getIpv6Addrs() == rhs.getIpv6Addrs())) &&

      ((!macAddrsIsSet() && !rhs.macAddrsIsSet()) ||
       (macAddrsIsSet() && rhs.macAddrsIsSet() &&
        getMacAddrs() == rhs.getMacAddrs()))

          ;
}

bool PdnConnectionInformation::operator!=(
    const PdnConnectionInformation& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PdnConnectionInformation& o) {
  j           = nlohmann::json();
  j["status"] = o.m_Status;
  if (o.apnIsSet()) j["apn"] = o.m_Apn;
  j["pdnType"] = o.m_PdnType;
  if (o.interfaceIndIsSet()) j["interfaceInd"] = o.m_InterfaceInd;
  if (o.ipv4AddrIsSet()) j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrsIsSet() || !o.m_Ipv6Addrs.empty())
    j["ipv6Addrs"] = o.m_Ipv6Addrs;
  if (o.macAddrsIsSet() || !o.m_MacAddrs.empty()) j["macAddrs"] = o.m_MacAddrs;
}

void from_json(const nlohmann::json& j, PdnConnectionInformation& o) {
  j.at("status").get_to(o.m_Status);
  if (j.find("apn") != j.end()) {
    j.at("apn").get_to(o.m_Apn);
    o.m_ApnIsSet = true;
  }
  j.at("pdnType").get_to(o.m_PdnType);
  if (j.find("interfaceInd") != j.end()) {
    j.at("interfaceInd").get_to(o.m_InterfaceInd);
    o.m_InterfaceIndIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addrs") != j.end()) {
    j.at("ipv6Addrs").get_to(o.m_Ipv6Addrs);
    o.m_Ipv6AddrsIsSet = true;
  }
  if (j.find("macAddrs") != j.end()) {
    j.at("macAddrs").get_to(o.m_MacAddrs);
    o.m_MacAddrsIsSet = true;
  }
}

PdnConnectionStatus PdnConnectionInformation::getStatus() const {
  return m_Status;
}
void PdnConnectionInformation::setStatus(PdnConnectionStatus const& value) {
  m_Status = value;
}
std::string PdnConnectionInformation::getApn() const {
  return m_Apn;
}
void PdnConnectionInformation::setApn(std::string const& value) {
  m_Apn      = value;
  m_ApnIsSet = true;
}
bool PdnConnectionInformation::apnIsSet() const {
  return m_ApnIsSet;
}
void PdnConnectionInformation::unsetApn() {
  m_ApnIsSet = false;
}
PdnType PdnConnectionInformation::getPdnType() const {
  return m_PdnType;
}
void PdnConnectionInformation::setPdnType(PdnType const& value) {
  m_PdnType = value;
}
InterfaceIndication PdnConnectionInformation::getInterfaceInd() const {
  return m_InterfaceInd;
}
void PdnConnectionInformation::setInterfaceInd(
    InterfaceIndication const& value) {
  m_InterfaceInd      = value;
  m_InterfaceIndIsSet = true;
}
bool PdnConnectionInformation::interfaceIndIsSet() const {
  return m_InterfaceIndIsSet;
}
void PdnConnectionInformation::unsetInterfaceInd() {
  m_InterfaceIndIsSet = false;
}
std::string PdnConnectionInformation::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void PdnConnectionInformation::setIpv4Addr(std::string const& value) {
  m_Ipv4Addr      = value;
  m_Ipv4AddrIsSet = true;
}
bool PdnConnectionInformation::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void PdnConnectionInformation::unsetIpv4Addr() {
  m_Ipv4AddrIsSet = false;
}
std::vector<std::string> PdnConnectionInformation::getIpv6Addrs() const {
  return m_Ipv6Addrs;
}
void PdnConnectionInformation::setIpv6Addrs(
    std::vector<std::string> const& value) {
  m_Ipv6Addrs      = value;
  m_Ipv6AddrsIsSet = true;
}
bool PdnConnectionInformation::ipv6AddrsIsSet() const {
  return m_Ipv6AddrsIsSet;
}
void PdnConnectionInformation::unsetIpv6Addrs() {
  m_Ipv6AddrsIsSet = false;
}
std::vector<std::string> PdnConnectionInformation::getMacAddrs() const {
  return m_MacAddrs;
}
void PdnConnectionInformation::setMacAddrs(
    std::vector<std::string> const& value) {
  m_MacAddrs      = value;
  m_MacAddrsIsSet = true;
}
bool PdnConnectionInformation::macAddrsIsSet() const {
  return m_MacAddrsIsSet;
}
void PdnConnectionInformation::unsetMacAddrs() {
  m_MacAddrsIsSet = false;
}

}  // namespace oai::nef::model
