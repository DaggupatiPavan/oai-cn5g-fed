/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PointUncertaintyEllipse_allOf.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

PointUncertaintyEllipse_allOf::PointUncertaintyEllipse_allOf() {
  m_Confidence = 0;
}

void PointUncertaintyEllipse_allOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool PointUncertaintyEllipse_allOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PointUncertaintyEllipse_allOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PointUncertaintyEllipse_allOf" : pathPrefix;

  /* Confidence */ {
    const int32_t& value               = m_Confidence;
    const std::string currentValuePath = _pathPrefix + ".confidence";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  return success;
}

bool PointUncertaintyEllipse_allOf::operator==(
    const PointUncertaintyEllipse_allOf& rhs) const {
  return

      (getPoint() == rhs.getPoint()) &&

      (getUncertaintyEllipse() == rhs.getUncertaintyEllipse()) &&

      (getConfidence() == rhs.getConfidence())

          ;
}

bool PointUncertaintyEllipse_allOf::operator!=(
    const PointUncertaintyEllipse_allOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PointUncertaintyEllipse_allOf& o) {
  j                       = nlohmann::json();
  j["point"]              = o.m_Point;
  j["uncertaintyEllipse"] = o.m_UncertaintyEllipse;
  j["confidence"]         = o.m_Confidence;
}

void from_json(const nlohmann::json& j, PointUncertaintyEllipse_allOf& o) {
  j.at("point").get_to(o.m_Point);
  j.at("uncertaintyEllipse").get_to(o.m_UncertaintyEllipse);
  j.at("confidence").get_to(o.m_Confidence);
}

GeographicalCoordinates PointUncertaintyEllipse_allOf::getPoint() const {
  return m_Point;
}
void PointUncertaintyEllipse_allOf::setPoint(
    GeographicalCoordinates const& value) {
  m_Point = value;
}
UncertaintyEllipse PointUncertaintyEllipse_allOf::getUncertaintyEllipse()
    const {
  return m_UncertaintyEllipse;
}
void PointUncertaintyEllipse_allOf::setUncertaintyEllipse(
    UncertaintyEllipse const& value) {
  m_UncertaintyEllipse = value;
}
int32_t PointUncertaintyEllipse_allOf::getConfidence() const {
  return m_Confidence;
}
void PointUncertaintyEllipse_allOf::setConfidence(int32_t const value) {
  m_Confidence = value;
}

}  // namespace oai::nef::model
