/**
 * 3gpp-iptvconfiguration
 * API for IPTV configuration. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessRightStatus.h
 *
 * Possible values are - FULLY_ALLOWED: The User is fully allowed to access to
 * the channel. - PREVIEW_ALLOWED: The User is preview allowed to access to the
 * channel. - NO_ALLOWED: The User is not allowed to access to the channel.
 */

#ifndef AccessRightStatus_H_
#define AccessRightStatus_H_

#include <nlohmann/json.hpp>

#include "AccessRightStatus_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - FULLY_ALLOWED: The User is fully allowed to access to
/// the channel. - PREVIEW_ALLOWED: The User is preview allowed to access to the
/// channel. - NO_ALLOWED: The User is not allowed to access to the channel.
/// </summary>
class AccessRightStatus {
 public:
  AccessRightStatus();
  virtual ~AccessRightStatus() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AccessRightStatus& rhs) const;
  bool operator!=(const AccessRightStatus& rhs) const;

  /////////////////////////////////////////////
  /// AccessRightStatus members

  AccessRightStatus_anyOf getValue() const;
  void setValue(AccessRightStatus_anyOf value);
  AccessRightStatus_anyOf::eAccessRightStatus_anyOf getEnumValue() const;
  void setEnumValue(AccessRightStatus_anyOf::eAccessRightStatus_anyOf value);
  friend void to_json(nlohmann::json& j, const AccessRightStatus& o);
  friend void from_json(const nlohmann::json& j, AccessRightStatus& o);
  friend void to_json(nlohmann::json& j, const AccessRightStatus_anyOf& o);
  friend void from_json(const nlohmann::json& j, AccessRightStatus_anyOf& o);

 protected:
  AccessRightStatus_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* AccessRightStatus_H_ */
