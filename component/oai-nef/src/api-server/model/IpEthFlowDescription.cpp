/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "IpEthFlowDescription.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

IpEthFlowDescription::IpEthFlowDescription() {
  m_IpTrafficFilter       = "";
  m_IpTrafficFilterIsSet  = false;
  m_EthTrafficFilterIsSet = false;
}

void IpEthFlowDescription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool IpEthFlowDescription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool IpEthFlowDescription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "IpEthFlowDescription" : pathPrefix;

  return success;
}

bool IpEthFlowDescription::operator==(const IpEthFlowDescription& rhs) const {
  return

      ((!ipTrafficFilterIsSet() && !rhs.ipTrafficFilterIsSet()) ||
       (ipTrafficFilterIsSet() && rhs.ipTrafficFilterIsSet() &&
        getIpTrafficFilter() == rhs.getIpTrafficFilter())) &&

      ((!ethTrafficFilterIsSet() && !rhs.ethTrafficFilterIsSet()) ||
       (ethTrafficFilterIsSet() && rhs.ethTrafficFilterIsSet() &&
        getEthTrafficFilter() == rhs.getEthTrafficFilter()))

          ;
}

bool IpEthFlowDescription::operator!=(const IpEthFlowDescription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const IpEthFlowDescription& o) {
  j = nlohmann::json();
  if (o.ipTrafficFilterIsSet()) j["ipTrafficFilter"] = o.m_IpTrafficFilter;
  if (o.ethTrafficFilterIsSet()) j["ethTrafficFilter"] = o.m_EthTrafficFilter;
}

void from_json(const nlohmann::json& j, IpEthFlowDescription& o) {
  if (j.find("ipTrafficFilter") != j.end()) {
    j.at("ipTrafficFilter").get_to(o.m_IpTrafficFilter);
    o.m_IpTrafficFilterIsSet = true;
  }
  if (j.find("ethTrafficFilter") != j.end()) {
    j.at("ethTrafficFilter").get_to(o.m_EthTrafficFilter);
    o.m_EthTrafficFilterIsSet = true;
  }
}

std::string IpEthFlowDescription::getIpTrafficFilter() const {
  return m_IpTrafficFilter;
}
void IpEthFlowDescription::setIpTrafficFilter(std::string const& value) {
  m_IpTrafficFilter      = value;
  m_IpTrafficFilterIsSet = true;
}
bool IpEthFlowDescription::ipTrafficFilterIsSet() const {
  return m_IpTrafficFilterIsSet;
}
void IpEthFlowDescription::unsetIpTrafficFilter() {
  m_IpTrafficFilterIsSet = false;
}
EthFlowDescription IpEthFlowDescription::getEthTrafficFilter() const {
  return m_EthTrafficFilter;
}
void IpEthFlowDescription::setEthTrafficFilter(
    EthFlowDescription const& value) {
  m_EthTrafficFilter      = value;
  m_EthTrafficFilterIsSet = true;
}
bool IpEthFlowDescription::ethTrafficFilterIsSet() const {
  return m_EthTrafficFilterIsSet;
}
void IpEthFlowDescription::unsetEthTrafficFilter() {
  m_EthTrafficFilterIsSet = false;
}

}  // namespace oai::nef::model
