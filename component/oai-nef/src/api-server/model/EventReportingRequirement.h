/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EventReportingRequirement.h
 *
 *
 */

#ifndef EventReportingRequirement_H_
#define EventReportingRequirement_H_

#include <nlohmann/json.hpp>
#include <string>

#include "Accuracy.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class EventReportingRequirement {
 public:
  EventReportingRequirement();
  virtual ~EventReportingRequirement() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const EventReportingRequirement& rhs) const;
  bool operator!=(const EventReportingRequirement& rhs) const;

  /////////////////////////////////////////////
  /// EventReportingRequirement members

  /// <summary>
  ///
  /// </summary>
  Accuracy getAccuracy() const;
  void setAccuracy(Accuracy const& value);
  bool accuracyIsSet() const;
  void unsetAccuracy();
  /// <summary>
  ///
  /// </summary>
  std::string getStartTs() const;
  void setStartTs(std::string const& value);
  bool startTsIsSet() const;
  void unsetStartTs();
  /// <summary>
  ///
  /// </summary>
  std::string getEndTs() const;
  void setEndTs(std::string const& value);
  bool endTsIsSet() const;
  void unsetEndTs();
  /// <summary>
  ///
  /// </summary>
  int32_t getSampRatio() const;
  void setSampRatio(int32_t const value);
  bool sampRatioIsSet() const;
  void unsetSampRatio();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxObjectNbr() const;
  void setMaxObjectNbr(int32_t const value);
  bool maxObjectNbrIsSet() const;
  void unsetMaxObjectNbr();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxSupiNbr() const;
  void setMaxSupiNbr(int32_t const value);
  bool maxSupiNbrIsSet() const;
  void unsetMaxSupiNbr();
  /// <summary>
  ///
  /// </summary>
  std::string getTimeAnaNeeded() const;
  void setTimeAnaNeeded(std::string const& value);
  bool timeAnaNeededIsSet() const;
  void unsetTimeAnaNeeded();

  friend void to_json(nlohmann::json& j, const EventReportingRequirement& o);
  friend void from_json(const nlohmann::json& j, EventReportingRequirement& o);

 protected:
  Accuracy m_Accuracy;
  bool m_AccuracyIsSet;
  std::string m_StartTs;
  bool m_StartTsIsSet;
  std::string m_EndTs;
  bool m_EndTsIsSet;
  int32_t m_SampRatio;
  bool m_SampRatioIsSet;
  int32_t m_MaxObjectNbr;
  bool m_MaxObjectNbrIsSet;
  int32_t m_MaxSupiNbr;
  bool m_MaxSupiNbrIsSet;
  std::string m_TimeAnaNeeded;
  bool m_TimeAnaNeededIsSet;
};

}  // namespace oai::nef::model

#endif /* EventReportingRequirement_H_ */
