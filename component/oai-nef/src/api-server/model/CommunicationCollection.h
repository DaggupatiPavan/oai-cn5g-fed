/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CommunicationCollection.h
 *
 *
 */

#ifndef CommunicationCollection_H_
#define CommunicationCollection_H_

#include <nlohmann/json.hpp>
#include <string>

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class CommunicationCollection {
 public:
  CommunicationCollection();
  virtual ~CommunicationCollection() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const CommunicationCollection& rhs) const;
  bool operator!=(const CommunicationCollection& rhs) const;

  /////////////////////////////////////////////
  /// CommunicationCollection members

  /// <summary>
  ///
  /// </summary>
  std::string getStartTime() const;
  void setStartTime(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getEndTime() const;
  void setEndTime(std::string const& value);
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getUlVol() const;
  void setUlVol(int64_t const value);
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getDlVol() const;
  void setDlVol(int64_t const value);

  friend void to_json(nlohmann::json& j, const CommunicationCollection& o);
  friend void from_json(const nlohmann::json& j, CommunicationCollection& o);

 protected:
  std::string m_StartTime;

  std::string m_EndTime;

  int64_t m_UlVol;

  int64_t m_DlVol;
};

}  // namespace oai::nef::model

#endif /* CommunicationCollection_H_ */
