/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CongestInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

CongestInfo::CongestInfo() {}

void CongestInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool CongestInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool CongestInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "CongestInfo" : pathPrefix;

  /* CngAnas */ {
    const std::vector<CongestionAnalytics>& value = m_CngAnas;
    const std::string currentValuePath            = _pathPrefix + ".cngAnas";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const CongestionAnalytics& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".cngAnas") && success;

        i++;
      }
    }
  }

  return success;
}

bool CongestInfo::operator==(const CongestInfo& rhs) const {
  return

      (getLocArea() == rhs.getLocArea()) &&

      (getCngAnas() == rhs.getCngAnas())

          ;
}

bool CongestInfo::operator!=(const CongestInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CongestInfo& o) {
  j            = nlohmann::json();
  j["locArea"] = o.m_LocArea;
  j["cngAnas"] = o.m_CngAnas;
}

void from_json(const nlohmann::json& j, CongestInfo& o) {
  j.at("locArea").get_to(o.m_LocArea);
  j.at("cngAnas").get_to(o.m_CngAnas);
}

LocationArea5G CongestInfo::getLocArea() const {
  return m_LocArea;
}
void CongestInfo::setLocArea(LocationArea5G const& value) {
  m_LocArea = value;
}
std::vector<CongestionAnalytics> CongestInfo::getCngAnas() const {
  return m_CngAnas;
}
void CongestInfo::setCngAnas(std::vector<CongestionAnalytics> const& value) {
  m_CngAnas = value;
}

}  // namespace oai::nef::model
