/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsExposureSubsc.h
 *
 *
 */

#ifndef AnalyticsExposureSubsc_H_
#define AnalyticsExposureSubsc_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "AnalyticsEventNotif.h"
#include "AnalyticsEventSubsc.h"
#include "AnalyticsFailureEventInfo.h"
#include "ReportingInformation.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class AnalyticsExposureSubsc {
 public:
  AnalyticsExposureSubsc();
  virtual ~AnalyticsExposureSubsc() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnalyticsExposureSubsc& rhs) const;
  bool operator!=(const AnalyticsExposureSubsc& rhs) const;

  /////////////////////////////////////////////
  /// AnalyticsExposureSubsc members

  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsEventSubsc> getAnalyEventsSubs() const;
  void setAnalyEventsSubs(std::vector<AnalyticsEventSubsc> const& value);
  /// <summary>
  ///
  /// </summary>
  ReportingInformation getAnalyRepInfo() const;
  void setAnalyRepInfo(ReportingInformation const& value);
  bool analyRepInfoIsSet() const;
  void unsetAnalyRepInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifUri() const;
  void setNotifUri(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getNotifId() const;
  void setNotifId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsEventNotif> getEventNotifis() const;
  void setEventNotifis(std::vector<AnalyticsEventNotif> const& value);
  bool eventNotifisIsSet() const;
  void unsetEventNotifis();
  /// <summary>
  ///
  /// </summary>
  std::vector<AnalyticsFailureEventInfo> getFailEventReports() const;
  void setFailEventReports(std::vector<AnalyticsFailureEventInfo> const& value);
  bool failEventReportsIsSet() const;
  void unsetFailEventReports();
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const& value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const& value);
  bool selfIsSet() const;
  void unsetSelf();

  friend void to_json(nlohmann::json& j, const AnalyticsExposureSubsc& o);
  friend void from_json(const nlohmann::json& j, AnalyticsExposureSubsc& o);

 protected:
  std::vector<AnalyticsEventSubsc> m_AnalyEventsSubs;

  ReportingInformation m_AnalyRepInfo;
  bool m_AnalyRepInfoIsSet;
  std::string m_NotifUri;

  std::string m_NotifId;

  std::vector<AnalyticsEventNotif> m_EventNotifis;
  bool m_EventNotifisIsSet;
  std::vector<AnalyticsFailureEventInfo> m_FailEventReports;
  bool m_FailEventReportsIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_Self;
  bool m_SelfIsSet;
};

}  // namespace oai::nef::model

#endif /* AnalyticsExposureSubsc_H_ */
