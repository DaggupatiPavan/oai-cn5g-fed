/**
 * 3gpp-iptvconfiguration
 * API for IPTV configuration. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MulticastAccessControl.h
 *
 *
 */

#ifndef MulticastAccessControl_H_
#define MulticastAccessControl_H_

#include <nlohmann/json.hpp>
#include <string>

#include "AccessRightStatus.h"
#include "Ipv6Addr.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class MulticastAccessControl {
 public:
  MulticastAccessControl();
  virtual ~MulticastAccessControl() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MulticastAccessControl& rhs) const;
  bool operator!=(const MulticastAccessControl& rhs) const;

  /////////////////////////////////////////////
  /// MulticastAccessControl members

  /// <summary>
  ///
  /// </summary>
  std::string getSrcIpv4Addr() const;
  void setSrcIpv4Addr(std::string const& value);
  bool srcIpv4AddrIsSet() const;
  void unsetSrcIpv4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getSrcIpv6Addr() const;
  void setSrcIpv6Addr(Ipv6Addr const& value);
  bool srcIpv6AddrIsSet() const;
  void unsetSrcIpv6Addr();
  /// <summary>
  ///
  /// </summary>
  std::string getMulticastV4Addr() const;
  void setMulticastV4Addr(std::string const& value);
  bool multicastV4AddrIsSet() const;
  void unsetMulticastV4Addr();
  /// <summary>
  ///
  /// </summary>
  Ipv6Addr getMulticastV6Addr() const;
  void setMulticastV6Addr(Ipv6Addr const& value);
  bool multicastV6AddrIsSet() const;
  void unsetMulticastV6Addr();
  /// <summary>
  ///
  /// </summary>
  AccessRightStatus getAccStatus() const;
  void setAccStatus(AccessRightStatus const& value);

  friend void to_json(nlohmann::json& j, const MulticastAccessControl& o);
  friend void from_json(const nlohmann::json& j, MulticastAccessControl& o);

 protected:
  std::string m_SrcIpv4Addr;
  bool m_SrcIpv4AddrIsSet;
  Ipv6Addr m_SrcIpv6Addr;
  bool m_SrcIpv6AddrIsSet;
  std::string m_MulticastV4Addr;
  bool m_MulticastV4AddrIsSet;
  Ipv6Addr m_MulticastV6Addr;
  bool m_MulticastV6AddrIsSet;
  AccessRightStatus m_AccStatus;
};

}  // namespace oai::nef::model

#endif /* MulticastAccessControl_H_ */
