/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SupportedGADShapes_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "Helpers.h"

namespace oai::nef::model {

SupportedGADShapes_anyOf::SupportedGADShapes_anyOf() {}

void SupportedGADShapes_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool SupportedGADShapes_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SupportedGADShapes_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SupportedGADShapes_anyOf" : pathPrefix;

  if (m_value == SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool SupportedGADShapes_anyOf::operator==(
    const SupportedGADShapes_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool SupportedGADShapes_anyOf::operator!=(
    const SupportedGADShapes_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SupportedGADShapes_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POINT:
      j = "POINT";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
        POINT_UNCERTAINTY_CIRCLE:
      j = "POINT_UNCERTAINTY_CIRCLE";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
        POINT_UNCERTAINTY_ELLIPSE:
      j = "POINT_UNCERTAINTY_ELLIPSE";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POLYGON:
      j = "POLYGON";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POINT_ALTITUDE:
      j = "POINT_ALTITUDE";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
        POINT_ALTITUDE_UNCERTAINTY:
      j = "POINT_ALTITUDE_UNCERTAINTY";
      break;
    case SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::ELLIPSOID_ARC:
      j = "ELLIPSOID_ARC";
      break;
  }
}

void from_json(const nlohmann::json& j, SupportedGADShapes_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "POINT") {
    o.setValue(SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POINT);
  } else if (s == "POINT_UNCERTAINTY_CIRCLE") {
    o.setValue(SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
                   POINT_UNCERTAINTY_CIRCLE);
  } else if (s == "POINT_UNCERTAINTY_ELLIPSE") {
    o.setValue(SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
                   POINT_UNCERTAINTY_ELLIPSE);
  } else if (s == "POLYGON") {
    o.setValue(SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POLYGON);
  } else if (s == "POINT_ALTITUDE") {
    o.setValue(
        SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::POINT_ALTITUDE);
  } else if (s == "POINT_ALTITUDE_UNCERTAINTY") {
    o.setValue(SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::
                   POINT_ALTITUDE_UNCERTAINTY);
  } else if (s == "ELLIPSOID_ARC") {
    o.setValue(
        SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf::ELLIPSOID_ARC);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf
SupportedGADShapes_anyOf::getValue() const {
  return m_value;
}
void SupportedGADShapes_anyOf::setValue(
    SupportedGADShapes_anyOf::eSupportedGADShapes_anyOf value) {
  m_value = value;
}

}  // namespace oai::nef::model
