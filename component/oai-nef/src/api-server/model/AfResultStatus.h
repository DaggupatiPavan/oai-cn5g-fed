/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AfResultStatus.h
 *
 * Possible values are - SUCCESS: The application layer is ready or the
 * relocation is completed. - TEMPORARY_CONGESTION: The application relocation
 * fails due to temporary congestion. - RELOC_NO_ALLOWED: The application
 * relocation fails because application relocation is not allowed. - OTHER: The
 * application relocation fails due to other reason.
 */

#ifndef AfResultStatus_H_
#define AfResultStatus_H_

#include <nlohmann/json.hpp>

#include "AfResultStatus_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - SUCCESS: The application layer is ready or the
/// relocation is completed. - TEMPORARY_CONGESTION: The application relocation
/// fails due to temporary congestion. - RELOC_NO_ALLOWED: The application
/// relocation fails because application relocation is not allowed. - OTHER: The
/// application relocation fails due to other reason.
/// </summary>
class AfResultStatus {
 public:
  AfResultStatus();
  virtual ~AfResultStatus() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AfResultStatus& rhs) const;
  bool operator!=(const AfResultStatus& rhs) const;

  /////////////////////////////////////////////
  /// AfResultStatus members

  AfResultStatus_anyOf getValue() const;
  void setValue(AfResultStatus_anyOf value);
  AfResultStatus_anyOf::eAfResultStatus_anyOf getEnumValue() const;
  void setEnumValue(AfResultStatus_anyOf::eAfResultStatus_anyOf value);
  friend void to_json(nlohmann::json& j, const AfResultStatus& o);
  friend void from_json(const nlohmann::json& j, AfResultStatus& o);
  friend void to_json(nlohmann::json& j, const AfResultStatus_anyOf& o);
  friend void from_json(const nlohmann::json& j, AfResultStatus_anyOf& o);

 protected:
  AfResultStatus_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* AfResultStatus_H_ */
