/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringEventSubscription.h
 *
 * Represents a subscription to event(s) monitoring.
 */

#ifndef MonitoringEventSubscription_H_
#define MonitoringEventSubscription_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "Accuracy.h"
#include "AssociationType.h"
#include "DddTrafficDescriptor.h"
#include "DlDataDeliveryStatus.h"
#include "LdrType.h"
#include "LocationArea.h"
#include "LocationArea5G.h"
#include "LocationQoS.h"
#include "LocationType.h"
#include "MonitoringEventReport.h"
#include "MonitoringType.h"
#include "ReachabilityType.h"
#include "SACInfo.h"
#include "Snssai.h"
#include "SubType.h"
#include "SupportedGADShapes.h"
#include "TimeWindow.h"
#include "UavPolicy.h"
#include "VelocityRequested.h"
#include "WebsockNotifConfig.h"

namespace oai::nef::model {

/// <summary>
/// Represents a subscription to event(s) monitoring.
/// </summary>
class MonitoringEventSubscription {
 public:
  MonitoringEventSubscription();
  virtual ~MonitoringEventSubscription() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const MonitoringEventSubscription& rhs) const;
  bool operator!=(const MonitoringEventSubscription& rhs) const;

  /////////////////////////////////////////////
  /// MonitoringEventSubscription members

  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getSelf() const;
  void setSelf(std::string const& value);
  bool selfIsSet() const;
  void unsetSelf();
  /// <summary>
  /// A string used to indicate the features supported by an API that is used as
  /// defined in clause 6.6 in 3GPP TS 29.500. The string shall contain a
  /// bitmask indicating supported features in hexadecimal representation Each
  /// character in the string shall take a value of \&quot;0\&quot; to
  /// \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to
  /// \&quot;F\&quot; and shall represent the support of 4 features as described
  /// in table 5.2.2-3. The most significant character representing the
  /// highest-numbered features shall appear first in the string, and the
  /// character representing features 1 to 4 shall appear last in the string.
  /// The list of features and their numbering (starting with 1) are defined
  /// separately for each API. If the string contains a lower number of
  /// characters than there are defined features for an API, all features that
  /// would be represented by characters that are not present in the string are
  /// not supported
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  /// Identifies the MTC Service Provider and/or MTC Application.
  /// </summary>
  std::string getMtcProviderId() const;
  void setMtcProviderId(std::string const& value);
  bool mtcProviderIdIsSet() const;
  void unsetMtcProviderId();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clause 4.6.2 of 3GPP TS 23.682 for more information.
  /// </summary>
  std::string getExternalId() const;
  void setExternalId(std::string const& value);
  bool externalIdIsSet() const;
  void unsetExternalId();
  /// <summary>
  /// string formatted according to subclause 3.3 of 3GPP TS 23.003 that
  /// describes an MSISDN.
  /// </summary>
  std::string getMsisdn() const;
  void setMsisdn(std::string const& value);
  bool msisdnIsSet() const;
  void unsetMsisdn();
  /// <summary>
  /// Indicates cancellation of the external Identifier(s) within the active
  /// group.
  /// </summary>
  std::vector<std::string> getExcludedExternalIds() const;
  void setExcludedExternalIds(std::vector<std::string> const& value);
  bool excludedExternalIdsIsSet() const;
  void unsetExcludedExternalIds();
  /// <summary>
  /// Indicates cancellation of the MSISDN(s) within the active group.
  /// </summary>
  std::vector<std::string> getExcludedMsisdns() const;
  void setExcludedMsisdns(std::vector<std::string> const& value);
  bool excludedMsisdnsIsSet() const;
  void unsetExcludedMsisdns();
  /// <summary>
  /// string containing a local identifier followed by \&quot;@\&quot; and a
  /// domain identifier. Both the local identifier and the domain identifier
  /// shall be encoded as strings that do not contain any \&quot;@\&quot;
  /// characters. See Clauses 4.6.2 and 4.6.3 of 3GPP TS 23.682 for more
  /// information.
  /// </summary>
  std::string getExternalGroupId() const;
  void setExternalGroupId(std::string const& value);
  bool externalGroupIdIsSet() const;
  void unsetExternalGroupId();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getAddExtGroupId() const;
  void setAddExtGroupId(std::vector<std::string> const& value);
  bool addExtGroupIdIsSet() const;
  void unsetAddExtGroupId();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getIpv4Addr() const;
  void setIpv4Addr(std::string const& value);
  bool ipv4AddrIsSet() const;
  void unsetIpv4Addr();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in IETF
  /// RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of IETF RFC
  /// 5952 shall not be used.
  /// </summary>
  std::string getIpv6Addr() const;
  void setIpv6Addr(std::string const& value);
  bool ipv6AddrIsSet() const;
  void unsetIpv6Addr();
  /// <summary>
  /// String representing a Data Network as defined in clause 9A of 3GPP
  /// TS 23.003; it shall contain either a DNN Network Identifier, or a full DNN
  /// with both the Network Identifier and Operator Identifier, as specified in
  /// 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in
  /// which the labels are separated by dots (e.g.
  /// \&quot;Label1.Label2.Label3\&quot;).
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const& value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  /// string formatted according to IETF RFC 3986 identifying a referenced
  /// resource.
  /// </summary>
  std::string getNotificationDestination() const;
  void setNotificationDestination(std::string const& value);
  /// <summary>
  /// Set to true by the SCS/AS to request the SCEF to send a test notification
  /// as defined in subclause 5.2.5.3. Set to false or omitted otherwise.
  /// </summary>
  bool isRequestTestNotification() const;
  void setRequestTestNotification(bool const value);
  bool requestTestNotificationIsSet() const;
  void unsetRequestTestNotification();
  /// <summary>
  ///
  /// </summary>
  WebsockNotifConfig getWebsockNotifConfig() const;
  void setWebsockNotifConfig(WebsockNotifConfig const& value);
  bool websockNotifConfigIsSet() const;
  void unsetWebsockNotifConfig();
  /// <summary>
  ///
  /// </summary>
  MonitoringType getMonitoringType() const;
  void setMonitoringType(MonitoringType const& value);
  /// <summary>
  /// Identifies the maximum number of event reports to be generated by the HSS,
  /// MME/SGSN as specified in subclause 5.6.0 of 3GPP TS 23.682.
  /// </summary>
  int32_t getMaximumNumberOfReports() const;
  void setMaximumNumberOfReports(int32_t const value);
  bool maximumNumberOfReportsIsSet() const;
  void unsetMaximumNumberOfReports();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getMonitorExpireTime() const;
  void setMonitorExpireTime(std::string const& value);
  bool monitorExpireTimeIsSet() const;
  void unsetMonitorExpireTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getRepPeriod() const;
  void setRepPeriod(int32_t const value);
  bool repPeriodIsSet() const;
  void unsetRepPeriod();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getGroupReportGuardTime() const;
  void setGroupReportGuardTime(int32_t const value);
  bool groupReportGuardTimeIsSet() const;
  void unsetGroupReportGuardTime();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumDetectionTime() const;
  void setMaximumDetectionTime(int32_t const value);
  bool maximumDetectionTimeIsSet() const;
  void unsetMaximumDetectionTime();
  /// <summary>
  ///
  /// </summary>
  ReachabilityType getReachabilityType() const;
  void setReachabilityType(ReachabilityType const& value);
  bool reachabilityTypeIsSet() const;
  void unsetReachabilityType();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumLatency() const;
  void setMaximumLatency(int32_t const value);
  bool maximumLatencyIsSet() const;
  void unsetMaximumLatency();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaximumResponseTime() const;
  void setMaximumResponseTime(int32_t const value);
  bool maximumResponseTimeIsSet() const;
  void unsetMaximumResponseTime();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;UE_REACHABILITY\&quot;, this
  /// parameter may be included to identify the number of packets that the
  /// serving gateway shall buffer in case that the UE is not reachable.
  /// </summary>
  int32_t getSuggestedNumberOfDlPackets() const;
  void setSuggestedNumberOfDlPackets(int32_t const value);
  bool suggestedNumberOfDlPacketsIsSet() const;
  void unsetSuggestedNumberOfDlPackets();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is set to \&quot;UE_REACHABILITY\&quot; or
  /// \&quot;AVAILABILITY_AFTER_DDN_FAILURE\&quot;, this parameter may be
  /// included to indicate the notification of when a UE, for which PSM is
  /// enabled, transitions into idle mode. \&quot;true\&quot;  indicates
  /// enabling of notification; \&quot;false\&quot;  indicate no need to notify.
  /// Default value is \&quot;false\&quot;.
  /// </summary>
  bool isIdleStatusIndication() const;
  void setIdleStatusIndication(bool const value);
  bool idleStatusIndicationIsSet() const;
  void unsetIdleStatusIndication();
  /// <summary>
  ///
  /// </summary>
  LocationType getLocationType() const;
  void setLocationType(LocationType const& value);
  bool locationTypeIsSet() const;
  void unsetLocationType();
  /// <summary>
  ///
  /// </summary>
  Accuracy getAccuracy() const;
  void setAccuracy(Accuracy const& value);
  bool accuracyIsSet() const;
  void unsetAccuracy();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMinimumReportInterval() const;
  void setMinimumReportInterval(int32_t const value);
  bool minimumReportIntervalIsSet() const;
  void unsetMinimumReportInterval();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getMaxRptExpireIntvl() const;
  void setMaxRptExpireIntvl(int32_t const value);
  bool maxRptExpireIntvlIsSet() const;
  void unsetMaxRptExpireIntvl();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getSamplingInterval() const;
  void setSamplingInterval(int32_t const value);
  bool samplingIntervalIsSet() const;
  void unsetSamplingInterval();
  /// <summary>
  /// Indicates whether to request the location estimate for event reporting.
  /// </summary>
  bool isReportingLocEstInd() const;
  void setReportingLocEstInd(bool const value);
  bool reportingLocEstIndIsSet() const;
  void unsetReportingLocEstInd();
  /// <summary>
  ///
  /// </summary>
  int32_t getLinearDistance() const;
  void setLinearDistance(int32_t const value);
  bool linearDistanceIsSet() const;
  void unsetLinearDistance();
  /// <summary>
  ///
  /// </summary>
  LocationQoS getLocQoS() const;
  void setLocQoS(LocationQoS const& value);
  bool locQoSIsSet() const;
  void unsetLocQoS();
  /// <summary>
  ///
  /// </summary>
  std::string getSvcId() const;
  void setSvcId(std::string const& value);
  bool svcIdIsSet() const;
  void unsetSvcId();
  /// <summary>
  ///
  /// </summary>
  LdrType getLdrType() const;
  void setLdrType(LdrType const& value);
  bool ldrTypeIsSet() const;
  void unsetLdrType();
  /// <summary>
  ///
  /// </summary>
  VelocityRequested getVelocityRequested() const;
  void setVelocityRequested(VelocityRequested const& value);
  bool velocityRequestedIsSet() const;
  void unsetVelocityRequested();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaxAgeOfLocEst() const;
  void setMaxAgeOfLocEst(int32_t const value);
  bool maxAgeOfLocEstIsSet() const;
  void unsetMaxAgeOfLocEst();
  /// <summary>
  ///
  /// </summary>
  TimeWindow getLocTimeWindow() const;
  void setLocTimeWindow(TimeWindow const& value);
  bool locTimeWindowIsSet() const;
  void unsetLocTimeWindow();
  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedGADShapes> getSupportedGADShapes() const;
  void setSupportedGADShapes(std::vector<SupportedGADShapes> const& value);
  bool supportedGADShapesIsSet() const;
  void unsetSupportedGADShapes();
  /// <summary>
  ///
  /// </summary>
  std::string getCodeWord() const;
  void setCodeWord(std::string const& value);
  bool codeWordIsSet() const;
  void unsetCodeWord();
  /// <summary>
  ///
  /// </summary>
  AssociationType getAssociationType() const;
  void setAssociationType(AssociationType const& value);
  bool associationTypeIsSet() const;
  void unsetAssociationType();
  /// <summary>
  /// If \&quot;monitoringType\&quot; is \&quot;ROAMING_STATUS\&quot;, this
  /// parameter may be included to indicate the notification of UE&#39;s Serving
  /// PLMN ID. Value \&quot;true\&quot; indicates enabling of notification;
  /// \&quot;false\&quot; indicates disabling of notification. Default value is
  /// \&quot;false\&quot;.
  /// </summary>
  bool isPlmnIndication() const;
  void setPlmnIndication(bool const value);
  bool plmnIndicationIsSet() const;
  void unsetPlmnIndication();
  /// <summary>
  ///
  /// </summary>
  LocationArea getLocationArea() const;
  void setLocationArea(LocationArea const& value);
  bool locationAreaIsSet() const;
  void unsetLocationArea();
  /// <summary>
  ///
  /// </summary>
  LocationArea5G getLocationArea5G() const;
  void setLocationArea5G(LocationArea5G const& value);
  bool locationArea5GIsSet() const;
  void unsetLocationArea5G();
  /// <summary>
  ///
  /// </summary>
  std::vector<DddTrafficDescriptor> getDddTraDescriptors() const;
  void setDddTraDescriptors(std::vector<DddTrafficDescriptor> const& value);
  bool dddTraDescriptorsIsSet() const;
  void unsetDddTraDescriptors();
  /// <summary>
  ///
  /// </summary>
  std::vector<DlDataDeliveryStatus> getDddStati() const;
  void setDddStati(std::vector<DlDataDeliveryStatus> const& value);
  bool dddStatiIsSet() const;
  void unsetDddStati();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getApiNames() const;
  void setApiNames(std::vector<std::string> const& value);
  bool apiNamesIsSet() const;
  void unsetApiNames();
  /// <summary>
  ///
  /// </summary>
  MonitoringEventReport getMonitoringEventReport() const;
  void setMonitoringEventReport(MonitoringEventReport const& value);
  bool monitoringEventReportIsSet() const;
  void unsetMonitoringEventReport();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const& value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  ///
  /// </summary>
  SACInfo getTgtNsThreshold() const;
  void setTgtNsThreshold(SACInfo const& value);
  bool tgtNsThresholdIsSet() const;
  void unsetTgtNsThreshold();
  /// <summary>
  ///
  /// </summary>
  bool isImmediateRep() const;
  void setImmediateRep(bool const value);
  bool immediateRepIsSet() const;
  void unsetImmediateRep();
  /// <summary>
  ///
  /// </summary>
  UavPolicy getUavPolicy() const;
  void setUavPolicy(UavPolicy const& value);
  bool uavPolicyIsSet() const;
  void unsetUavPolicy();
  /// <summary>
  /// Set to true by the SCS/AS so that only UAVâs with âPDU session established
  /// for DNN(s) subject to aerial serviceâ are to be listed in the Event
  /// report. Set to false or omitted otherwise.
  /// </summary>
  bool isSesEstInd() const;
  void setSesEstInd(bool const value);
  bool sesEstIndIsSet() const;
  void unsetSesEstInd();
  /// <summary>
  ///
  /// </summary>
  SubType getSubType() const;
  void setSubType(SubType const& value);
  bool subTypeIsSet() const;
  void unsetSubType();
  /// <summary>
  ///
  /// </summary>
  std::vector<MonitoringType> getAddnMonTypes() const;
  void setAddnMonTypes(std::vector<MonitoringType> const& value);
  bool addnMonTypesIsSet() const;
  void unsetAddnMonTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<MonitoringEventReport> getAddnMonEventReports() const;
  void setAddnMonEventReports(std::vector<MonitoringEventReport> const& value);
  bool addnMonEventReportsIsSet() const;
  void unsetAddnMonEventReports();

  friend void to_json(nlohmann::json& j, const MonitoringEventSubscription& o);
  friend void from_json(
      const nlohmann::json& j, MonitoringEventSubscription& o);

 protected:
  std::string m_Self;
  bool m_SelfIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_MtcProviderId;
  bool m_MtcProviderIdIsSet;
  std::string m_ExternalId;
  bool m_ExternalIdIsSet;
  std::string m_Msisdn;
  bool m_MsisdnIsSet;
  std::vector<std::string> m_ExcludedExternalIds;
  bool m_ExcludedExternalIdsIsSet;
  std::vector<std::string> m_ExcludedMsisdns;
  bool m_ExcludedMsisdnsIsSet;
  std::string m_ExternalGroupId;
  bool m_ExternalGroupIdIsSet;
  std::vector<std::string> m_AddExtGroupId;
  bool m_AddExtGroupIdIsSet;
  std::string m_Ipv4Addr;
  bool m_Ipv4AddrIsSet;
  std::string m_Ipv6Addr;
  bool m_Ipv6AddrIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::string m_NotificationDestination;

  bool m_RequestTestNotification;
  bool m_RequestTestNotificationIsSet;
  WebsockNotifConfig m_WebsockNotifConfig;
  bool m_WebsockNotifConfigIsSet;
  MonitoringType m_MonitoringType;

  int32_t m_MaximumNumberOfReports;
  bool m_MaximumNumberOfReportsIsSet;
  std::string m_MonitorExpireTime;
  bool m_MonitorExpireTimeIsSet;
  int32_t m_RepPeriod;
  bool m_RepPeriodIsSet;
  int32_t m_GroupReportGuardTime;
  bool m_GroupReportGuardTimeIsSet;
  int32_t m_MaximumDetectionTime;
  bool m_MaximumDetectionTimeIsSet;
  ReachabilityType m_ReachabilityType;
  bool m_ReachabilityTypeIsSet;
  int32_t m_MaximumLatency;
  bool m_MaximumLatencyIsSet;
  int32_t m_MaximumResponseTime;
  bool m_MaximumResponseTimeIsSet;
  int32_t m_SuggestedNumberOfDlPackets;
  bool m_SuggestedNumberOfDlPacketsIsSet;
  bool m_IdleStatusIndication;
  bool m_IdleStatusIndicationIsSet;
  LocationType m_LocationType;
  bool m_LocationTypeIsSet;
  Accuracy m_Accuracy;
  bool m_AccuracyIsSet;
  int32_t m_MinimumReportInterval;
  bool m_MinimumReportIntervalIsSet;
  int32_t m_MaxRptExpireIntvl;
  bool m_MaxRptExpireIntvlIsSet;
  int32_t m_SamplingInterval;
  bool m_SamplingIntervalIsSet;
  bool m_ReportingLocEstInd;
  bool m_ReportingLocEstIndIsSet;
  int32_t m_LinearDistance;
  bool m_LinearDistanceIsSet;
  LocationQoS m_LocQoS;
  bool m_LocQoSIsSet;
  std::string m_SvcId;
  bool m_SvcIdIsSet;
  LdrType m_LdrType;
  bool m_LdrTypeIsSet;
  VelocityRequested m_VelocityRequested;
  bool m_VelocityRequestedIsSet;
  int32_t m_MaxAgeOfLocEst;
  bool m_MaxAgeOfLocEstIsSet;
  TimeWindow m_LocTimeWindow;
  bool m_LocTimeWindowIsSet;
  std::vector<SupportedGADShapes> m_SupportedGADShapes;
  bool m_SupportedGADShapesIsSet;
  std::string m_CodeWord;
  bool m_CodeWordIsSet;
  AssociationType m_AssociationType;
  bool m_AssociationTypeIsSet;
  bool m_PlmnIndication;
  bool m_PlmnIndicationIsSet;
  LocationArea m_LocationArea;
  bool m_LocationAreaIsSet;
  LocationArea5G m_LocationArea5G;
  bool m_LocationArea5GIsSet;
  std::vector<DddTrafficDescriptor> m_DddTraDescriptors;
  bool m_DddTraDescriptorsIsSet;
  std::vector<DlDataDeliveryStatus> m_DddStati;
  bool m_DddStatiIsSet;
  std::vector<std::string> m_ApiNames;
  bool m_ApiNamesIsSet;
  MonitoringEventReport m_MonitoringEventReport;
  bool m_MonitoringEventReportIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  SACInfo m_TgtNsThreshold;
  bool m_TgtNsThresholdIsSet;
  bool m_ImmediateRep;
  bool m_ImmediateRepIsSet;
  UavPolicy m_UavPolicy;
  bool m_UavPolicyIsSet;
  bool m_SesEstInd;
  bool m_SesEstIndIsSet;
  SubType m_SubType;
  bool m_SubTypeIsSet;
  std::vector<MonitoringType> m_AddnMonTypes;
  bool m_AddnMonTypesIsSet;
  std::vector<MonitoringEventReport> m_AddnMonEventReports;
  bool m_AddnMonEventReportsIsSet;
};

}  // namespace oai::nef::model

#endif /* MonitoringEventSubscription_H_ */
