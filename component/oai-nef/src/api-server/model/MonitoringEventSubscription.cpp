/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitoringEventSubscription.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

MonitoringEventSubscription::MonitoringEventSubscription() {
  m_Self                            = "";
  m_SelfIsSet                       = false;
  m_SupportedFeatures               = "";
  m_SupportedFeaturesIsSet          = false;
  m_MtcProviderId                   = "";
  m_MtcProviderIdIsSet              = false;
  m_ExternalId                      = "";
  m_ExternalIdIsSet                 = false;
  m_Msisdn                          = "";
  m_MsisdnIsSet                     = false;
  m_ExcludedExternalIdsIsSet        = false;
  m_ExcludedMsisdnsIsSet            = false;
  m_ExternalGroupId                 = "";
  m_ExternalGroupIdIsSet            = false;
  m_AddExtGroupIdIsSet              = false;
  m_Ipv4Addr                        = "";
  m_Ipv4AddrIsSet                   = false;
  m_Ipv6Addr                        = "";
  m_Ipv6AddrIsSet                   = false;
  m_Dnn                             = "";
  m_DnnIsSet                        = false;
  m_NotificationDestination         = "";
  m_RequestTestNotification         = false;
  m_RequestTestNotificationIsSet    = false;
  m_WebsockNotifConfigIsSet         = false;
  m_MaximumNumberOfReports          = 0;
  m_MaximumNumberOfReportsIsSet     = false;
  m_MonitorExpireTime               = "";
  m_MonitorExpireTimeIsSet          = false;
  m_RepPeriod                       = 0;
  m_RepPeriodIsSet                  = false;
  m_GroupReportGuardTime            = 0;
  m_GroupReportGuardTimeIsSet       = false;
  m_MaximumDetectionTime            = 0;
  m_MaximumDetectionTimeIsSet       = false;
  m_ReachabilityTypeIsSet           = false;
  m_MaximumLatency                  = 0;
  m_MaximumLatencyIsSet             = false;
  m_MaximumResponseTime             = 0;
  m_MaximumResponseTimeIsSet        = false;
  m_SuggestedNumberOfDlPackets      = 0;
  m_SuggestedNumberOfDlPacketsIsSet = false;
  m_IdleStatusIndication            = false;
  m_IdleStatusIndicationIsSet       = false;
  m_LocationTypeIsSet               = false;
  m_AccuracyIsSet                   = false;
  m_MinimumReportInterval           = 0;
  m_MinimumReportIntervalIsSet      = false;
  m_MaxRptExpireIntvl               = 0;
  m_MaxRptExpireIntvlIsSet          = false;
  m_SamplingInterval                = 0;
  m_SamplingIntervalIsSet           = false;
  m_ReportingLocEstInd              = false;
  m_ReportingLocEstIndIsSet         = false;
  m_LinearDistance                  = 0;
  m_LinearDistanceIsSet             = false;
  m_LocQoSIsSet                     = false;
  m_SvcId                           = "";
  m_SvcIdIsSet                      = false;
  m_LdrTypeIsSet                    = false;
  m_VelocityRequestedIsSet          = false;
  m_MaxAgeOfLocEst                  = 0;
  m_MaxAgeOfLocEstIsSet             = false;
  m_LocTimeWindowIsSet              = false;
  m_SupportedGADShapesIsSet         = false;
  m_CodeWord                        = "";
  m_CodeWordIsSet                   = false;
  m_AssociationTypeIsSet            = false;
  m_PlmnIndication                  = false;
  m_PlmnIndicationIsSet             = false;
  m_LocationAreaIsSet               = false;
  m_LocationArea5GIsSet             = false;
  m_DddTraDescriptorsIsSet          = false;
  m_DddStatiIsSet                   = false;
  m_ApiNamesIsSet                   = false;
  m_MonitoringEventReportIsSet      = false;
  m_SnssaiIsSet                     = false;
  m_TgtNsThresholdIsSet             = false;
  m_ImmediateRep                    = false;
  m_ImmediateRepIsSet               = false;
  m_UavPolicyIsSet                  = false;
  m_SesEstInd                       = false;
  m_SesEstIndIsSet                  = false;
  m_SubTypeIsSet                    = false;
  m_AddnMonTypesIsSet               = false;
  m_AddnMonEventReportsIsSet        = false;
}

void MonitoringEventSubscription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool MonitoringEventSubscription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool MonitoringEventSubscription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "MonitoringEventSubscription" : pathPrefix;

  if (supportedFeaturesIsSet()) {
    const std::string& value           = m_SupportedFeatures;
    const std::string currentValuePath = _pathPrefix + ".supportedFeatures";
  }

  if (excludedExternalIdsIsSet()) {
    const std::vector<std::string>& value = m_ExcludedExternalIds;
    const std::string currentValuePath = _pathPrefix + ".excludedExternalIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (excludedMsisdnsIsSet()) {
    const std::vector<std::string>& value = m_ExcludedMsisdns;
    const std::string currentValuePath    = _pathPrefix + ".excludedMsisdns";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (addExtGroupIdIsSet()) {
    const std::vector<std::string>& value = m_AddExtGroupId;
    const std::string currentValuePath    = _pathPrefix + ".addExtGroupId";

    if (value.size() < 2) {
      success = false;
      msg << currentValuePath << ": must have at least 2 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (maximumNumberOfReportsIsSet()) {
    const int32_t& value = m_MaximumNumberOfReports;
    const std::string currentValuePath =
        _pathPrefix + ".maximumNumberOfReports";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
  }

  if (repPeriodIsSet()) {
    const int32_t& value               = m_RepPeriod;
    const std::string currentValuePath = _pathPrefix + ".repPeriod";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (groupReportGuardTimeIsSet()) {
    const int32_t& value               = m_GroupReportGuardTime;
    const std::string currentValuePath = _pathPrefix + ".groupReportGuardTime";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (maximumDetectionTimeIsSet()) {
    const int32_t& value               = m_MaximumDetectionTime;
    const std::string currentValuePath = _pathPrefix + ".maximumDetectionTime";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (maximumLatencyIsSet()) {
    const int32_t& value               = m_MaximumLatency;
    const std::string currentValuePath = _pathPrefix + ".maximumLatency";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (maximumResponseTimeIsSet()) {
    const int32_t& value               = m_MaximumResponseTime;
    const std::string currentValuePath = _pathPrefix + ".maximumResponseTime";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (suggestedNumberOfDlPacketsIsSet()) {
    const int32_t& value = m_SuggestedNumberOfDlPackets;
    const std::string currentValuePath =
        _pathPrefix + ".suggestedNumberOfDlPackets";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (minimumReportIntervalIsSet()) {
    const int32_t& value               = m_MinimumReportInterval;
    const std::string currentValuePath = _pathPrefix + ".minimumReportInterval";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (maxRptExpireIntvlIsSet()) {
    const int32_t& value               = m_MaxRptExpireIntvl;
    const std::string currentValuePath = _pathPrefix + ".maxRptExpireIntvl";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (samplingIntervalIsSet()) {
    const int32_t& value               = m_SamplingInterval;
    const std::string currentValuePath = _pathPrefix + ".samplingInterval";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (linearDistanceIsSet()) {
    const int32_t& value               = m_LinearDistance;
    const std::string currentValuePath = _pathPrefix + ".linearDistance";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 10000) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 10000;";
    }
  }

  if (maxAgeOfLocEstIsSet()) {
    const int32_t& value               = m_MaxAgeOfLocEst;
    const std::string currentValuePath = _pathPrefix + ".maxAgeOfLocEst";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 32767) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 32767;";
    }
  }

  if (supportedGADShapesIsSet()) {
    const std::vector<SupportedGADShapes>& value = m_SupportedGADShapes;
    const std::string currentValuePath = _pathPrefix + ".supportedGADShapes";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const SupportedGADShapes& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".supportedGADShapes") &&
            success;

        i++;
      }
    }
  }

  if (dddTraDescriptorsIsSet()) {
    const std::vector<DddTrafficDescriptor>& value = m_DddTraDescriptors;
    const std::string currentValuePath = _pathPrefix + ".dddTraDescriptors";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const DddTrafficDescriptor& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".dddTraDescriptors") &&
            success;

        i++;
      }
    }
  }

  if (dddStatiIsSet()) {
    const std::vector<DlDataDeliveryStatus>& value = m_DddStati;
    const std::string currentValuePath             = _pathPrefix + ".dddStati";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const DlDataDeliveryStatus& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".dddStati") && success;

        i++;
      }
    }
  }

  if (apiNamesIsSet()) {
    const std::vector<std::string>& value = m_ApiNames;
    const std::string currentValuePath    = _pathPrefix + ".apiNames";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (addnMonTypesIsSet()) {
    const std::vector<MonitoringType>& value = m_AddnMonTypes;
    const std::string currentValuePath       = _pathPrefix + ".addnMonTypes";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const MonitoringType& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".addnMonTypes") && success;

        i++;
      }
    }
  }

  if (addnMonEventReportsIsSet()) {
    const std::vector<MonitoringEventReport>& value = m_AddnMonEventReports;
    const std::string currentValuePath = _pathPrefix + ".addnMonEventReports";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const MonitoringEventReport& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".addnMonEventReports") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool MonitoringEventSubscription::operator==(
    const MonitoringEventSubscription& rhs) const {
  return

      ((!selfIsSet() && !rhs.selfIsSet()) ||
       (selfIsSet() && rhs.selfIsSet() && getSelf() == rhs.getSelf())) &&

      ((!supportedFeaturesIsSet() && !rhs.supportedFeaturesIsSet()) ||
       (supportedFeaturesIsSet() && rhs.supportedFeaturesIsSet() &&
        getSupportedFeatures() == rhs.getSupportedFeatures())) &&

      ((!mtcProviderIdIsSet() && !rhs.mtcProviderIdIsSet()) ||
       (mtcProviderIdIsSet() && rhs.mtcProviderIdIsSet() &&
        getMtcProviderId() == rhs.getMtcProviderId())) &&

      ((!externalIdIsSet() && !rhs.externalIdIsSet()) ||
       (externalIdIsSet() && rhs.externalIdIsSet() &&
        getExternalId() == rhs.getExternalId())) &&

      ((!msisdnIsSet() && !rhs.msisdnIsSet()) ||
       (msisdnIsSet() && rhs.msisdnIsSet() &&
        getMsisdn() == rhs.getMsisdn())) &&

      ((!excludedExternalIdsIsSet() && !rhs.excludedExternalIdsIsSet()) ||
       (excludedExternalIdsIsSet() && rhs.excludedExternalIdsIsSet() &&
        getExcludedExternalIds() == rhs.getExcludedExternalIds())) &&

      ((!excludedMsisdnsIsSet() && !rhs.excludedMsisdnsIsSet()) ||
       (excludedMsisdnsIsSet() && rhs.excludedMsisdnsIsSet() &&
        getExcludedMsisdns() == rhs.getExcludedMsisdns())) &&

      ((!externalGroupIdIsSet() && !rhs.externalGroupIdIsSet()) ||
       (externalGroupIdIsSet() && rhs.externalGroupIdIsSet() &&
        getExternalGroupId() == rhs.getExternalGroupId())) &&

      ((!addExtGroupIdIsSet() && !rhs.addExtGroupIdIsSet()) ||
       (addExtGroupIdIsSet() && rhs.addExtGroupIdIsSet() &&
        getAddExtGroupId() == rhs.getAddExtGroupId())) &&

      ((!ipv4AddrIsSet() && !rhs.ipv4AddrIsSet()) ||
       (ipv4AddrIsSet() && rhs.ipv4AddrIsSet() &&
        getIpv4Addr() == rhs.getIpv4Addr())) &&

      ((!ipv6AddrIsSet() && !rhs.ipv6AddrIsSet()) ||
       (ipv6AddrIsSet() && rhs.ipv6AddrIsSet() &&
        getIpv6Addr() == rhs.getIpv6Addr())) &&

      ((!dnnIsSet() && !rhs.dnnIsSet()) ||
       (dnnIsSet() && rhs.dnnIsSet() && getDnn() == rhs.getDnn())) &&

      (getNotificationDestination() == rhs.getNotificationDestination()) &&

      ((!requestTestNotificationIsSet() &&
        !rhs.requestTestNotificationIsSet()) ||
       (requestTestNotificationIsSet() && rhs.requestTestNotificationIsSet() &&
        isRequestTestNotification() == rhs.isRequestTestNotification())) &&

      ((!websockNotifConfigIsSet() && !rhs.websockNotifConfigIsSet()) ||
       (websockNotifConfigIsSet() && rhs.websockNotifConfigIsSet() &&
        getWebsockNotifConfig() == rhs.getWebsockNotifConfig())) &&

      (getMonitoringType() == rhs.getMonitoringType()) &&

      ((!maximumNumberOfReportsIsSet() && !rhs.maximumNumberOfReportsIsSet()) ||
       (maximumNumberOfReportsIsSet() && rhs.maximumNumberOfReportsIsSet() &&
        getMaximumNumberOfReports() == rhs.getMaximumNumberOfReports())) &&

      ((!monitorExpireTimeIsSet() && !rhs.monitorExpireTimeIsSet()) ||
       (monitorExpireTimeIsSet() && rhs.monitorExpireTimeIsSet() &&
        getMonitorExpireTime() == rhs.getMonitorExpireTime())) &&

      ((!repPeriodIsSet() && !rhs.repPeriodIsSet()) ||
       (repPeriodIsSet() && rhs.repPeriodIsSet() &&
        getRepPeriod() == rhs.getRepPeriod())) &&

      ((!groupReportGuardTimeIsSet() && !rhs.groupReportGuardTimeIsSet()) ||
       (groupReportGuardTimeIsSet() && rhs.groupReportGuardTimeIsSet() &&
        getGroupReportGuardTime() == rhs.getGroupReportGuardTime())) &&

      ((!maximumDetectionTimeIsSet() && !rhs.maximumDetectionTimeIsSet()) ||
       (maximumDetectionTimeIsSet() && rhs.maximumDetectionTimeIsSet() &&
        getMaximumDetectionTime() == rhs.getMaximumDetectionTime())) &&

      ((!reachabilityTypeIsSet() && !rhs.reachabilityTypeIsSet()) ||
       (reachabilityTypeIsSet() && rhs.reachabilityTypeIsSet() &&
        getReachabilityType() == rhs.getReachabilityType())) &&

      ((!maximumLatencyIsSet() && !rhs.maximumLatencyIsSet()) ||
       (maximumLatencyIsSet() && rhs.maximumLatencyIsSet() &&
        getMaximumLatency() == rhs.getMaximumLatency())) &&

      ((!maximumResponseTimeIsSet() && !rhs.maximumResponseTimeIsSet()) ||
       (maximumResponseTimeIsSet() && rhs.maximumResponseTimeIsSet() &&
        getMaximumResponseTime() == rhs.getMaximumResponseTime())) &&

      ((!suggestedNumberOfDlPacketsIsSet() &&
        !rhs.suggestedNumberOfDlPacketsIsSet()) ||
       (suggestedNumberOfDlPacketsIsSet() &&
        rhs.suggestedNumberOfDlPacketsIsSet() &&
        getSuggestedNumberOfDlPackets() ==
            rhs.getSuggestedNumberOfDlPackets())) &&

      ((!idleStatusIndicationIsSet() && !rhs.idleStatusIndicationIsSet()) ||
       (idleStatusIndicationIsSet() && rhs.idleStatusIndicationIsSet() &&
        isIdleStatusIndication() == rhs.isIdleStatusIndication())) &&

      ((!locationTypeIsSet() && !rhs.locationTypeIsSet()) ||
       (locationTypeIsSet() && rhs.locationTypeIsSet() &&
        getLocationType() == rhs.getLocationType())) &&

      ((!accuracyIsSet() && !rhs.accuracyIsSet()) ||
       (accuracyIsSet() && rhs.accuracyIsSet() &&
        getAccuracy() == rhs.getAccuracy())) &&

      ((!minimumReportIntervalIsSet() && !rhs.minimumReportIntervalIsSet()) ||
       (minimumReportIntervalIsSet() && rhs.minimumReportIntervalIsSet() &&
        getMinimumReportInterval() == rhs.getMinimumReportInterval())) &&

      ((!maxRptExpireIntvlIsSet() && !rhs.maxRptExpireIntvlIsSet()) ||
       (maxRptExpireIntvlIsSet() && rhs.maxRptExpireIntvlIsSet() &&
        getMaxRptExpireIntvl() == rhs.getMaxRptExpireIntvl())) &&

      ((!samplingIntervalIsSet() && !rhs.samplingIntervalIsSet()) ||
       (samplingIntervalIsSet() && rhs.samplingIntervalIsSet() &&
        getSamplingInterval() == rhs.getSamplingInterval())) &&

      ((!reportingLocEstIndIsSet() && !rhs.reportingLocEstIndIsSet()) ||
       (reportingLocEstIndIsSet() && rhs.reportingLocEstIndIsSet() &&
        isReportingLocEstInd() == rhs.isReportingLocEstInd())) &&

      ((!linearDistanceIsSet() && !rhs.linearDistanceIsSet()) ||
       (linearDistanceIsSet() && rhs.linearDistanceIsSet() &&
        getLinearDistance() == rhs.getLinearDistance())) &&

      ((!locQoSIsSet() && !rhs.locQoSIsSet()) ||
       (locQoSIsSet() && rhs.locQoSIsSet() &&
        getLocQoS() == rhs.getLocQoS())) &&

      ((!svcIdIsSet() && !rhs.svcIdIsSet()) ||
       (svcIdIsSet() && rhs.svcIdIsSet() && getSvcId() == rhs.getSvcId())) &&

      ((!ldrTypeIsSet() && !rhs.ldrTypeIsSet()) ||
       (ldrTypeIsSet() && rhs.ldrTypeIsSet() &&
        getLdrType() == rhs.getLdrType())) &&

      ((!velocityRequestedIsSet() && !rhs.velocityRequestedIsSet()) ||
       (velocityRequestedIsSet() && rhs.velocityRequestedIsSet() &&
        getVelocityRequested() == rhs.getVelocityRequested())) &&

      ((!maxAgeOfLocEstIsSet() && !rhs.maxAgeOfLocEstIsSet()) ||
       (maxAgeOfLocEstIsSet() && rhs.maxAgeOfLocEstIsSet() &&
        getMaxAgeOfLocEst() == rhs.getMaxAgeOfLocEst())) &&

      ((!locTimeWindowIsSet() && !rhs.locTimeWindowIsSet()) ||
       (locTimeWindowIsSet() && rhs.locTimeWindowIsSet() &&
        getLocTimeWindow() == rhs.getLocTimeWindow())) &&

      ((!supportedGADShapesIsSet() && !rhs.supportedGADShapesIsSet()) ||
       (supportedGADShapesIsSet() && rhs.supportedGADShapesIsSet() &&
        getSupportedGADShapes() == rhs.getSupportedGADShapes())) &&

      ((!codeWordIsSet() && !rhs.codeWordIsSet()) ||
       (codeWordIsSet() && rhs.codeWordIsSet() &&
        getCodeWord() == rhs.getCodeWord())) &&

      ((!associationTypeIsSet() && !rhs.associationTypeIsSet()) ||
       (associationTypeIsSet() && rhs.associationTypeIsSet() &&
        getAssociationType() == rhs.getAssociationType())) &&

      ((!plmnIndicationIsSet() && !rhs.plmnIndicationIsSet()) ||
       (plmnIndicationIsSet() && rhs.plmnIndicationIsSet() &&
        isPlmnIndication() == rhs.isPlmnIndication())) &&

      ((!locationAreaIsSet() && !rhs.locationAreaIsSet()) ||
       (locationAreaIsSet() && rhs.locationAreaIsSet() &&
        getLocationArea() == rhs.getLocationArea())) &&

      ((!locationArea5GIsSet() && !rhs.locationArea5GIsSet()) ||
       (locationArea5GIsSet() && rhs.locationArea5GIsSet() &&
        getLocationArea5G() == rhs.getLocationArea5G())) &&

      ((!dddTraDescriptorsIsSet() && !rhs.dddTraDescriptorsIsSet()) ||
       (dddTraDescriptorsIsSet() && rhs.dddTraDescriptorsIsSet() &&
        getDddTraDescriptors() == rhs.getDddTraDescriptors())) &&

      ((!dddStatiIsSet() && !rhs.dddStatiIsSet()) ||
       (dddStatiIsSet() && rhs.dddStatiIsSet() &&
        getDddStati() == rhs.getDddStati())) &&

      ((!apiNamesIsSet() && !rhs.apiNamesIsSet()) ||
       (apiNamesIsSet() && rhs.apiNamesIsSet() &&
        getApiNames() == rhs.getApiNames())) &&

      ((!monitoringEventReportIsSet() && !rhs.monitoringEventReportIsSet()) ||
       (monitoringEventReportIsSet() && rhs.monitoringEventReportIsSet() &&
        getMonitoringEventReport() == rhs.getMonitoringEventReport())) &&

      ((!snssaiIsSet() && !rhs.snssaiIsSet()) ||
       (snssaiIsSet() && rhs.snssaiIsSet() &&
        getSnssai() == rhs.getSnssai())) &&

      ((!tgtNsThresholdIsSet() && !rhs.tgtNsThresholdIsSet()) ||
       (tgtNsThresholdIsSet() && rhs.tgtNsThresholdIsSet() &&
        getTgtNsThreshold() == rhs.getTgtNsThreshold())) &&

      ((!immediateRepIsSet() && !rhs.immediateRepIsSet()) ||
       (immediateRepIsSet() && rhs.immediateRepIsSet() &&
        isImmediateRep() == rhs.isImmediateRep())) &&

      ((!uavPolicyIsSet() && !rhs.uavPolicyIsSet()) ||
       (uavPolicyIsSet() && rhs.uavPolicyIsSet() &&
        getUavPolicy() == rhs.getUavPolicy())) &&

      ((!sesEstIndIsSet() && !rhs.sesEstIndIsSet()) ||
       (sesEstIndIsSet() && rhs.sesEstIndIsSet() &&
        isSesEstInd() == rhs.isSesEstInd())) &&

      ((!subTypeIsSet() && !rhs.subTypeIsSet()) ||
       (subTypeIsSet() && rhs.subTypeIsSet() &&
        getSubType() == rhs.getSubType())) &&

      ((!addnMonTypesIsSet() && !rhs.addnMonTypesIsSet()) ||
       (addnMonTypesIsSet() && rhs.addnMonTypesIsSet() &&
        getAddnMonTypes() == rhs.getAddnMonTypes())) &&

      ((!addnMonEventReportsIsSet() && !rhs.addnMonEventReportsIsSet()) ||
       (addnMonEventReportsIsSet() && rhs.addnMonEventReportsIsSet() &&
        getAddnMonEventReports() == rhs.getAddnMonEventReports()))

          ;
}

bool MonitoringEventSubscription::operator!=(
    const MonitoringEventSubscription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MonitoringEventSubscription& o) {
  j = nlohmann::json();
  if (o.selfIsSet()) j["self"] = o.m_Self;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.mtcProviderIdIsSet()) j["mtcProviderId"] = o.m_MtcProviderId;
  if (o.externalIdIsSet()) j["externalId"] = o.m_ExternalId;
  if (o.msisdnIsSet()) j["msisdn"] = o.m_Msisdn;
  if (o.excludedExternalIdsIsSet() || !o.m_ExcludedExternalIds.empty())
    j["excludedExternalIds"] = o.m_ExcludedExternalIds;
  if (o.excludedMsisdnsIsSet() || !o.m_ExcludedMsisdns.empty())
    j["excludedMsisdns"] = o.m_ExcludedMsisdns;
  if (o.externalGroupIdIsSet()) j["externalGroupId"] = o.m_ExternalGroupId;
  if (o.addExtGroupIdIsSet() || !o.m_AddExtGroupId.empty())
    j["addExtGroupId"] = o.m_AddExtGroupId;
  if (o.ipv4AddrIsSet()) j["ipv4Addr"] = o.m_Ipv4Addr;
  if (o.ipv6AddrIsSet()) j["ipv6Addr"] = o.m_Ipv6Addr;
  if (o.dnnIsSet()) j["dnn"] = o.m_Dnn;
  j["notificationDestination"] = o.m_NotificationDestination;
  if (o.requestTestNotificationIsSet())
    j["requestTestNotification"] = o.m_RequestTestNotification;
  if (o.websockNotifConfigIsSet())
    j["websockNotifConfig"] = o.m_WebsockNotifConfig;
  j["monitoringType"] = o.m_MonitoringType;
  if (o.maximumNumberOfReportsIsSet())
    j["maximumNumberOfReports"] = o.m_MaximumNumberOfReports;
  if (o.monitorExpireTimeIsSet())
    j["monitorExpireTime"] = o.m_MonitorExpireTime;
  if (o.repPeriodIsSet()) j["repPeriod"] = o.m_RepPeriod;
  if (o.groupReportGuardTimeIsSet())
    j["groupReportGuardTime"] = o.m_GroupReportGuardTime;
  if (o.maximumDetectionTimeIsSet())
    j["maximumDetectionTime"] = o.m_MaximumDetectionTime;
  if (o.reachabilityTypeIsSet()) j["reachabilityType"] = o.m_ReachabilityType;
  if (o.maximumLatencyIsSet()) j["maximumLatency"] = o.m_MaximumLatency;
  if (o.maximumResponseTimeIsSet())
    j["maximumResponseTime"] = o.m_MaximumResponseTime;
  if (o.suggestedNumberOfDlPacketsIsSet())
    j["suggestedNumberOfDlPackets"] = o.m_SuggestedNumberOfDlPackets;
  if (o.idleStatusIndicationIsSet())
    j["idleStatusIndication"] = o.m_IdleStatusIndication;
  if (o.locationTypeIsSet()) j["locationType"] = o.m_LocationType;
  if (o.accuracyIsSet()) j["accuracy"] = o.m_Accuracy;
  if (o.minimumReportIntervalIsSet())
    j["minimumReportInterval"] = o.m_MinimumReportInterval;
  if (o.maxRptExpireIntvlIsSet())
    j["maxRptExpireIntvl"] = o.m_MaxRptExpireIntvl;
  if (o.samplingIntervalIsSet()) j["samplingInterval"] = o.m_SamplingInterval;
  if (o.reportingLocEstIndIsSet())
    j["reportingLocEstInd"] = o.m_ReportingLocEstInd;
  if (o.linearDistanceIsSet()) j["linearDistance"] = o.m_LinearDistance;
  if (o.locQoSIsSet()) j["locQoS"] = o.m_LocQoS;
  if (o.svcIdIsSet()) j["svcId"] = o.m_SvcId;
  if (o.ldrTypeIsSet()) j["ldrType"] = o.m_LdrType;
  if (o.velocityRequestedIsSet())
    j["velocityRequested"] = o.m_VelocityRequested;
  if (o.maxAgeOfLocEstIsSet()) j["maxAgeOfLocEst"] = o.m_MaxAgeOfLocEst;
  if (o.locTimeWindowIsSet()) j["locTimeWindow"] = o.m_LocTimeWindow;
  if (o.supportedGADShapesIsSet() || !o.m_SupportedGADShapes.empty())
    j["supportedGADShapes"] = o.m_SupportedGADShapes;
  if (o.codeWordIsSet()) j["codeWord"] = o.m_CodeWord;
  if (o.associationTypeIsSet()) j["associationType"] = o.m_AssociationType;
  if (o.plmnIndicationIsSet()) j["plmnIndication"] = o.m_PlmnIndication;
  if (o.locationAreaIsSet()) j["locationArea"] = o.m_LocationArea;
  if (o.locationArea5GIsSet()) j["locationArea5G"] = o.m_LocationArea5G;
  if (o.dddTraDescriptorsIsSet() || !o.m_DddTraDescriptors.empty())
    j["dddTraDescriptors"] = o.m_DddTraDescriptors;
  if (o.dddStatiIsSet() || !o.m_DddStati.empty()) j["dddStati"] = o.m_DddStati;
  if (o.apiNamesIsSet() || !o.m_ApiNames.empty()) j["apiNames"] = o.m_ApiNames;
  if (o.monitoringEventReportIsSet())
    j["monitoringEventReport"] = o.m_MonitoringEventReport;
  if (o.snssaiIsSet()) j["snssai"] = o.m_Snssai;
  if (o.tgtNsThresholdIsSet()) j["tgtNsThreshold"] = o.m_TgtNsThreshold;
  if (o.immediateRepIsSet()) j["immediateRep"] = o.m_ImmediateRep;
  if (o.uavPolicyIsSet()) j["uavPolicy"] = o.m_UavPolicy;
  if (o.sesEstIndIsSet()) j["sesEstInd"] = o.m_SesEstInd;
  if (o.subTypeIsSet()) j["subType"] = o.m_SubType;
  if (o.addnMonTypesIsSet() || !o.m_AddnMonTypes.empty())
    j["addnMonTypes"] = o.m_AddnMonTypes;
  if (o.addnMonEventReportsIsSet() || !o.m_AddnMonEventReports.empty())
    j["addnMonEventReports"] = o.m_AddnMonEventReports;
}

void from_json(const nlohmann::json& j, MonitoringEventSubscription& o) {
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("mtcProviderId") != j.end()) {
    j.at("mtcProviderId").get_to(o.m_MtcProviderId);
    o.m_MtcProviderIdIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  if (j.find("excludedExternalIds") != j.end()) {
    j.at("excludedExternalIds").get_to(o.m_ExcludedExternalIds);
    o.m_ExcludedExternalIdsIsSet = true;
  }
  if (j.find("excludedMsisdns") != j.end()) {
    j.at("excludedMsisdns").get_to(o.m_ExcludedMsisdns);
    o.m_ExcludedMsisdnsIsSet = true;
  }
  if (j.find("externalGroupId") != j.end()) {
    j.at("externalGroupId").get_to(o.m_ExternalGroupId);
    o.m_ExternalGroupIdIsSet = true;
  }
  if (j.find("addExtGroupId") != j.end()) {
    j.at("addExtGroupId").get_to(o.m_AddExtGroupId);
    o.m_AddExtGroupIdIsSet = true;
  }
  if (j.find("ipv4Addr") != j.end()) {
    j.at("ipv4Addr").get_to(o.m_Ipv4Addr);
    o.m_Ipv4AddrIsSet = true;
  }
  if (j.find("ipv6Addr") != j.end()) {
    j.at("ipv6Addr").get_to(o.m_Ipv6Addr);
    o.m_Ipv6AddrIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  j.at("notificationDestination").get_to(o.m_NotificationDestination);
  if (j.find("requestTestNotification") != j.end()) {
    j.at("requestTestNotification").get_to(o.m_RequestTestNotification);
    o.m_RequestTestNotificationIsSet = true;
  }
  if (j.find("websockNotifConfig") != j.end()) {
    j.at("websockNotifConfig").get_to(o.m_WebsockNotifConfig);
    o.m_WebsockNotifConfigIsSet = true;
  }
  j.at("monitoringType").get_to(o.m_MonitoringType);
  if (j.find("maximumNumberOfReports") != j.end()) {
    j.at("maximumNumberOfReports").get_to(o.m_MaximumNumberOfReports);
    o.m_MaximumNumberOfReportsIsSet = true;
  }
  if (j.find("monitorExpireTime") != j.end()) {
    j.at("monitorExpireTime").get_to(o.m_MonitorExpireTime);
    o.m_MonitorExpireTimeIsSet = true;
  }
  if (j.find("repPeriod") != j.end()) {
    j.at("repPeriod").get_to(o.m_RepPeriod);
    o.m_RepPeriodIsSet = true;
  }
  if (j.find("groupReportGuardTime") != j.end()) {
    j.at("groupReportGuardTime").get_to(o.m_GroupReportGuardTime);
    o.m_GroupReportGuardTimeIsSet = true;
  }
  if (j.find("maximumDetectionTime") != j.end()) {
    j.at("maximumDetectionTime").get_to(o.m_MaximumDetectionTime);
    o.m_MaximumDetectionTimeIsSet = true;
  }
  if (j.find("reachabilityType") != j.end()) {
    j.at("reachabilityType").get_to(o.m_ReachabilityType);
    o.m_ReachabilityTypeIsSet = true;
  }
  if (j.find("maximumLatency") != j.end()) {
    j.at("maximumLatency").get_to(o.m_MaximumLatency);
    o.m_MaximumLatencyIsSet = true;
  }
  if (j.find("maximumResponseTime") != j.end()) {
    j.at("maximumResponseTime").get_to(o.m_MaximumResponseTime);
    o.m_MaximumResponseTimeIsSet = true;
  }
  if (j.find("suggestedNumberOfDlPackets") != j.end()) {
    j.at("suggestedNumberOfDlPackets").get_to(o.m_SuggestedNumberOfDlPackets);
    o.m_SuggestedNumberOfDlPacketsIsSet = true;
  }
  if (j.find("idleStatusIndication") != j.end()) {
    j.at("idleStatusIndication").get_to(o.m_IdleStatusIndication);
    o.m_IdleStatusIndicationIsSet = true;
  }
  if (j.find("locationType") != j.end()) {
    j.at("locationType").get_to(o.m_LocationType);
    o.m_LocationTypeIsSet = true;
  }
  if (j.find("accuracy") != j.end()) {
    j.at("accuracy").get_to(o.m_Accuracy);
    o.m_AccuracyIsSet = true;
  }
  if (j.find("minimumReportInterval") != j.end()) {
    j.at("minimumReportInterval").get_to(o.m_MinimumReportInterval);
    o.m_MinimumReportIntervalIsSet = true;
  }
  if (j.find("maxRptExpireIntvl") != j.end()) {
    j.at("maxRptExpireIntvl").get_to(o.m_MaxRptExpireIntvl);
    o.m_MaxRptExpireIntvlIsSet = true;
  }
  if (j.find("samplingInterval") != j.end()) {
    j.at("samplingInterval").get_to(o.m_SamplingInterval);
    o.m_SamplingIntervalIsSet = true;
  }
  if (j.find("reportingLocEstInd") != j.end()) {
    j.at("reportingLocEstInd").get_to(o.m_ReportingLocEstInd);
    o.m_ReportingLocEstIndIsSet = true;
  }
  if (j.find("linearDistance") != j.end()) {
    j.at("linearDistance").get_to(o.m_LinearDistance);
    o.m_LinearDistanceIsSet = true;
  }
  if (j.find("locQoS") != j.end()) {
    j.at("locQoS").get_to(o.m_LocQoS);
    o.m_LocQoSIsSet = true;
  }
  if (j.find("svcId") != j.end()) {
    j.at("svcId").get_to(o.m_SvcId);
    o.m_SvcIdIsSet = true;
  }
  if (j.find("ldrType") != j.end()) {
    j.at("ldrType").get_to(o.m_LdrType);
    o.m_LdrTypeIsSet = true;
  }
  if (j.find("velocityRequested") != j.end()) {
    j.at("velocityRequested").get_to(o.m_VelocityRequested);
    o.m_VelocityRequestedIsSet = true;
  }
  if (j.find("maxAgeOfLocEst") != j.end()) {
    j.at("maxAgeOfLocEst").get_to(o.m_MaxAgeOfLocEst);
    o.m_MaxAgeOfLocEstIsSet = true;
  }
  if (j.find("locTimeWindow") != j.end()) {
    j.at("locTimeWindow").get_to(o.m_LocTimeWindow);
    o.m_LocTimeWindowIsSet = true;
  }
  if (j.find("supportedGADShapes") != j.end()) {
    j.at("supportedGADShapes").get_to(o.m_SupportedGADShapes);
    o.m_SupportedGADShapesIsSet = true;
  }
  if (j.find("codeWord") != j.end()) {
    j.at("codeWord").get_to(o.m_CodeWord);
    o.m_CodeWordIsSet = true;
  }
  if (j.find("associationType") != j.end()) {
    j.at("associationType").get_to(o.m_AssociationType);
    o.m_AssociationTypeIsSet = true;
  }
  if (j.find("plmnIndication") != j.end()) {
    j.at("plmnIndication").get_to(o.m_PlmnIndication);
    o.m_PlmnIndicationIsSet = true;
  }
  if (j.find("locationArea") != j.end()) {
    j.at("locationArea").get_to(o.m_LocationArea);
    o.m_LocationAreaIsSet = true;
  }
  if (j.find("locationArea5G") != j.end()) {
    j.at("locationArea5G").get_to(o.m_LocationArea5G);
    o.m_LocationArea5GIsSet = true;
  }
  if (j.find("dddTraDescriptors") != j.end()) {
    j.at("dddTraDescriptors").get_to(o.m_DddTraDescriptors);
    o.m_DddTraDescriptorsIsSet = true;
  }
  if (j.find("dddStati") != j.end()) {
    j.at("dddStati").get_to(o.m_DddStati);
    o.m_DddStatiIsSet = true;
  }
  if (j.find("apiNames") != j.end()) {
    j.at("apiNames").get_to(o.m_ApiNames);
    o.m_ApiNamesIsSet = true;
  }
  if (j.find("monitoringEventReport") != j.end()) {
    j.at("monitoringEventReport").get_to(o.m_MonitoringEventReport);
    o.m_MonitoringEventReportIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("tgtNsThreshold") != j.end()) {
    j.at("tgtNsThreshold").get_to(o.m_TgtNsThreshold);
    o.m_TgtNsThresholdIsSet = true;
  }
  if (j.find("immediateRep") != j.end()) {
    j.at("immediateRep").get_to(o.m_ImmediateRep);
    o.m_ImmediateRepIsSet = true;
  }
  if (j.find("uavPolicy") != j.end()) {
    j.at("uavPolicy").get_to(o.m_UavPolicy);
    o.m_UavPolicyIsSet = true;
  }
  if (j.find("sesEstInd") != j.end()) {
    j.at("sesEstInd").get_to(o.m_SesEstInd);
    o.m_SesEstIndIsSet = true;
  }
  if (j.find("subType") != j.end()) {
    j.at("subType").get_to(o.m_SubType);
    o.m_SubTypeIsSet = true;
  }
  if (j.find("addnMonTypes") != j.end()) {
    j.at("addnMonTypes").get_to(o.m_AddnMonTypes);
    o.m_AddnMonTypesIsSet = true;
  }
  if (j.find("addnMonEventReports") != j.end()) {
    j.at("addnMonEventReports").get_to(o.m_AddnMonEventReports);
    o.m_AddnMonEventReportsIsSet = true;
  }
}

std::string MonitoringEventSubscription::getSelf() const {
  return m_Self;
}
void MonitoringEventSubscription::setSelf(std::string const& value) {
  m_Self      = value;
  m_SelfIsSet = true;
}
bool MonitoringEventSubscription::selfIsSet() const {
  return m_SelfIsSet;
}
void MonitoringEventSubscription::unsetSelf() {
  m_SelfIsSet = false;
}
std::string MonitoringEventSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void MonitoringEventSubscription::setSupportedFeatures(
    std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool MonitoringEventSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void MonitoringEventSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string MonitoringEventSubscription::getMtcProviderId() const {
  return m_MtcProviderId;
}
void MonitoringEventSubscription::setMtcProviderId(std::string const& value) {
  m_MtcProviderId      = value;
  m_MtcProviderIdIsSet = true;
}
bool MonitoringEventSubscription::mtcProviderIdIsSet() const {
  return m_MtcProviderIdIsSet;
}
void MonitoringEventSubscription::unsetMtcProviderId() {
  m_MtcProviderIdIsSet = false;
}
std::string MonitoringEventSubscription::getExternalId() const {
  return m_ExternalId;
}
void MonitoringEventSubscription::setExternalId(std::string const& value) {
  m_ExternalId      = value;
  m_ExternalIdIsSet = true;
}
bool MonitoringEventSubscription::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void MonitoringEventSubscription::unsetExternalId() {
  m_ExternalIdIsSet = false;
}
std::string MonitoringEventSubscription::getMsisdn() const {
  return m_Msisdn;
}
void MonitoringEventSubscription::setMsisdn(std::string const& value) {
  m_Msisdn      = value;
  m_MsisdnIsSet = true;
}
bool MonitoringEventSubscription::msisdnIsSet() const {
  return m_MsisdnIsSet;
}
void MonitoringEventSubscription::unsetMsisdn() {
  m_MsisdnIsSet = false;
}
std::vector<std::string> MonitoringEventSubscription::getExcludedExternalIds()
    const {
  return m_ExcludedExternalIds;
}
void MonitoringEventSubscription::setExcludedExternalIds(
    std::vector<std::string> const& value) {
  m_ExcludedExternalIds      = value;
  m_ExcludedExternalIdsIsSet = true;
}
bool MonitoringEventSubscription::excludedExternalIdsIsSet() const {
  return m_ExcludedExternalIdsIsSet;
}
void MonitoringEventSubscription::unsetExcludedExternalIds() {
  m_ExcludedExternalIdsIsSet = false;
}
std::vector<std::string> MonitoringEventSubscription::getExcludedMsisdns()
    const {
  return m_ExcludedMsisdns;
}
void MonitoringEventSubscription::setExcludedMsisdns(
    std::vector<std::string> const& value) {
  m_ExcludedMsisdns      = value;
  m_ExcludedMsisdnsIsSet = true;
}
bool MonitoringEventSubscription::excludedMsisdnsIsSet() const {
  return m_ExcludedMsisdnsIsSet;
}
void MonitoringEventSubscription::unsetExcludedMsisdns() {
  m_ExcludedMsisdnsIsSet = false;
}
std::string MonitoringEventSubscription::getExternalGroupId() const {
  return m_ExternalGroupId;
}
void MonitoringEventSubscription::setExternalGroupId(std::string const& value) {
  m_ExternalGroupId      = value;
  m_ExternalGroupIdIsSet = true;
}
bool MonitoringEventSubscription::externalGroupIdIsSet() const {
  return m_ExternalGroupIdIsSet;
}
void MonitoringEventSubscription::unsetExternalGroupId() {
  m_ExternalGroupIdIsSet = false;
}
std::vector<std::string> MonitoringEventSubscription::getAddExtGroupId() const {
  return m_AddExtGroupId;
}
void MonitoringEventSubscription::setAddExtGroupId(
    std::vector<std::string> const& value) {
  m_AddExtGroupId      = value;
  m_AddExtGroupIdIsSet = true;
}
bool MonitoringEventSubscription::addExtGroupIdIsSet() const {
  return m_AddExtGroupIdIsSet;
}
void MonitoringEventSubscription::unsetAddExtGroupId() {
  m_AddExtGroupIdIsSet = false;
}
std::string MonitoringEventSubscription::getIpv4Addr() const {
  return m_Ipv4Addr;
}
void MonitoringEventSubscription::setIpv4Addr(std::string const& value) {
  m_Ipv4Addr      = value;
  m_Ipv4AddrIsSet = true;
}
bool MonitoringEventSubscription::ipv4AddrIsSet() const {
  return m_Ipv4AddrIsSet;
}
void MonitoringEventSubscription::unsetIpv4Addr() {
  m_Ipv4AddrIsSet = false;
}
std::string MonitoringEventSubscription::getIpv6Addr() const {
  return m_Ipv6Addr;
}
void MonitoringEventSubscription::setIpv6Addr(std::string const& value) {
  m_Ipv6Addr      = value;
  m_Ipv6AddrIsSet = true;
}
bool MonitoringEventSubscription::ipv6AddrIsSet() const {
  return m_Ipv6AddrIsSet;
}
void MonitoringEventSubscription::unsetIpv6Addr() {
  m_Ipv6AddrIsSet = false;
}
std::string MonitoringEventSubscription::getDnn() const {
  return m_Dnn;
}
void MonitoringEventSubscription::setDnn(std::string const& value) {
  m_Dnn      = value;
  m_DnnIsSet = true;
}
bool MonitoringEventSubscription::dnnIsSet() const {
  return m_DnnIsSet;
}
void MonitoringEventSubscription::unsetDnn() {
  m_DnnIsSet = false;
}
std::string MonitoringEventSubscription::getNotificationDestination() const {
  return m_NotificationDestination;
}
void MonitoringEventSubscription::setNotificationDestination(
    std::string const& value) {
  m_NotificationDestination = value;
}
bool MonitoringEventSubscription::isRequestTestNotification() const {
  return m_RequestTestNotification;
}
void MonitoringEventSubscription::setRequestTestNotification(bool const value) {
  m_RequestTestNotification      = value;
  m_RequestTestNotificationIsSet = true;
}
bool MonitoringEventSubscription::requestTestNotificationIsSet() const {
  return m_RequestTestNotificationIsSet;
}
void MonitoringEventSubscription::unsetRequestTestNotification() {
  m_RequestTestNotificationIsSet = false;
}
WebsockNotifConfig MonitoringEventSubscription::getWebsockNotifConfig() const {
  return m_WebsockNotifConfig;
}
void MonitoringEventSubscription::setWebsockNotifConfig(
    WebsockNotifConfig const& value) {
  m_WebsockNotifConfig      = value;
  m_WebsockNotifConfigIsSet = true;
}
bool MonitoringEventSubscription::websockNotifConfigIsSet() const {
  return m_WebsockNotifConfigIsSet;
}
void MonitoringEventSubscription::unsetWebsockNotifConfig() {
  m_WebsockNotifConfigIsSet = false;
}
MonitoringType MonitoringEventSubscription::getMonitoringType() const {
  return m_MonitoringType;
}
void MonitoringEventSubscription::setMonitoringType(
    MonitoringType const& value) {
  m_MonitoringType = value;
}
int32_t MonitoringEventSubscription::getMaximumNumberOfReports() const {
  return m_MaximumNumberOfReports;
}
void MonitoringEventSubscription::setMaximumNumberOfReports(
    int32_t const value) {
  m_MaximumNumberOfReports      = value;
  m_MaximumNumberOfReportsIsSet = true;
}
bool MonitoringEventSubscription::maximumNumberOfReportsIsSet() const {
  return m_MaximumNumberOfReportsIsSet;
}
void MonitoringEventSubscription::unsetMaximumNumberOfReports() {
  m_MaximumNumberOfReportsIsSet = false;
}
std::string MonitoringEventSubscription::getMonitorExpireTime() const {
  return m_MonitorExpireTime;
}
void MonitoringEventSubscription::setMonitorExpireTime(
    std::string const& value) {
  m_MonitorExpireTime      = value;
  m_MonitorExpireTimeIsSet = true;
}
bool MonitoringEventSubscription::monitorExpireTimeIsSet() const {
  return m_MonitorExpireTimeIsSet;
}
void MonitoringEventSubscription::unsetMonitorExpireTime() {
  m_MonitorExpireTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getRepPeriod() const {
  return m_RepPeriod;
}
void MonitoringEventSubscription::setRepPeriod(int32_t const value) {
  m_RepPeriod      = value;
  m_RepPeriodIsSet = true;
}
bool MonitoringEventSubscription::repPeriodIsSet() const {
  return m_RepPeriodIsSet;
}
void MonitoringEventSubscription::unsetRepPeriod() {
  m_RepPeriodIsSet = false;
}
int32_t MonitoringEventSubscription::getGroupReportGuardTime() const {
  return m_GroupReportGuardTime;
}
void MonitoringEventSubscription::setGroupReportGuardTime(int32_t const value) {
  m_GroupReportGuardTime      = value;
  m_GroupReportGuardTimeIsSet = true;
}
bool MonitoringEventSubscription::groupReportGuardTimeIsSet() const {
  return m_GroupReportGuardTimeIsSet;
}
void MonitoringEventSubscription::unsetGroupReportGuardTime() {
  m_GroupReportGuardTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumDetectionTime() const {
  return m_MaximumDetectionTime;
}
void MonitoringEventSubscription::setMaximumDetectionTime(int32_t const value) {
  m_MaximumDetectionTime      = value;
  m_MaximumDetectionTimeIsSet = true;
}
bool MonitoringEventSubscription::maximumDetectionTimeIsSet() const {
  return m_MaximumDetectionTimeIsSet;
}
void MonitoringEventSubscription::unsetMaximumDetectionTime() {
  m_MaximumDetectionTimeIsSet = false;
}
ReachabilityType MonitoringEventSubscription::getReachabilityType() const {
  return m_ReachabilityType;
}
void MonitoringEventSubscription::setReachabilityType(
    ReachabilityType const& value) {
  m_ReachabilityType      = value;
  m_ReachabilityTypeIsSet = true;
}
bool MonitoringEventSubscription::reachabilityTypeIsSet() const {
  return m_ReachabilityTypeIsSet;
}
void MonitoringEventSubscription::unsetReachabilityType() {
  m_ReachabilityTypeIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumLatency() const {
  return m_MaximumLatency;
}
void MonitoringEventSubscription::setMaximumLatency(int32_t const value) {
  m_MaximumLatency      = value;
  m_MaximumLatencyIsSet = true;
}
bool MonitoringEventSubscription::maximumLatencyIsSet() const {
  return m_MaximumLatencyIsSet;
}
void MonitoringEventSubscription::unsetMaximumLatency() {
  m_MaximumLatencyIsSet = false;
}
int32_t MonitoringEventSubscription::getMaximumResponseTime() const {
  return m_MaximumResponseTime;
}
void MonitoringEventSubscription::setMaximumResponseTime(int32_t const value) {
  m_MaximumResponseTime      = value;
  m_MaximumResponseTimeIsSet = true;
}
bool MonitoringEventSubscription::maximumResponseTimeIsSet() const {
  return m_MaximumResponseTimeIsSet;
}
void MonitoringEventSubscription::unsetMaximumResponseTime() {
  m_MaximumResponseTimeIsSet = false;
}
int32_t MonitoringEventSubscription::getSuggestedNumberOfDlPackets() const {
  return m_SuggestedNumberOfDlPackets;
}
void MonitoringEventSubscription::setSuggestedNumberOfDlPackets(
    int32_t const value) {
  m_SuggestedNumberOfDlPackets      = value;
  m_SuggestedNumberOfDlPacketsIsSet = true;
}
bool MonitoringEventSubscription::suggestedNumberOfDlPacketsIsSet() const {
  return m_SuggestedNumberOfDlPacketsIsSet;
}
void MonitoringEventSubscription::unsetSuggestedNumberOfDlPackets() {
  m_SuggestedNumberOfDlPacketsIsSet = false;
}
bool MonitoringEventSubscription::isIdleStatusIndication() const {
  return m_IdleStatusIndication;
}
void MonitoringEventSubscription::setIdleStatusIndication(bool const value) {
  m_IdleStatusIndication      = value;
  m_IdleStatusIndicationIsSet = true;
}
bool MonitoringEventSubscription::idleStatusIndicationIsSet() const {
  return m_IdleStatusIndicationIsSet;
}
void MonitoringEventSubscription::unsetIdleStatusIndication() {
  m_IdleStatusIndicationIsSet = false;
}
LocationType MonitoringEventSubscription::getLocationType() const {
  return m_LocationType;
}
void MonitoringEventSubscription::setLocationType(LocationType const& value) {
  m_LocationType      = value;
  m_LocationTypeIsSet = true;
}
bool MonitoringEventSubscription::locationTypeIsSet() const {
  return m_LocationTypeIsSet;
}
void MonitoringEventSubscription::unsetLocationType() {
  m_LocationTypeIsSet = false;
}
Accuracy MonitoringEventSubscription::getAccuracy() const {
  return m_Accuracy;
}
void MonitoringEventSubscription::setAccuracy(Accuracy const& value) {
  m_Accuracy      = value;
  m_AccuracyIsSet = true;
}
bool MonitoringEventSubscription::accuracyIsSet() const {
  return m_AccuracyIsSet;
}
void MonitoringEventSubscription::unsetAccuracy() {
  m_AccuracyIsSet = false;
}
int32_t MonitoringEventSubscription::getMinimumReportInterval() const {
  return m_MinimumReportInterval;
}
void MonitoringEventSubscription::setMinimumReportInterval(
    int32_t const value) {
  m_MinimumReportInterval      = value;
  m_MinimumReportIntervalIsSet = true;
}
bool MonitoringEventSubscription::minimumReportIntervalIsSet() const {
  return m_MinimumReportIntervalIsSet;
}
void MonitoringEventSubscription::unsetMinimumReportInterval() {
  m_MinimumReportIntervalIsSet = false;
}
int32_t MonitoringEventSubscription::getMaxRptExpireIntvl() const {
  return m_MaxRptExpireIntvl;
}
void MonitoringEventSubscription::setMaxRptExpireIntvl(int32_t const value) {
  m_MaxRptExpireIntvl      = value;
  m_MaxRptExpireIntvlIsSet = true;
}
bool MonitoringEventSubscription::maxRptExpireIntvlIsSet() const {
  return m_MaxRptExpireIntvlIsSet;
}
void MonitoringEventSubscription::unsetMaxRptExpireIntvl() {
  m_MaxRptExpireIntvlIsSet = false;
}
int32_t MonitoringEventSubscription::getSamplingInterval() const {
  return m_SamplingInterval;
}
void MonitoringEventSubscription::setSamplingInterval(int32_t const value) {
  m_SamplingInterval      = value;
  m_SamplingIntervalIsSet = true;
}
bool MonitoringEventSubscription::samplingIntervalIsSet() const {
  return m_SamplingIntervalIsSet;
}
void MonitoringEventSubscription::unsetSamplingInterval() {
  m_SamplingIntervalIsSet = false;
}
bool MonitoringEventSubscription::isReportingLocEstInd() const {
  return m_ReportingLocEstInd;
}
void MonitoringEventSubscription::setReportingLocEstInd(bool const value) {
  m_ReportingLocEstInd      = value;
  m_ReportingLocEstIndIsSet = true;
}
bool MonitoringEventSubscription::reportingLocEstIndIsSet() const {
  return m_ReportingLocEstIndIsSet;
}
void MonitoringEventSubscription::unsetReportingLocEstInd() {
  m_ReportingLocEstIndIsSet = false;
}
int32_t MonitoringEventSubscription::getLinearDistance() const {
  return m_LinearDistance;
}
void MonitoringEventSubscription::setLinearDistance(int32_t const value) {
  m_LinearDistance      = value;
  m_LinearDistanceIsSet = true;
}
bool MonitoringEventSubscription::linearDistanceIsSet() const {
  return m_LinearDistanceIsSet;
}
void MonitoringEventSubscription::unsetLinearDistance() {
  m_LinearDistanceIsSet = false;
}
LocationQoS MonitoringEventSubscription::getLocQoS() const {
  return m_LocQoS;
}
void MonitoringEventSubscription::setLocQoS(LocationQoS const& value) {
  m_LocQoS      = value;
  m_LocQoSIsSet = true;
}
bool MonitoringEventSubscription::locQoSIsSet() const {
  return m_LocQoSIsSet;
}
void MonitoringEventSubscription::unsetLocQoS() {
  m_LocQoSIsSet = false;
}
std::string MonitoringEventSubscription::getSvcId() const {
  return m_SvcId;
}
void MonitoringEventSubscription::setSvcId(std::string const& value) {
  m_SvcId      = value;
  m_SvcIdIsSet = true;
}
bool MonitoringEventSubscription::svcIdIsSet() const {
  return m_SvcIdIsSet;
}
void MonitoringEventSubscription::unsetSvcId() {
  m_SvcIdIsSet = false;
}
LdrType MonitoringEventSubscription::getLdrType() const {
  return m_LdrType;
}
void MonitoringEventSubscription::setLdrType(LdrType const& value) {
  m_LdrType      = value;
  m_LdrTypeIsSet = true;
}
bool MonitoringEventSubscription::ldrTypeIsSet() const {
  return m_LdrTypeIsSet;
}
void MonitoringEventSubscription::unsetLdrType() {
  m_LdrTypeIsSet = false;
}
VelocityRequested MonitoringEventSubscription::getVelocityRequested() const {
  return m_VelocityRequested;
}
void MonitoringEventSubscription::setVelocityRequested(
    VelocityRequested const& value) {
  m_VelocityRequested      = value;
  m_VelocityRequestedIsSet = true;
}
bool MonitoringEventSubscription::velocityRequestedIsSet() const {
  return m_VelocityRequestedIsSet;
}
void MonitoringEventSubscription::unsetVelocityRequested() {
  m_VelocityRequestedIsSet = false;
}
int32_t MonitoringEventSubscription::getMaxAgeOfLocEst() const {
  return m_MaxAgeOfLocEst;
}
void MonitoringEventSubscription::setMaxAgeOfLocEst(int32_t const value) {
  m_MaxAgeOfLocEst      = value;
  m_MaxAgeOfLocEstIsSet = true;
}
bool MonitoringEventSubscription::maxAgeOfLocEstIsSet() const {
  return m_MaxAgeOfLocEstIsSet;
}
void MonitoringEventSubscription::unsetMaxAgeOfLocEst() {
  m_MaxAgeOfLocEstIsSet = false;
}
TimeWindow MonitoringEventSubscription::getLocTimeWindow() const {
  return m_LocTimeWindow;
}
void MonitoringEventSubscription::setLocTimeWindow(TimeWindow const& value) {
  m_LocTimeWindow      = value;
  m_LocTimeWindowIsSet = true;
}
bool MonitoringEventSubscription::locTimeWindowIsSet() const {
  return m_LocTimeWindowIsSet;
}
void MonitoringEventSubscription::unsetLocTimeWindow() {
  m_LocTimeWindowIsSet = false;
}
std::vector<SupportedGADShapes>
MonitoringEventSubscription::getSupportedGADShapes() const {
  return m_SupportedGADShapes;
}
void MonitoringEventSubscription::setSupportedGADShapes(
    std::vector<SupportedGADShapes> const& value) {
  m_SupportedGADShapes      = value;
  m_SupportedGADShapesIsSet = true;
}
bool MonitoringEventSubscription::supportedGADShapesIsSet() const {
  return m_SupportedGADShapesIsSet;
}
void MonitoringEventSubscription::unsetSupportedGADShapes() {
  m_SupportedGADShapesIsSet = false;
}
std::string MonitoringEventSubscription::getCodeWord() const {
  return m_CodeWord;
}
void MonitoringEventSubscription::setCodeWord(std::string const& value) {
  m_CodeWord      = value;
  m_CodeWordIsSet = true;
}
bool MonitoringEventSubscription::codeWordIsSet() const {
  return m_CodeWordIsSet;
}
void MonitoringEventSubscription::unsetCodeWord() {
  m_CodeWordIsSet = false;
}
AssociationType MonitoringEventSubscription::getAssociationType() const {
  return m_AssociationType;
}
void MonitoringEventSubscription::setAssociationType(
    AssociationType const& value) {
  m_AssociationType      = value;
  m_AssociationTypeIsSet = true;
}
bool MonitoringEventSubscription::associationTypeIsSet() const {
  return m_AssociationTypeIsSet;
}
void MonitoringEventSubscription::unsetAssociationType() {
  m_AssociationTypeIsSet = false;
}
bool MonitoringEventSubscription::isPlmnIndication() const {
  return m_PlmnIndication;
}
void MonitoringEventSubscription::setPlmnIndication(bool const value) {
  m_PlmnIndication      = value;
  m_PlmnIndicationIsSet = true;
}
bool MonitoringEventSubscription::plmnIndicationIsSet() const {
  return m_PlmnIndicationIsSet;
}
void MonitoringEventSubscription::unsetPlmnIndication() {
  m_PlmnIndicationIsSet = false;
}
LocationArea MonitoringEventSubscription::getLocationArea() const {
  return m_LocationArea;
}
void MonitoringEventSubscription::setLocationArea(LocationArea const& value) {
  m_LocationArea      = value;
  m_LocationAreaIsSet = true;
}
bool MonitoringEventSubscription::locationAreaIsSet() const {
  return m_LocationAreaIsSet;
}
void MonitoringEventSubscription::unsetLocationArea() {
  m_LocationAreaIsSet = false;
}
LocationArea5G MonitoringEventSubscription::getLocationArea5G() const {
  return m_LocationArea5G;
}
void MonitoringEventSubscription::setLocationArea5G(
    LocationArea5G const& value) {
  m_LocationArea5G      = value;
  m_LocationArea5GIsSet = true;
}
bool MonitoringEventSubscription::locationArea5GIsSet() const {
  return m_LocationArea5GIsSet;
}
void MonitoringEventSubscription::unsetLocationArea5G() {
  m_LocationArea5GIsSet = false;
}
std::vector<DddTrafficDescriptor>
MonitoringEventSubscription::getDddTraDescriptors() const {
  return m_DddTraDescriptors;
}
void MonitoringEventSubscription::setDddTraDescriptors(
    std::vector<DddTrafficDescriptor> const& value) {
  m_DddTraDescriptors      = value;
  m_DddTraDescriptorsIsSet = true;
}
bool MonitoringEventSubscription::dddTraDescriptorsIsSet() const {
  return m_DddTraDescriptorsIsSet;
}
void MonitoringEventSubscription::unsetDddTraDescriptors() {
  m_DddTraDescriptorsIsSet = false;
}
std::vector<DlDataDeliveryStatus> MonitoringEventSubscription::getDddStati()
    const {
  return m_DddStati;
}
void MonitoringEventSubscription::setDddStati(
    std::vector<DlDataDeliveryStatus> const& value) {
  m_DddStati      = value;
  m_DddStatiIsSet = true;
}
bool MonitoringEventSubscription::dddStatiIsSet() const {
  return m_DddStatiIsSet;
}
void MonitoringEventSubscription::unsetDddStati() {
  m_DddStatiIsSet = false;
}
std::vector<std::string> MonitoringEventSubscription::getApiNames() const {
  return m_ApiNames;
}
void MonitoringEventSubscription::setApiNames(
    std::vector<std::string> const& value) {
  m_ApiNames      = value;
  m_ApiNamesIsSet = true;
}
bool MonitoringEventSubscription::apiNamesIsSet() const {
  return m_ApiNamesIsSet;
}
void MonitoringEventSubscription::unsetApiNames() {
  m_ApiNamesIsSet = false;
}
MonitoringEventReport MonitoringEventSubscription::getMonitoringEventReport()
    const {
  return m_MonitoringEventReport;
}
void MonitoringEventSubscription::setMonitoringEventReport(
    MonitoringEventReport const& value) {
  m_MonitoringEventReport      = value;
  m_MonitoringEventReportIsSet = true;
}
bool MonitoringEventSubscription::monitoringEventReportIsSet() const {
  return m_MonitoringEventReportIsSet;
}
void MonitoringEventSubscription::unsetMonitoringEventReport() {
  m_MonitoringEventReportIsSet = false;
}
Snssai MonitoringEventSubscription::getSnssai() const {
  return m_Snssai;
}
void MonitoringEventSubscription::setSnssai(Snssai const& value) {
  m_Snssai      = value;
  m_SnssaiIsSet = true;
}
bool MonitoringEventSubscription::snssaiIsSet() const {
  return m_SnssaiIsSet;
}
void MonitoringEventSubscription::unsetSnssai() {
  m_SnssaiIsSet = false;
}
SACInfo MonitoringEventSubscription::getTgtNsThreshold() const {
  return m_TgtNsThreshold;
}
void MonitoringEventSubscription::setTgtNsThreshold(SACInfo const& value) {
  m_TgtNsThreshold      = value;
  m_TgtNsThresholdIsSet = true;
}
bool MonitoringEventSubscription::tgtNsThresholdIsSet() const {
  return m_TgtNsThresholdIsSet;
}
void MonitoringEventSubscription::unsetTgtNsThreshold() {
  m_TgtNsThresholdIsSet = false;
}
bool MonitoringEventSubscription::isImmediateRep() const {
  return m_ImmediateRep;
}
void MonitoringEventSubscription::setImmediateRep(bool const value) {
  m_ImmediateRep      = value;
  m_ImmediateRepIsSet = true;
}
bool MonitoringEventSubscription::immediateRepIsSet() const {
  return m_ImmediateRepIsSet;
}
void MonitoringEventSubscription::unsetImmediateRep() {
  m_ImmediateRepIsSet = false;
}
UavPolicy MonitoringEventSubscription::getUavPolicy() const {
  return m_UavPolicy;
}
void MonitoringEventSubscription::setUavPolicy(UavPolicy const& value) {
  m_UavPolicy      = value;
  m_UavPolicyIsSet = true;
}
bool MonitoringEventSubscription::uavPolicyIsSet() const {
  return m_UavPolicyIsSet;
}
void MonitoringEventSubscription::unsetUavPolicy() {
  m_UavPolicyIsSet = false;
}
bool MonitoringEventSubscription::isSesEstInd() const {
  return m_SesEstInd;
}
void MonitoringEventSubscription::setSesEstInd(bool const value) {
  m_SesEstInd      = value;
  m_SesEstIndIsSet = true;
}
bool MonitoringEventSubscription::sesEstIndIsSet() const {
  return m_SesEstIndIsSet;
}
void MonitoringEventSubscription::unsetSesEstInd() {
  m_SesEstIndIsSet = false;
}
SubType MonitoringEventSubscription::getSubType() const {
  return m_SubType;
}
void MonitoringEventSubscription::setSubType(SubType const& value) {
  m_SubType      = value;
  m_SubTypeIsSet = true;
}
bool MonitoringEventSubscription::subTypeIsSet() const {
  return m_SubTypeIsSet;
}
void MonitoringEventSubscription::unsetSubType() {
  m_SubTypeIsSet = false;
}
std::vector<MonitoringType> MonitoringEventSubscription::getAddnMonTypes()
    const {
  return m_AddnMonTypes;
}
void MonitoringEventSubscription::setAddnMonTypes(
    std::vector<MonitoringType> const& value) {
  m_AddnMonTypes      = value;
  m_AddnMonTypesIsSet = true;
}
bool MonitoringEventSubscription::addnMonTypesIsSet() const {
  return m_AddnMonTypesIsSet;
}
void MonitoringEventSubscription::unsetAddnMonTypes() {
  m_AddnMonTypesIsSet = false;
}
std::vector<MonitoringEventReport>
MonitoringEventSubscription::getAddnMonEventReports() const {
  return m_AddnMonEventReports;
}
void MonitoringEventSubscription::setAddnMonEventReports(
    std::vector<MonitoringEventReport> const& value) {
  m_AddnMonEventReports      = value;
  m_AddnMonEventReportsIsSet = true;
}
bool MonitoringEventSubscription::addnMonEventReportsIsSet() const {
  return m_AddnMonEventReportsIsSet;
}
void MonitoringEventSubscription::unsetAddnMonEventReports() {
  m_AddnMonEventReportsIsSet = false;
}

}  // namespace oai::nef::model
