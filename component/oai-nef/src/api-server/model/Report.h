/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Report.h
 *
 *
 */

#ifndef Report_H_
#define Report_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ChangeOfSupiPeiAssociationReport.h"
#include "CmInfo.h"
#include "CmInfoReport.h"
#include "CnType.h"
#include "CnTypeChangeReport.h"
#include "PlmnId.h"
#include "RoamingStatusReport.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class Report {
 public:
  Report();
  virtual ~Report() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const Report& rhs) const;
  bool operator!=(const Report& rhs) const;

  /////////////////////////////////////////////
  /// Report members

  /// <summary>
  ///
  /// </summary>
  std::string getNewPei() const;
  void setNewPei(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  bool isRoaming() const;
  void setRoaming(bool const value);
  /// <summary>
  ///
  /// </summary>
  PlmnId getNewServingPlmn() const;
  void setNewServingPlmn(PlmnId const& value);
  /// <summary>
  ///
  /// </summary>
  CnType getNewCnType() const;
  void setNewCnType(CnType const& value);
  /// <summary>
  ///
  /// </summary>
  CnType getOldCnType() const;
  void setOldCnType(CnType const& value);
  bool oldCnTypeIsSet() const;
  void unsetOldCnType();
  /// <summary>
  ///
  /// </summary>
  std::vector<CmInfo> getOldCmInfoList() const;
  void setOldCmInfoList(std::vector<CmInfo> const& value);
  bool oldCmInfoListIsSet() const;
  void unsetOldCmInfoList();
  /// <summary>
  ///
  /// </summary>
  std::vector<CmInfo> getNewCmInfoList() const;
  void setNewCmInfoList(std::vector<CmInfo> const& value);

  friend void to_json(nlohmann::json& j, const Report& o);
  friend void from_json(const nlohmann::json& j, Report& o);

 protected:
  std::string m_NewPei;

  bool m_Roaming;

  PlmnId m_NewServingPlmn;

  CnType m_NewCnType;

  CnType m_OldCnType;
  bool m_OldCnTypeIsSet;
  std::vector<CmInfo> m_OldCmInfoList;
  bool m_OldCmInfoListIsSet;
  std::vector<CmInfo> m_NewCmInfoList;
};

}  // namespace oai::nef::model

#endif /* Report_H_ */
