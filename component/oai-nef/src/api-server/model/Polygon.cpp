/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Polygon.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

Polygon::Polygon() {}

void Polygon::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool Polygon::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Polygon::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "Polygon" : pathPrefix;

  /* PointList */ {
    const std::vector<GeographicalCoordinates>& value = m_PointList;
    const std::string currentValuePath = _pathPrefix + ".pointList";

    if (value.size() < 3) {
      success = false;
      msg << currentValuePath << ": must have at least 3 elements;";
    }
    if (value.size() > 15) {
      success = false;
      msg << currentValuePath << ": must have at most 15 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const GeographicalCoordinates& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".pointList") && success;

        i++;
      }
    }
  }

  return success;
}

bool Polygon::operator==(const Polygon& rhs) const {
  return

      (getShape() == rhs.getShape()) &&

      (getPointList() == rhs.getPointList())

          ;
}

bool Polygon::operator!=(const Polygon& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Polygon& o) {
  j              = nlohmann::json();
  j["shape"]     = o.m_Shape;
  j["pointList"] = o.m_PointList;
}

void from_json(const nlohmann::json& j, Polygon& o) {
  j.at("shape").get_to(o.m_Shape);
  j.at("pointList").get_to(o.m_PointList);
}

SupportedGADShapes Polygon::getShape() const {
  return m_Shape;
}
void Polygon::setShape(SupportedGADShapes const& value) {
  m_Shape = value;
}
std::vector<GeographicalCoordinates> Polygon::getPointList() const {
  return m_PointList;
}
void Polygon::setPointList(std::vector<GeographicalCoordinates> const& value) {
  m_PointList = value;
}

}  // namespace oai::nef::model
