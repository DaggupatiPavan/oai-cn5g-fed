/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ConfigResult.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

ConfigResult::ConfigResult() {
  m_ExternalIdsIsSet = false;
  m_MsisdnsIsSet     = false;
}

void ConfigResult::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool ConfigResult::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ConfigResult::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ConfigResult" : pathPrefix;

  if (externalIdsIsSet()) {
    const std::vector<std::string>& value = m_ExternalIds;
    const std::string currentValuePath    = _pathPrefix + ".externalIds";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (msisdnsIsSet()) {
    const std::vector<std::string>& value = m_Msisdns;
    const std::string currentValuePath    = _pathPrefix + ".msisdns";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool ConfigResult::operator==(const ConfigResult& rhs) const {
  return

      ((!externalIdsIsSet() && !rhs.externalIdsIsSet()) ||
       (externalIdsIsSet() && rhs.externalIdsIsSet() &&
        getExternalIds() == rhs.getExternalIds())) &&

      ((!msisdnsIsSet() && !rhs.msisdnsIsSet()) ||
       (msisdnsIsSet() && rhs.msisdnsIsSet() &&
        getMsisdns() == rhs.getMsisdns())) &&

      (getResultReason() == rhs.getResultReason())

          ;
}

bool ConfigResult::operator!=(const ConfigResult& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConfigResult& o) {
  j = nlohmann::json();
  if (o.externalIdsIsSet() || !o.m_ExternalIds.empty())
    j["externalIds"] = o.m_ExternalIds;
  if (o.msisdnsIsSet() || !o.m_Msisdns.empty()) j["msisdns"] = o.m_Msisdns;
  j["resultReason"] = o.m_ResultReason;
}

void from_json(const nlohmann::json& j, ConfigResult& o) {
  if (j.find("externalIds") != j.end()) {
    j.at("externalIds").get_to(o.m_ExternalIds);
    o.m_ExternalIdsIsSet = true;
  }
  if (j.find("msisdns") != j.end()) {
    j.at("msisdns").get_to(o.m_Msisdns);
    o.m_MsisdnsIsSet = true;
  }
  j.at("resultReason").get_to(o.m_ResultReason);
}

std::vector<std::string> ConfigResult::getExternalIds() const {
  return m_ExternalIds;
}
void ConfigResult::setExternalIds(std::vector<std::string> const& value) {
  m_ExternalIds      = value;
  m_ExternalIdsIsSet = true;
}
bool ConfigResult::externalIdsIsSet() const {
  return m_ExternalIdsIsSet;
}
void ConfigResult::unsetExternalIds() {
  m_ExternalIdsIsSet = false;
}
std::vector<std::string> ConfigResult::getMsisdns() const {
  return m_Msisdns;
}
void ConfigResult::setMsisdns(std::vector<std::string> const& value) {
  m_Msisdns      = value;
  m_MsisdnsIsSet = true;
}
bool ConfigResult::msisdnsIsSet() const {
  return m_MsisdnsIsSet;
}
void ConfigResult::unsetMsisdns() {
  m_MsisdnsIsSet = false;
}
ResultReason ConfigResult::getResultReason() const {
  return m_ResultReason;
}
void ConfigResult::setResultReason(ResultReason const& value) {
  m_ResultReason = value;
}

}  // namespace oai::nef::model
