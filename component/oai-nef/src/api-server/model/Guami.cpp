/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Guami.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

Guami::Guami() {
  m_AmfId = "";
}

void Guami::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool Guami::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Guami::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "Guami" : pathPrefix;

  /* AmfId */ {
    const std::string& value           = m_AmfId;
    const std::string currentValuePath = _pathPrefix + ".amfId";
  }

  return success;
}

bool Guami::operator==(const Guami& rhs) const {
  return

      (getPlmnId() == rhs.getPlmnId()) &&

      (getAmfId() == rhs.getAmfId())

          ;
}

bool Guami::operator!=(const Guami& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Guami& o) {
  j           = nlohmann::json();
  j["plmnId"] = o.m_PlmnId;
  j["amfId"]  = o.m_AmfId;
}

void from_json(const nlohmann::json& j, Guami& o) {
  j.at("plmnId").get_to(o.m_PlmnId);
  j.at("amfId").get_to(o.m_AmfId);
}

PlmnIdNid Guami::getPlmnId() const {
  return m_PlmnId;
}
void Guami::setPlmnId(PlmnIdNid const& value) {
  m_PlmnId = value;
}
std::string Guami::getAmfId() const {
  return m_AmfId;
}
void Guami::setAmfId(std::string const& value) {
  m_AmfId = value;
}

}  // namespace oai::nef::model
