/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PointUncertaintyCircle_allOf.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

PointUncertaintyCircle_allOf::PointUncertaintyCircle_allOf() {
  m_Uncertainty = 0.0f;
}

void PointUncertaintyCircle_allOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool PointUncertaintyCircle_allOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PointUncertaintyCircle_allOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PointUncertaintyCircle_allOf" : pathPrefix;

  /* Uncertainty */ {
    const float& value                 = m_Uncertainty;
    const std::string currentValuePath = _pathPrefix + ".uncertainty";

    if (value < static_cast<float>(0)) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  return success;
}

bool PointUncertaintyCircle_allOf::operator==(
    const PointUncertaintyCircle_allOf& rhs) const {
  return

      (getPoint() == rhs.getPoint()) &&

      (getUncertainty() == rhs.getUncertainty())

          ;
}

bool PointUncertaintyCircle_allOf::operator!=(
    const PointUncertaintyCircle_allOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PointUncertaintyCircle_allOf& o) {
  j                = nlohmann::json();
  j["point"]       = o.m_Point;
  j["uncertainty"] = o.m_Uncertainty;
}

void from_json(const nlohmann::json& j, PointUncertaintyCircle_allOf& o) {
  j.at("point").get_to(o.m_Point);
  j.at("uncertainty").get_to(o.m_Uncertainty);
}

GeographicalCoordinates PointUncertaintyCircle_allOf::getPoint() const {
  return m_Point;
}
void PointUncertaintyCircle_allOf::setPoint(
    GeographicalCoordinates const& value) {
  m_Point = value;
}
float PointUncertaintyCircle_allOf::getUncertainty() const {
  return m_Uncertainty;
}
void PointUncertaintyCircle_allOf::setUncertainty(float const value) {
  m_Uncertainty = value;
}

}  // namespace oai::nef::model
