/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IdleStatusInfo.h
 *
 * Represents the information relevant to when the UE transitions into idle
 * mode.
 */

#ifndef IdleStatusInfo_H_
#define IdleStatusInfo_H_

#include <nlohmann/json.hpp>
#include <string>

namespace oai::nef::model {

/// <summary>
/// Represents the information relevant to when the UE transitions into idle
/// mode.
/// </summary>
class IdleStatusInfo {
 public:
  IdleStatusInfo();
  virtual ~IdleStatusInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const IdleStatusInfo& rhs) const;
  bool operator!=(const IdleStatusInfo& rhs) const;

  /////////////////////////////////////////////
  /// IdleStatusInfo members

  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getActiveTime() const;
  void setActiveTime(int32_t const value);
  bool activeTimeIsSet() const;
  void unsetActiveTime();
  /// <summary>
  ///
  /// </summary>
  float getEdrxCycleLength() const;
  void setEdrxCycleLength(float const value);
  bool edrxCycleLengthIsSet() const;
  void unsetEdrxCycleLength();
  /// <summary>
  /// Identifies the number of packets shall be buffered in the serving gateway.
  /// It shall be present if the idle status indication is requested by the
  /// SCS/AS with \&quot;idleStatusIndication\&quot; in the
  /// \&quot;monitoringEventSubscription\&quot; sets to \&quot;true\&quot;.
  /// </summary>
  int32_t getSuggestedNumberOfDlPackets() const;
  void setSuggestedNumberOfDlPackets(int32_t const value);
  bool suggestedNumberOfDlPacketsIsSet() const;
  void unsetSuggestedNumberOfDlPackets();
  /// <summary>
  /// string with format \&quot;date-time\&quot; as defined in OpenAPI.
  /// </summary>
  std::string getIdleStatusTimestamp() const;
  void setIdleStatusTimestamp(std::string const& value);
  bool idleStatusTimestampIsSet() const;
  void unsetIdleStatusTimestamp();
  /// <summary>
  /// Unsigned integer identifying a period of time in units of seconds.
  /// </summary>
  int32_t getPeriodicAUTimer() const;
  void setPeriodicAUTimer(int32_t const value);
  bool periodicAUTimerIsSet() const;
  void unsetPeriodicAUTimer();

  friend void to_json(nlohmann::json& j, const IdleStatusInfo& o);
  friend void from_json(const nlohmann::json& j, IdleStatusInfo& o);

 protected:
  int32_t m_ActiveTime;
  bool m_ActiveTimeIsSet;
  float m_EdrxCycleLength;
  bool m_EdrxCycleLengthIsSet;
  int32_t m_SuggestedNumberOfDlPackets;
  bool m_SuggestedNumberOfDlPacketsIsSet;
  std::string m_IdleStatusTimestamp;
  bool m_IdleStatusTimestampIsSet;
  int32_t m_PeriodicAUTimer;
  bool m_PeriodicAUTimerIsSet;
};

}  // namespace oai::nef::model

#endif /* IdleStatusInfo_H_ */
