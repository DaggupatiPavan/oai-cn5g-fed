/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * TrafficInfluSubPatch.h
 *
 *
 */

#ifndef TrafficInfluSubPatch_H_
#define TrafficInfluSubPatch_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "EthFlowDescription.h"
#include "FlowInfo.h"
#include "RouteToLocation.h"
#include "TemporalValidity.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class TrafficInfluSubPatch {
 public:
  TrafficInfluSubPatch();
  virtual ~TrafficInfluSubPatch() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const TrafficInfluSubPatch& rhs) const;
  bool operator!=(const TrafficInfluSubPatch& rhs) const;

  /////////////////////////////////////////////
  /// TrafficInfluSubPatch members

  /// <summary>
  /// Identifies whether an application can be relocated once a location of the
  /// application has been selected.
  /// </summary>
  bool isAppReloInd() const;
  void setAppReloInd(bool const value);
  bool appReloIndIsSet() const;
  void unsetAppReloInd();
  /// <summary>
  /// Identifies IP packet filters.
  /// </summary>
  std::vector<FlowInfo> getTrafficFilters() const;
  void setTrafficFilters(std::vector<FlowInfo> const& value);
  bool trafficFiltersIsSet() const;
  void unsetTrafficFilters();
  /// <summary>
  /// Identifies Ethernet packet filters.
  /// </summary>
  std::vector<EthFlowDescription> getEthTrafficFilters() const;
  void setEthTrafficFilters(std::vector<EthFlowDescription> const& value);
  bool ethTrafficFiltersIsSet() const;
  void unsetEthTrafficFilters();
  /// <summary>
  /// Identifies the N6 traffic routing requirement.
  /// </summary>
  std::vector<RouteToLocation> getTrafficRoutes() const;
  void setTrafficRoutes(std::vector<RouteToLocation> const& value);
  bool trafficRoutesIsSet() const;
  void unsetTrafficRoutes();
  /// <summary>
  ///
  /// </summary>
  bool isTfcCorrInd() const;
  void setTfcCorrInd(bool const value);
  bool tfcCorrIndIsSet() const;
  void unsetTfcCorrInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<TemporalValidity> getTempValidities() const;
  void setTempValidities(std::vector<TemporalValidity> const& value);
  bool tempValiditiesIsSet() const;
  void unsetTempValidities();
  /// <summary>
  /// Identifies a geographic zone that the AF request applies only to the
  /// traffic of UE(s) located in this specific zone.
  /// </summary>
  std::vector<std::string> getValidGeoZoneIds() const;
  void setValidGeoZoneIds(std::vector<std::string> const& value);
  bool validGeoZoneIdsIsSet() const;
  void unsetValidGeoZoneIds();
  /// <summary>
  ///
  /// </summary>
  bool isAfAckInd() const;
  void setAfAckInd(bool const value);
  bool afAckIndIsSet() const;
  void unsetAfAckInd();
  /// <summary>
  ///
  /// </summary>
  bool isAddrPreserInd() const;
  void setAddrPreserInd(bool const value);
  bool addrPreserIndIsSet() const;
  void unsetAddrPreserInd();

  friend void to_json(nlohmann::json& j, const TrafficInfluSubPatch& o);
  friend void from_json(const nlohmann::json& j, TrafficInfluSubPatch& o);

 protected:
  bool m_AppReloInd;
  bool m_AppReloIndIsSet;
  std::vector<FlowInfo> m_TrafficFilters;
  bool m_TrafficFiltersIsSet;
  std::vector<EthFlowDescription> m_EthTrafficFilters;
  bool m_EthTrafficFiltersIsSet;
  std::vector<RouteToLocation> m_TrafficRoutes;
  bool m_TrafficRoutesIsSet;
  bool m_TfcCorrInd;
  bool m_TfcCorrIndIsSet;
  std::vector<TemporalValidity> m_TempValidities;
  bool m_TempValiditiesIsSet;
  std::vector<std::string> m_ValidGeoZoneIds;
  bool m_ValidGeoZoneIdsIsSet;
  bool m_AfAckInd;
  bool m_AfAckIndIsSet;
  bool m_AddrPreserInd;
  bool m_AddrPreserIndIsSet;
};

}  // namespace oai::nef::model

#endif /* TrafficInfluSubPatch_H_ */
