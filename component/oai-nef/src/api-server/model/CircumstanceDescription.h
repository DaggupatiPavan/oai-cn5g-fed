/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CircumstanceDescription.h
 *
 *
 */

#ifndef CircumstanceDescription_H_
#define CircumstanceDescription_H_

#include <nlohmann/json.hpp>
#include <string>

#include "NetworkAreaInfo.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class CircumstanceDescription {
 public:
  CircumstanceDescription();
  virtual ~CircumstanceDescription() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const CircumstanceDescription& rhs) const;
  bool operator!=(const CircumstanceDescription& rhs) const;

  /////////////////////////////////////////////
  /// CircumstanceDescription members

  /// <summary>
  ///
  /// </summary>
  float getFreq() const;
  void setFreq(float const value);
  bool freqIsSet() const;
  void unsetFreq();
  /// <summary>
  ///
  /// </summary>
  std::string getTm() const;
  void setTm(std::string const& value);
  bool tmIsSet() const;
  void unsetTm();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo getLocArea() const;
  void setLocArea(NetworkAreaInfo const& value);
  bool locAreaIsSet() const;
  void unsetLocArea();
  /// <summary>
  /// Unsigned integer identifying a volume in units of bytes.
  /// </summary>
  int64_t getVol() const;
  void setVol(int64_t const value);
  bool volIsSet() const;
  void unsetVol();

  friend void to_json(nlohmann::json& j, const CircumstanceDescription& o);
  friend void from_json(const nlohmann::json& j, CircumstanceDescription& o);

 protected:
  float m_Freq;
  bool m_FreqIsSet;
  std::string m_Tm;
  bool m_TmIsSet;
  NetworkAreaInfo m_LocArea;
  bool m_LocAreaIsSet;
  int64_t m_Vol;
  bool m_VolIsSet;
};

}  // namespace oai::nef::model

#endif /* CircumstanceDescription_H_ */
