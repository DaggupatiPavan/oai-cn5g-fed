/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PdnType.h
 *
 * Possible values are - IPV4: PDN connection of IPv4 type. - IPV6: PDN
 * connection of IPv6 type. - IPV4V6: PDN connection of IPv4v6 type. - NON_IP:
 * PDN connection of non-IP type. - ETHERNET: PDN connection of Ethernet type.
 */

#ifndef PdnType_H_
#define PdnType_H_

#include <nlohmann/json.hpp>

#include "PdnType_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - IPV4: PDN connection of IPv4 type. - IPV6: PDN
/// connection of IPv6 type. - IPV4V6: PDN connection of IPv4v6 type. - NON_IP:
/// PDN connection of non-IP type. - ETHERNET: PDN connection of Ethernet type.
/// </summary>
class PdnType {
 public:
  PdnType();
  virtual ~PdnType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const PdnType& rhs) const;
  bool operator!=(const PdnType& rhs) const;

  /////////////////////////////////////////////
  /// PdnType members

  PdnType_anyOf getValue() const;
  void setValue(PdnType_anyOf value);
  PdnType_anyOf::ePdnType_anyOf getEnumValue() const;
  void setEnumValue(PdnType_anyOf::ePdnType_anyOf value);
  friend void to_json(nlohmann::json& j, const PdnType& o);
  friend void from_json(const nlohmann::json& j, PdnType& o);
  friend void to_json(nlohmann::json& j, const PdnType_anyOf& o);
  friend void from_json(const nlohmann::json& j, PdnType_anyOf& o);

 protected:
  PdnType_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* PdnType_H_ */
