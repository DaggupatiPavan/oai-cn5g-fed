/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ExceptionTrend.h
 *
 * Possible values are   - UP: Up trend of the exception level.   - DOWN: Down
 * trend of the exception level.   - UNKNOW: Unknown trend of the exception
 * level.   - STABLE: Stable trend of the exception level.
 */

#ifndef ExceptionTrend_H_
#define ExceptionTrend_H_

#include <nlohmann/json.hpp>

#include "ExceptionTrend_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are   - UP: Up trend of the exception level.   - DOWN: Down
/// trend of the exception level.   - UNKNOW: Unknown trend of the exception
/// level.   - STABLE: Stable trend of the exception level.
/// </summary>
class ExceptionTrend {
 public:
  ExceptionTrend();
  virtual ~ExceptionTrend() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const ExceptionTrend& rhs) const;
  bool operator!=(const ExceptionTrend& rhs) const;

  /////////////////////////////////////////////
  /// ExceptionTrend members

  ExceptionTrend_anyOf getValue() const;
  void setValue(ExceptionTrend_anyOf value);
  ExceptionTrend_anyOf::eExceptionTrend_anyOf getEnumValue() const;
  void setEnumValue(ExceptionTrend_anyOf::eExceptionTrend_anyOf value);
  friend void to_json(nlohmann::json& j, const ExceptionTrend& o);
  friend void from_json(const nlohmann::json& j, ExceptionTrend& o);
  friend void to_json(nlohmann::json& j, const ExceptionTrend_anyOf& o);
  friend void from_json(const nlohmann::json& j, ExceptionTrend_anyOf& o);

 protected:
  ExceptionTrend_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* ExceptionTrend_H_ */
