/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitoringEventReport.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

MonitoringEventReport::MonitoringEventReport() {
  m_ImeiChangeIsSet            = false;
  m_ExternalId                 = "";
  m_ExternalIdIsSet            = false;
  m_IdleStatusInfoIsSet        = false;
  m_LocationInfoIsSet          = false;
  m_LocFailureCauseIsSet       = false;
  m_LossOfConnectReason        = 0;
  m_LossOfConnectReasonIsSet   = false;
  m_MaxUEAvailabilityTime      = "";
  m_MaxUEAvailabilityTimeIsSet = false;
  m_Msisdn                     = "";
  m_MsisdnIsSet                = false;
  m_UePerLocationReportIsSet   = false;
  m_PlmnIdIsSet                = false;
  m_ReachabilityTypeIsSet      = false;
  m_RoamingStatus              = false;
  m_RoamingStatusIsSet         = false;
  m_FailureCauseIsSet          = false;
  m_EventTime                  = "";
  m_EventTimeIsSet             = false;
  m_PdnConnInfoListIsSet       = false;
  m_DddStatusIsSet             = false;
  m_DddTrafDescriptorIsSet     = false;
  m_MaxWaitTime                = "";
  m_MaxWaitTimeIsSet           = false;
  m_ApiCapsIsSet               = false;
  m_NSStatusInfoIsSet          = false;
  m_ServLevelDevId             = "";
  m_ServLevelDevIdIsSet        = false;
  m_UavPresInd                 = false;
  m_UavPresIndIsSet            = false;
}

void MonitoringEventReport::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool MonitoringEventReport::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool MonitoringEventReport::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "MonitoringEventReport" : pathPrefix;

  if (pdnConnInfoListIsSet()) {
    const std::vector<PdnConnectionInformation>& value = m_PdnConnInfoList;
    const std::string currentValuePath = _pathPrefix + ".pdnConnInfoList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const PdnConnectionInformation& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".pdnConnInfoList") &&
                  success;

        i++;
      }
    }
  }

  if (apiCapsIsSet()) {
    const std::vector<ApiCapabilityInfo>& value = m_ApiCaps;
    const std::string currentValuePath          = _pathPrefix + ".apiCaps";

    if (value.size() < 0) {
      success = false;
      msg << currentValuePath << ": must have at least 0 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const ApiCapabilityInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".apiCaps") && success;

        i++;
      }
    }
  }

  return success;
}

bool MonitoringEventReport::operator==(const MonitoringEventReport& rhs) const {
  return

      ((!imeiChangeIsSet() && !rhs.imeiChangeIsSet()) ||
       (imeiChangeIsSet() && rhs.imeiChangeIsSet() &&
        getImeiChange() == rhs.getImeiChange())) &&

      ((!externalIdIsSet() && !rhs.externalIdIsSet()) ||
       (externalIdIsSet() && rhs.externalIdIsSet() &&
        getExternalId() == rhs.getExternalId())) &&

      ((!idleStatusInfoIsSet() && !rhs.idleStatusInfoIsSet()) ||
       (idleStatusInfoIsSet() && rhs.idleStatusInfoIsSet() &&
        getIdleStatusInfo() == rhs.getIdleStatusInfo())) &&

      ((!locationInfoIsSet() && !rhs.locationInfoIsSet()) ||
       (locationInfoIsSet() && rhs.locationInfoIsSet() &&
        getLocationInfo() == rhs.getLocationInfo())) &&

      ((!locFailureCauseIsSet() && !rhs.locFailureCauseIsSet()) ||
       (locFailureCauseIsSet() && rhs.locFailureCauseIsSet() &&
        getLocFailureCause() == rhs.getLocFailureCause())) &&

      ((!lossOfConnectReasonIsSet() && !rhs.lossOfConnectReasonIsSet()) ||
       (lossOfConnectReasonIsSet() && rhs.lossOfConnectReasonIsSet() &&
        getLossOfConnectReason() == rhs.getLossOfConnectReason())) &&

      ((!maxUEAvailabilityTimeIsSet() && !rhs.maxUEAvailabilityTimeIsSet()) ||
       (maxUEAvailabilityTimeIsSet() && rhs.maxUEAvailabilityTimeIsSet() &&
        getMaxUEAvailabilityTime() == rhs.getMaxUEAvailabilityTime())) &&

      ((!msisdnIsSet() && !rhs.msisdnIsSet()) ||
       (msisdnIsSet() && rhs.msisdnIsSet() &&
        getMsisdn() == rhs.getMsisdn())) &&

      (getMonitoringType() == rhs.getMonitoringType()) &&

      ((!uePerLocationReportIsSet() && !rhs.uePerLocationReportIsSet()) ||
       (uePerLocationReportIsSet() && rhs.uePerLocationReportIsSet() &&
        getUePerLocationReport() == rhs.getUePerLocationReport())) &&

      ((!plmnIdIsSet() && !rhs.plmnIdIsSet()) ||
       (plmnIdIsSet() && rhs.plmnIdIsSet() &&
        getPlmnId() == rhs.getPlmnId())) &&

      ((!reachabilityTypeIsSet() && !rhs.reachabilityTypeIsSet()) ||
       (reachabilityTypeIsSet() && rhs.reachabilityTypeIsSet() &&
        getReachabilityType() == rhs.getReachabilityType())) &&

      ((!roamingStatusIsSet() && !rhs.roamingStatusIsSet()) ||
       (roamingStatusIsSet() && rhs.roamingStatusIsSet() &&
        isRoamingStatus() == rhs.isRoamingStatus())) &&

      ((!failureCauseIsSet() && !rhs.failureCauseIsSet()) ||
       (failureCauseIsSet() && rhs.failureCauseIsSet() &&
        getFailureCause() == rhs.getFailureCause())) &&

      ((!eventTimeIsSet() && !rhs.eventTimeIsSet()) ||
       (eventTimeIsSet() && rhs.eventTimeIsSet() &&
        getEventTime() == rhs.getEventTime())) &&

      ((!pdnConnInfoListIsSet() && !rhs.pdnConnInfoListIsSet()) ||
       (pdnConnInfoListIsSet() && rhs.pdnConnInfoListIsSet() &&
        getPdnConnInfoList() == rhs.getPdnConnInfoList())) &&

      ((!dddStatusIsSet() && !rhs.dddStatusIsSet()) ||
       (dddStatusIsSet() && rhs.dddStatusIsSet() &&
        getDddStatus() == rhs.getDddStatus())) &&

      ((!dddTrafDescriptorIsSet() && !rhs.dddTrafDescriptorIsSet()) ||
       (dddTrafDescriptorIsSet() && rhs.dddTrafDescriptorIsSet() &&
        getDddTrafDescriptor() == rhs.getDddTrafDescriptor())) &&

      ((!maxWaitTimeIsSet() && !rhs.maxWaitTimeIsSet()) ||
       (maxWaitTimeIsSet() && rhs.maxWaitTimeIsSet() &&
        getMaxWaitTime() == rhs.getMaxWaitTime())) &&

      ((!apiCapsIsSet() && !rhs.apiCapsIsSet()) ||
       (apiCapsIsSet() && rhs.apiCapsIsSet() &&
        getApiCaps() == rhs.getApiCaps())) &&

      ((!nSStatusInfoIsSet() && !rhs.nSStatusInfoIsSet()) ||
       (nSStatusInfoIsSet() && rhs.nSStatusInfoIsSet() &&
        getNSStatusInfo() == rhs.getNSStatusInfo())) &&

      ((!servLevelDevIdIsSet() && !rhs.servLevelDevIdIsSet()) ||
       (servLevelDevIdIsSet() && rhs.servLevelDevIdIsSet() &&
        getServLevelDevId() == rhs.getServLevelDevId())) &&

      ((!uavPresIndIsSet() && !rhs.uavPresIndIsSet()) ||
       (uavPresIndIsSet() && rhs.uavPresIndIsSet() &&
        isUavPresInd() == rhs.isUavPresInd()))

          ;
}

bool MonitoringEventReport::operator!=(const MonitoringEventReport& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MonitoringEventReport& o) {
  j = nlohmann::json();
  if (o.imeiChangeIsSet()) j["imeiChange"] = o.m_ImeiChange;
  if (o.externalIdIsSet()) j["externalId"] = o.m_ExternalId;
  if (o.idleStatusInfoIsSet()) j["idleStatusInfo"] = o.m_IdleStatusInfo;
  if (o.locationInfoIsSet()) j["locationInfo"] = o.m_LocationInfo;
  if (o.locFailureCauseIsSet()) j["locFailureCause"] = o.m_LocFailureCause;
  if (o.lossOfConnectReasonIsSet())
    j["lossOfConnectReason"] = o.m_LossOfConnectReason;
  if (o.maxUEAvailabilityTimeIsSet())
    j["maxUEAvailabilityTime"] = o.m_MaxUEAvailabilityTime;
  if (o.msisdnIsSet()) j["msisdn"] = o.m_Msisdn;
  j["monitoringType"] = o.m_MonitoringType;
  if (o.uePerLocationReportIsSet())
    j["uePerLocationReport"] = o.m_UePerLocationReport;
  if (o.plmnIdIsSet()) j["plmnId"] = o.m_PlmnId;
  if (o.reachabilityTypeIsSet()) j["reachabilityType"] = o.m_ReachabilityType;
  if (o.roamingStatusIsSet()) j["roamingStatus"] = o.m_RoamingStatus;
  if (o.failureCauseIsSet()) j["failureCause"] = o.m_FailureCause;
  if (o.eventTimeIsSet()) j["eventTime"] = o.m_EventTime;
  if (o.pdnConnInfoListIsSet() || !o.m_PdnConnInfoList.empty())
    j["pdnConnInfoList"] = o.m_PdnConnInfoList;
  if (o.dddStatusIsSet()) j["dddStatus"] = o.m_DddStatus;
  if (o.dddTrafDescriptorIsSet())
    j["dddTrafDescriptor"] = o.m_DddTrafDescriptor;
  if (o.maxWaitTimeIsSet()) j["maxWaitTime"] = o.m_MaxWaitTime;
  if (o.apiCapsIsSet() || !o.m_ApiCaps.empty()) j["apiCaps"] = o.m_ApiCaps;
  if (o.nSStatusInfoIsSet()) j["nSStatusInfo"] = o.m_NSStatusInfo;
  if (o.servLevelDevIdIsSet()) j["servLevelDevId"] = o.m_ServLevelDevId;
  if (o.uavPresIndIsSet()) j["uavPresInd"] = o.m_UavPresInd;
}

void from_json(const nlohmann::json& j, MonitoringEventReport& o) {
  if (j.find("imeiChange") != j.end()) {
    j.at("imeiChange").get_to(o.m_ImeiChange);
    o.m_ImeiChangeIsSet = true;
  }
  if (j.find("externalId") != j.end()) {
    j.at("externalId").get_to(o.m_ExternalId);
    o.m_ExternalIdIsSet = true;
  }
  if (j.find("idleStatusInfo") != j.end()) {
    j.at("idleStatusInfo").get_to(o.m_IdleStatusInfo);
    o.m_IdleStatusInfoIsSet = true;
  }
  if (j.find("locationInfo") != j.end()) {
    j.at("locationInfo").get_to(o.m_LocationInfo);
    o.m_LocationInfoIsSet = true;
  }
  if (j.find("locFailureCause") != j.end()) {
    j.at("locFailureCause").get_to(o.m_LocFailureCause);
    o.m_LocFailureCauseIsSet = true;
  }
  if (j.find("lossOfConnectReason") != j.end()) {
    j.at("lossOfConnectReason").get_to(o.m_LossOfConnectReason);
    o.m_LossOfConnectReasonIsSet = true;
  }
  if (j.find("maxUEAvailabilityTime") != j.end()) {
    j.at("maxUEAvailabilityTime").get_to(o.m_MaxUEAvailabilityTime);
    o.m_MaxUEAvailabilityTimeIsSet = true;
  }
  if (j.find("msisdn") != j.end()) {
    j.at("msisdn").get_to(o.m_Msisdn);
    o.m_MsisdnIsSet = true;
  }
  j.at("monitoringType").get_to(o.m_MonitoringType);
  if (j.find("uePerLocationReport") != j.end()) {
    j.at("uePerLocationReport").get_to(o.m_UePerLocationReport);
    o.m_UePerLocationReportIsSet = true;
  }
  if (j.find("plmnId") != j.end()) {
    j.at("plmnId").get_to(o.m_PlmnId);
    o.m_PlmnIdIsSet = true;
  }
  if (j.find("reachabilityType") != j.end()) {
    j.at("reachabilityType").get_to(o.m_ReachabilityType);
    o.m_ReachabilityTypeIsSet = true;
  }
  if (j.find("roamingStatus") != j.end()) {
    j.at("roamingStatus").get_to(o.m_RoamingStatus);
    o.m_RoamingStatusIsSet = true;
  }
  if (j.find("failureCause") != j.end()) {
    j.at("failureCause").get_to(o.m_FailureCause);
    o.m_FailureCauseIsSet = true;
  }
  if (j.find("eventTime") != j.end()) {
    j.at("eventTime").get_to(o.m_EventTime);
    o.m_EventTimeIsSet = true;
  }
  if (j.find("pdnConnInfoList") != j.end()) {
    j.at("pdnConnInfoList").get_to(o.m_PdnConnInfoList);
    o.m_PdnConnInfoListIsSet = true;
  }
  if (j.find("dddStatus") != j.end()) {
    j.at("dddStatus").get_to(o.m_DddStatus);
    o.m_DddStatusIsSet = true;
  }
  if (j.find("dddTrafDescriptor") != j.end()) {
    j.at("dddTrafDescriptor").get_to(o.m_DddTrafDescriptor);
    o.m_DddTrafDescriptorIsSet = true;
  }
  if (j.find("maxWaitTime") != j.end()) {
    j.at("maxWaitTime").get_to(o.m_MaxWaitTime);
    o.m_MaxWaitTimeIsSet = true;
  }
  if (j.find("apiCaps") != j.end()) {
    j.at("apiCaps").get_to(o.m_ApiCaps);
    o.m_ApiCapsIsSet = true;
  }
  if (j.find("nSStatusInfo") != j.end()) {
    j.at("nSStatusInfo").get_to(o.m_NSStatusInfo);
    o.m_NSStatusInfoIsSet = true;
  }
  if (j.find("servLevelDevId") != j.end()) {
    j.at("servLevelDevId").get_to(o.m_ServLevelDevId);
    o.m_ServLevelDevIdIsSet = true;
  }
  if (j.find("uavPresInd") != j.end()) {
    j.at("uavPresInd").get_to(o.m_UavPresInd);
    o.m_UavPresIndIsSet = true;
  }
}

AssociationType MonitoringEventReport::getImeiChange() const {
  return m_ImeiChange;
}
void MonitoringEventReport::setImeiChange(AssociationType const& value) {
  m_ImeiChange      = value;
  m_ImeiChangeIsSet = true;
}
bool MonitoringEventReport::imeiChangeIsSet() const {
  return m_ImeiChangeIsSet;
}
void MonitoringEventReport::unsetImeiChange() {
  m_ImeiChangeIsSet = false;
}
std::string MonitoringEventReport::getExternalId() const {
  return m_ExternalId;
}
void MonitoringEventReport::setExternalId(std::string const& value) {
  m_ExternalId      = value;
  m_ExternalIdIsSet = true;
}
bool MonitoringEventReport::externalIdIsSet() const {
  return m_ExternalIdIsSet;
}
void MonitoringEventReport::unsetExternalId() {
  m_ExternalIdIsSet = false;
}
IdleStatusInfo MonitoringEventReport::getIdleStatusInfo() const {
  return m_IdleStatusInfo;
}
void MonitoringEventReport::setIdleStatusInfo(IdleStatusInfo const& value) {
  m_IdleStatusInfo      = value;
  m_IdleStatusInfoIsSet = true;
}
bool MonitoringEventReport::idleStatusInfoIsSet() const {
  return m_IdleStatusInfoIsSet;
}
void MonitoringEventReport::unsetIdleStatusInfo() {
  m_IdleStatusInfoIsSet = false;
}
LocationInfo MonitoringEventReport::getLocationInfo() const {
  return m_LocationInfo;
}
void MonitoringEventReport::setLocationInfo(LocationInfo const& value) {
  m_LocationInfo      = value;
  m_LocationInfoIsSet = true;
}
bool MonitoringEventReport::locationInfoIsSet() const {
  return m_LocationInfoIsSet;
}
void MonitoringEventReport::unsetLocationInfo() {
  m_LocationInfoIsSet = false;
}
LocationFailureCause MonitoringEventReport::getLocFailureCause() const {
  return m_LocFailureCause;
}
void MonitoringEventReport::setLocFailureCause(
    LocationFailureCause const& value) {
  m_LocFailureCause      = value;
  m_LocFailureCauseIsSet = true;
}
bool MonitoringEventReport::locFailureCauseIsSet() const {
  return m_LocFailureCauseIsSet;
}
void MonitoringEventReport::unsetLocFailureCause() {
  m_LocFailureCauseIsSet = false;
}
int32_t MonitoringEventReport::getLossOfConnectReason() const {
  return m_LossOfConnectReason;
}
void MonitoringEventReport::setLossOfConnectReason(int32_t const value) {
  m_LossOfConnectReason      = value;
  m_LossOfConnectReasonIsSet = true;
}
bool MonitoringEventReport::lossOfConnectReasonIsSet() const {
  return m_LossOfConnectReasonIsSet;
}
void MonitoringEventReport::unsetLossOfConnectReason() {
  m_LossOfConnectReasonIsSet = false;
}
std::string MonitoringEventReport::getMaxUEAvailabilityTime() const {
  return m_MaxUEAvailabilityTime;
}
void MonitoringEventReport::setMaxUEAvailabilityTime(std::string const& value) {
  m_MaxUEAvailabilityTime      = value;
  m_MaxUEAvailabilityTimeIsSet = true;
}
bool MonitoringEventReport::maxUEAvailabilityTimeIsSet() const {
  return m_MaxUEAvailabilityTimeIsSet;
}
void MonitoringEventReport::unsetMaxUEAvailabilityTime() {
  m_MaxUEAvailabilityTimeIsSet = false;
}
std::string MonitoringEventReport::getMsisdn() const {
  return m_Msisdn;
}
void MonitoringEventReport::setMsisdn(std::string const& value) {
  m_Msisdn      = value;
  m_MsisdnIsSet = true;
}
bool MonitoringEventReport::msisdnIsSet() const {
  return m_MsisdnIsSet;
}
void MonitoringEventReport::unsetMsisdn() {
  m_MsisdnIsSet = false;
}
MonitoringType MonitoringEventReport::getMonitoringType() const {
  return m_MonitoringType;
}
void MonitoringEventReport::setMonitoringType(MonitoringType const& value) {
  m_MonitoringType = value;
}
UePerLocationReport MonitoringEventReport::getUePerLocationReport() const {
  return m_UePerLocationReport;
}
void MonitoringEventReport::setUePerLocationReport(
    UePerLocationReport const& value) {
  m_UePerLocationReport      = value;
  m_UePerLocationReportIsSet = true;
}
bool MonitoringEventReport::uePerLocationReportIsSet() const {
  return m_UePerLocationReportIsSet;
}
void MonitoringEventReport::unsetUePerLocationReport() {
  m_UePerLocationReportIsSet = false;
}
PlmnId MonitoringEventReport::getPlmnId() const {
  return m_PlmnId;
}
void MonitoringEventReport::setPlmnId(PlmnId const& value) {
  m_PlmnId      = value;
  m_PlmnIdIsSet = true;
}
bool MonitoringEventReport::plmnIdIsSet() const {
  return m_PlmnIdIsSet;
}
void MonitoringEventReport::unsetPlmnId() {
  m_PlmnIdIsSet = false;
}
ReachabilityType MonitoringEventReport::getReachabilityType() const {
  return m_ReachabilityType;
}
void MonitoringEventReport::setReachabilityType(ReachabilityType const& value) {
  m_ReachabilityType      = value;
  m_ReachabilityTypeIsSet = true;
}
bool MonitoringEventReport::reachabilityTypeIsSet() const {
  return m_ReachabilityTypeIsSet;
}
void MonitoringEventReport::unsetReachabilityType() {
  m_ReachabilityTypeIsSet = false;
}
bool MonitoringEventReport::isRoamingStatus() const {
  return m_RoamingStatus;
}
void MonitoringEventReport::setRoamingStatus(bool const value) {
  m_RoamingStatus      = value;
  m_RoamingStatusIsSet = true;
}
bool MonitoringEventReport::roamingStatusIsSet() const {
  return m_RoamingStatusIsSet;
}
void MonitoringEventReport::unsetRoamingStatus() {
  m_RoamingStatusIsSet = false;
}
FailureCause MonitoringEventReport::getFailureCause() const {
  return m_FailureCause;
}
void MonitoringEventReport::setFailureCause(FailureCause const& value) {
  m_FailureCause      = value;
  m_FailureCauseIsSet = true;
}
bool MonitoringEventReport::failureCauseIsSet() const {
  return m_FailureCauseIsSet;
}
void MonitoringEventReport::unsetFailureCause() {
  m_FailureCauseIsSet = false;
}
std::string MonitoringEventReport::getEventTime() const {
  return m_EventTime;
}
void MonitoringEventReport::setEventTime(std::string const& value) {
  m_EventTime      = value;
  m_EventTimeIsSet = true;
}
bool MonitoringEventReport::eventTimeIsSet() const {
  return m_EventTimeIsSet;
}
void MonitoringEventReport::unsetEventTime() {
  m_EventTimeIsSet = false;
}
std::vector<PdnConnectionInformation>
MonitoringEventReport::getPdnConnInfoList() const {
  return m_PdnConnInfoList;
}
void MonitoringEventReport::setPdnConnInfoList(
    std::vector<PdnConnectionInformation> const& value) {
  m_PdnConnInfoList      = value;
  m_PdnConnInfoListIsSet = true;
}
bool MonitoringEventReport::pdnConnInfoListIsSet() const {
  return m_PdnConnInfoListIsSet;
}
void MonitoringEventReport::unsetPdnConnInfoList() {
  m_PdnConnInfoListIsSet = false;
}
DlDataDeliveryStatus MonitoringEventReport::getDddStatus() const {
  return m_DddStatus;
}
void MonitoringEventReport::setDddStatus(DlDataDeliveryStatus const& value) {
  m_DddStatus      = value;
  m_DddStatusIsSet = true;
}
bool MonitoringEventReport::dddStatusIsSet() const {
  return m_DddStatusIsSet;
}
void MonitoringEventReport::unsetDddStatus() {
  m_DddStatusIsSet = false;
}
DddTrafficDescriptor MonitoringEventReport::getDddTrafDescriptor() const {
  return m_DddTrafDescriptor;
}
void MonitoringEventReport::setDddTrafDescriptor(
    DddTrafficDescriptor const& value) {
  m_DddTrafDescriptor      = value;
  m_DddTrafDescriptorIsSet = true;
}
bool MonitoringEventReport::dddTrafDescriptorIsSet() const {
  return m_DddTrafDescriptorIsSet;
}
void MonitoringEventReport::unsetDddTrafDescriptor() {
  m_DddTrafDescriptorIsSet = false;
}
std::string MonitoringEventReport::getMaxWaitTime() const {
  return m_MaxWaitTime;
}
void MonitoringEventReport::setMaxWaitTime(std::string const& value) {
  m_MaxWaitTime      = value;
  m_MaxWaitTimeIsSet = true;
}
bool MonitoringEventReport::maxWaitTimeIsSet() const {
  return m_MaxWaitTimeIsSet;
}
void MonitoringEventReport::unsetMaxWaitTime() {
  m_MaxWaitTimeIsSet = false;
}
std::vector<ApiCapabilityInfo> MonitoringEventReport::getApiCaps() const {
  return m_ApiCaps;
}
void MonitoringEventReport::setApiCaps(
    std::vector<ApiCapabilityInfo> const& value) {
  m_ApiCaps      = value;
  m_ApiCapsIsSet = true;
}
bool MonitoringEventReport::apiCapsIsSet() const {
  return m_ApiCapsIsSet;
}
void MonitoringEventReport::unsetApiCaps() {
  m_ApiCapsIsSet = false;
}
SACEventStatus MonitoringEventReport::getNSStatusInfo() const {
  return m_NSStatusInfo;
}
void MonitoringEventReport::setNSStatusInfo(SACEventStatus const& value) {
  m_NSStatusInfo      = value;
  m_NSStatusInfoIsSet = true;
}
bool MonitoringEventReport::nSStatusInfoIsSet() const {
  return m_NSStatusInfoIsSet;
}
void MonitoringEventReport::unsetNSStatusInfo() {
  m_NSStatusInfoIsSet = false;
}
std::string MonitoringEventReport::getServLevelDevId() const {
  return m_ServLevelDevId;
}
void MonitoringEventReport::setServLevelDevId(std::string const& value) {
  m_ServLevelDevId      = value;
  m_ServLevelDevIdIsSet = true;
}
bool MonitoringEventReport::servLevelDevIdIsSet() const {
  return m_ServLevelDevIdIsSet;
}
void MonitoringEventReport::unsetServLevelDevId() {
  m_ServLevelDevIdIsSet = false;
}
bool MonitoringEventReport::isUavPresInd() const {
  return m_UavPresInd;
}
void MonitoringEventReport::setUavPresInd(bool const value) {
  m_UavPresInd      = value;
  m_UavPresIndIsSet = true;
}
bool MonitoringEventReport::uavPresIndIsSet() const {
  return m_UavPresIndIsSet;
}
void MonitoringEventReport::unsetUavPresInd() {
  m_UavPresIndIsSet = false;
}

}  // namespace oai::nef::model
