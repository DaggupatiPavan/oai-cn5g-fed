/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AddressList.h
 *
 *
 */

#ifndef AddressList_H_
#define AddressList_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "Ipv6Addr.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class AddressList {
 public:
  AddressList();
  virtual ~AddressList() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AddressList& rhs) const;
  bool operator!=(const AddressList& rhs) const;

  /////////////////////////////////////////////
  /// AddressList members

  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getIpv4Addrs() const;
  void setIpv4Addrs(std::vector<std::string> const& value);
  bool ipv4AddrsIsSet() const;
  void unsetIpv4Addrs();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Addr> getIpv6Addrs() const;
  void setIpv6Addrs(std::vector<Ipv6Addr> const& value);
  bool ipv6AddrsIsSet() const;
  void unsetIpv6Addrs();

  friend void to_json(nlohmann::json& j, const AddressList& o);
  friend void from_json(const nlohmann::json& j, AddressList& o);

 protected:
  std::vector<std::string> m_Ipv4Addrs;
  bool m_Ipv4AddrsIsSet;
  std::vector<Ipv6Addr> m_Ipv6Addrs;
  bool m_Ipv6AddrsIsSet;
};

}  // namespace oai::nef::model

#endif /* AddressList_H_ */
