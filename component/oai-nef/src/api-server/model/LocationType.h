/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * LocationType.h
 *
 * Possible values are - CURRENT_LOCATION: The SCS/AS requests to be notified
 * for current location - LAST_KNOWN_LOCATION: The SCS/AS requests to be
 * notified for last known location - CURRENT_OR_LAST_KNOWN_LOCATION: The AF
 * requests the current or last known location - INITIAL_LOCATION: The AF
 * requests the initial location
 */

#ifndef LocationType_H_
#define LocationType_H_

#include <nlohmann/json.hpp>

#include "LocationType_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - CURRENT_LOCATION: The SCS/AS requests to be notified
/// for current location - LAST_KNOWN_LOCATION: The SCS/AS requests to be
/// notified for last known location - CURRENT_OR_LAST_KNOWN_LOCATION: The AF
/// requests the current or last known location - INITIAL_LOCATION: The AF
/// requests the initial location
/// </summary>
class LocationType {
 public:
  LocationType();
  virtual ~LocationType() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const LocationType& rhs) const;
  bool operator!=(const LocationType& rhs) const;

  /////////////////////////////////////////////
  /// LocationType members

  LocationType_anyOf getValue() const;
  void setValue(LocationType_anyOf value);
  LocationType_anyOf::eLocationType_anyOf getEnumValue() const;
  void setEnumValue(LocationType_anyOf::eLocationType_anyOf value);
  friend void to_json(nlohmann::json& j, const LocationType& o);
  friend void from_json(const nlohmann::json& j, LocationType& o);
  friend void to_json(nlohmann::json& j, const LocationType_anyOf& o);
  friend void from_json(const nlohmann::json& j, LocationType_anyOf& o);

 protected:
  LocationType_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* LocationType_H_ */
