/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AdditionalMeasurement.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AdditionalMeasurement::AdditionalMeasurement() {
  m_UnexpLocIsSet      = false;
  m_UnexpFlowTepsIsSet = false;
  m_UnexpWakesIsSet    = false;
  m_DdosAttackIsSet    = false;
  m_WrgDestIsSet       = false;
  m_CircumsIsSet       = false;
}

void AdditionalMeasurement::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AdditionalMeasurement::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AdditionalMeasurement::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AdditionalMeasurement" : pathPrefix;

  if (unexpFlowTepsIsSet()) {
    const std::vector<IpEthFlowDescription>& value = m_UnexpFlowTeps;
    const std::string currentValuePath = _pathPrefix + ".unexpFlowTeps";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const IpEthFlowDescription& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".unexpFlowTeps") && success;

        i++;
      }
    }
  }

  if (unexpWakesIsSet()) {
    const std::vector<std::string>& value = m_UnexpWakes;
    const std::string currentValuePath    = _pathPrefix + ".unexpWakes";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        if (!oai::nef::helpers::validateRfc3339_date_time(value)) {
          success = false;
          msg << currentValuePath
              << ": must be a valid RFC 3339 date-time string;";
        }

        i++;
      }
    }
  }

  if (circumsIsSet()) {
    const std::vector<CircumstanceDescription>& value = m_Circums;
    const std::string currentValuePath = _pathPrefix + ".circums";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const CircumstanceDescription& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".circums") && success;

        i++;
      }
    }
  }

  return success;
}

bool AdditionalMeasurement::operator==(const AdditionalMeasurement& rhs) const {
  return

      ((!unexpLocIsSet() && !rhs.unexpLocIsSet()) ||
       (unexpLocIsSet() && rhs.unexpLocIsSet() &&
        getUnexpLoc() == rhs.getUnexpLoc())) &&

      ((!unexpFlowTepsIsSet() && !rhs.unexpFlowTepsIsSet()) ||
       (unexpFlowTepsIsSet() && rhs.unexpFlowTepsIsSet() &&
        getUnexpFlowTeps() == rhs.getUnexpFlowTeps())) &&

      ((!unexpWakesIsSet() && !rhs.unexpWakesIsSet()) ||
       (unexpWakesIsSet() && rhs.unexpWakesIsSet() &&
        getUnexpWakes() == rhs.getUnexpWakes())) &&

      ((!ddosAttackIsSet() && !rhs.ddosAttackIsSet()) ||
       (ddosAttackIsSet() && rhs.ddosAttackIsSet() &&
        getDdosAttack() == rhs.getDdosAttack())) &&

      ((!wrgDestIsSet() && !rhs.wrgDestIsSet()) ||
       (wrgDestIsSet() && rhs.wrgDestIsSet() &&
        getWrgDest() == rhs.getWrgDest())) &&

      ((!circumsIsSet() && !rhs.circumsIsSet()) ||
       (circumsIsSet() && rhs.circumsIsSet() &&
        getCircums() == rhs.getCircums()))

          ;
}

bool AdditionalMeasurement::operator!=(const AdditionalMeasurement& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AdditionalMeasurement& o) {
  j = nlohmann::json();
  if (o.unexpLocIsSet()) j["unexpLoc"] = o.m_UnexpLoc;
  if (o.unexpFlowTepsIsSet() || !o.m_UnexpFlowTeps.empty())
    j["unexpFlowTeps"] = o.m_UnexpFlowTeps;
  if (o.unexpWakesIsSet() || !o.m_UnexpWakes.empty())
    j["unexpWakes"] = o.m_UnexpWakes;
  if (o.ddosAttackIsSet()) j["ddosAttack"] = o.m_DdosAttack;
  if (o.wrgDestIsSet()) j["wrgDest"] = o.m_WrgDest;
  if (o.circumsIsSet() || !o.m_Circums.empty()) j["circums"] = o.m_Circums;
}

void from_json(const nlohmann::json& j, AdditionalMeasurement& o) {
  if (j.find("unexpLoc") != j.end()) {
    j.at("unexpLoc").get_to(o.m_UnexpLoc);
    o.m_UnexpLocIsSet = true;
  }
  if (j.find("unexpFlowTeps") != j.end()) {
    j.at("unexpFlowTeps").get_to(o.m_UnexpFlowTeps);
    o.m_UnexpFlowTepsIsSet = true;
  }
  if (j.find("unexpWakes") != j.end()) {
    j.at("unexpWakes").get_to(o.m_UnexpWakes);
    o.m_UnexpWakesIsSet = true;
  }
  if (j.find("ddosAttack") != j.end()) {
    j.at("ddosAttack").get_to(o.m_DdosAttack);
    o.m_DdosAttackIsSet = true;
  }
  if (j.find("wrgDest") != j.end()) {
    j.at("wrgDest").get_to(o.m_WrgDest);
    o.m_WrgDestIsSet = true;
  }
  if (j.find("circums") != j.end()) {
    j.at("circums").get_to(o.m_Circums);
    o.m_CircumsIsSet = true;
  }
}

NetworkAreaInfo AdditionalMeasurement::getUnexpLoc() const {
  return m_UnexpLoc;
}
void AdditionalMeasurement::setUnexpLoc(NetworkAreaInfo const& value) {
  m_UnexpLoc      = value;
  m_UnexpLocIsSet = true;
}
bool AdditionalMeasurement::unexpLocIsSet() const {
  return m_UnexpLocIsSet;
}
void AdditionalMeasurement::unsetUnexpLoc() {
  m_UnexpLocIsSet = false;
}
std::vector<IpEthFlowDescription> AdditionalMeasurement::getUnexpFlowTeps()
    const {
  return m_UnexpFlowTeps;
}
void AdditionalMeasurement::setUnexpFlowTeps(
    std::vector<IpEthFlowDescription> const& value) {
  m_UnexpFlowTeps      = value;
  m_UnexpFlowTepsIsSet = true;
}
bool AdditionalMeasurement::unexpFlowTepsIsSet() const {
  return m_UnexpFlowTepsIsSet;
}
void AdditionalMeasurement::unsetUnexpFlowTeps() {
  m_UnexpFlowTepsIsSet = false;
}
std::vector<std::string> AdditionalMeasurement::getUnexpWakes() const {
  return m_UnexpWakes;
}
void AdditionalMeasurement::setUnexpWakes(
    std::vector<std::string> const& value) {
  m_UnexpWakes      = value;
  m_UnexpWakesIsSet = true;
}
bool AdditionalMeasurement::unexpWakesIsSet() const {
  return m_UnexpWakesIsSet;
}
void AdditionalMeasurement::unsetUnexpWakes() {
  m_UnexpWakesIsSet = false;
}
AddressList AdditionalMeasurement::getDdosAttack() const {
  return m_DdosAttack;
}
void AdditionalMeasurement::setDdosAttack(AddressList const& value) {
  m_DdosAttack      = value;
  m_DdosAttackIsSet = true;
}
bool AdditionalMeasurement::ddosAttackIsSet() const {
  return m_DdosAttackIsSet;
}
void AdditionalMeasurement::unsetDdosAttack() {
  m_DdosAttackIsSet = false;
}
AddressList AdditionalMeasurement::getWrgDest() const {
  return m_WrgDest;
}
void AdditionalMeasurement::setWrgDest(AddressList const& value) {
  m_WrgDest      = value;
  m_WrgDestIsSet = true;
}
bool AdditionalMeasurement::wrgDestIsSet() const {
  return m_WrgDestIsSet;
}
void AdditionalMeasurement::unsetWrgDest() {
  m_WrgDestIsSet = false;
}
std::vector<CircumstanceDescription> AdditionalMeasurement::getCircums() const {
  return m_Circums;
}
void AdditionalMeasurement::setCircums(
    std::vector<CircumstanceDescription> const& value) {
  m_Circums      = value;
  m_CircumsIsSet = true;
}
bool AdditionalMeasurement::circumsIsSet() const {
  return m_CircumsIsSet;
}
void AdditionalMeasurement::unsetCircums() {
  m_CircumsIsSet = false;
}

}  // namespace oai::nef::model
