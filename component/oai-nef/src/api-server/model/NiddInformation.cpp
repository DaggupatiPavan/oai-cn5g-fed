/**
 * Nnef_SMContext
 * Nnef SMContext Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NiddInformation.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

NiddInformation::NiddInformation() {
  m_ExtGroupId      = "";
  m_ExtGroupIdIsSet = false;
  m_Gpsi            = "";
  m_GpsiIsSet       = false;
  m_AfId            = "";
  m_AfIdIsSet       = false;
}

void NiddInformation::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool NiddInformation::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NiddInformation::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NiddInformation" : pathPrefix;

  if (extGroupIdIsSet()) {
    const std::string& value           = m_ExtGroupId;
    const std::string currentValuePath = _pathPrefix + ".extGroupId";
  }

  if (gpsiIsSet()) {
    const std::string& value           = m_Gpsi;
    const std::string currentValuePath = _pathPrefix + ".gpsi";
  }

  return success;
}

bool NiddInformation::operator==(const NiddInformation& rhs) const {
  return

      ((!extGroupIdIsSet() && !rhs.extGroupIdIsSet()) ||
       (extGroupIdIsSet() && rhs.extGroupIdIsSet() &&
        getExtGroupId() == rhs.getExtGroupId())) &&

      ((!gpsiIsSet() && !rhs.gpsiIsSet()) ||
       (gpsiIsSet() && rhs.gpsiIsSet() && getGpsi() == rhs.getGpsi())) &&

      ((!afIdIsSet() && !rhs.afIdIsSet()) ||
       (afIdIsSet() && rhs.afIdIsSet() && getAfId() == rhs.getAfId()))

          ;
}

bool NiddInformation::operator!=(const NiddInformation& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NiddInformation& o) {
  j = nlohmann::json();
  if (o.extGroupIdIsSet()) j["extGroupId"] = o.m_ExtGroupId;
  if (o.gpsiIsSet()) j["gpsi"] = o.m_Gpsi;
  if (o.afIdIsSet()) j["afId"] = o.m_AfId;
}

void from_json(const nlohmann::json& j, NiddInformation& o) {
  if (j.find("extGroupId") != j.end()) {
    j.at("extGroupId").get_to(o.m_ExtGroupId);
    o.m_ExtGroupIdIsSet = true;
  }
  if (j.find("gpsi") != j.end()) {
    j.at("gpsi").get_to(o.m_Gpsi);
    o.m_GpsiIsSet = true;
  }
  if (j.find("afId") != j.end()) {
    j.at("afId").get_to(o.m_AfId);
    o.m_AfIdIsSet = true;
  }
}

std::string NiddInformation::getExtGroupId() const {
  return m_ExtGroupId;
}
void NiddInformation::setExtGroupId(std::string const& value) {
  m_ExtGroupId      = value;
  m_ExtGroupIdIsSet = true;
}
bool NiddInformation::extGroupIdIsSet() const {
  return m_ExtGroupIdIsSet;
}
void NiddInformation::unsetExtGroupId() {
  m_ExtGroupIdIsSet = false;
}
std::string NiddInformation::getGpsi() const {
  return m_Gpsi;
}
void NiddInformation::setGpsi(std::string const& value) {
  m_Gpsi      = value;
  m_GpsiIsSet = true;
}
bool NiddInformation::gpsiIsSet() const {
  return m_GpsiIsSet;
}
void NiddInformation::unsetGpsi() {
  m_GpsiIsSet = false;
}
std::string NiddInformation::getAfId() const {
  return m_AfId;
}
void NiddInformation::setAfId(std::string const& value) {
  m_AfId      = value;
  m_AfIdIsSet = true;
}
bool NiddInformation::afIdIsSet() const {
  return m_AfIdIsSet;
}
void NiddInformation::unsetAfId() {
  m_AfIdIsSet = false;
}

}  // namespace oai::nef::model
