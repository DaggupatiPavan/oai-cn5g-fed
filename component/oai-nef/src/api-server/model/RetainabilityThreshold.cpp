/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RetainabilityThreshold.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

RetainabilityThreshold::RetainabilityThreshold() {
  m_RelFlowNum        = 0;
  m_RelFlowNumIsSet   = false;
  m_RelTimeUnitIsSet  = false;
  m_RelFlowRatio      = 0;
  m_RelFlowRatioIsSet = false;
}

void RetainabilityThreshold::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool RetainabilityThreshold::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RetainabilityThreshold::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "RetainabilityThreshold" : pathPrefix;

  if (relFlowNumIsSet()) {
    const int32_t& value               = m_RelFlowNum;
    const std::string currentValuePath = _pathPrefix + ".relFlowNum";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (relFlowRatioIsSet()) {
    const int32_t& value               = m_RelFlowRatio;
    const std::string currentValuePath = _pathPrefix + ".relFlowRatio";

    if (value < 1) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 1;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  return success;
}

bool RetainabilityThreshold::operator==(
    const RetainabilityThreshold& rhs) const {
  return

      ((!relFlowNumIsSet() && !rhs.relFlowNumIsSet()) ||
       (relFlowNumIsSet() && rhs.relFlowNumIsSet() &&
        getRelFlowNum() == rhs.getRelFlowNum())) &&

      ((!relTimeUnitIsSet() && !rhs.relTimeUnitIsSet()) ||
       (relTimeUnitIsSet() && rhs.relTimeUnitIsSet() &&
        getRelTimeUnit() == rhs.getRelTimeUnit())) &&

      ((!relFlowRatioIsSet() && !rhs.relFlowRatioIsSet()) ||
       (relFlowRatioIsSet() && rhs.relFlowRatioIsSet() &&
        getRelFlowRatio() == rhs.getRelFlowRatio()))

          ;
}

bool RetainabilityThreshold::operator!=(
    const RetainabilityThreshold& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RetainabilityThreshold& o) {
  j = nlohmann::json();
  if (o.relFlowNumIsSet()) j["relFlowNum"] = o.m_RelFlowNum;
  if (o.relTimeUnitIsSet()) j["relTimeUnit"] = o.m_RelTimeUnit;
  if (o.relFlowRatioIsSet()) j["relFlowRatio"] = o.m_RelFlowRatio;
}

void from_json(const nlohmann::json& j, RetainabilityThreshold& o) {
  if (j.find("relFlowNum") != j.end()) {
    j.at("relFlowNum").get_to(o.m_RelFlowNum);
    o.m_RelFlowNumIsSet = true;
  }
  if (j.find("relTimeUnit") != j.end()) {
    j.at("relTimeUnit").get_to(o.m_RelTimeUnit);
    o.m_RelTimeUnitIsSet = true;
  }
  if (j.find("relFlowRatio") != j.end()) {
    j.at("relFlowRatio").get_to(o.m_RelFlowRatio);
    o.m_RelFlowRatioIsSet = true;
  }
}

int32_t RetainabilityThreshold::getRelFlowNum() const {
  return m_RelFlowNum;
}
void RetainabilityThreshold::setRelFlowNum(int32_t const value) {
  m_RelFlowNum      = value;
  m_RelFlowNumIsSet = true;
}
bool RetainabilityThreshold::relFlowNumIsSet() const {
  return m_RelFlowNumIsSet;
}
void RetainabilityThreshold::unsetRelFlowNum() {
  m_RelFlowNumIsSet = false;
}
TimeUnit RetainabilityThreshold::getRelTimeUnit() const {
  return m_RelTimeUnit;
}
void RetainabilityThreshold::setRelTimeUnit(TimeUnit const& value) {
  m_RelTimeUnit      = value;
  m_RelTimeUnitIsSet = true;
}
bool RetainabilityThreshold::relTimeUnitIsSet() const {
  return m_RelTimeUnitIsSet;
}
void RetainabilityThreshold::unsetRelTimeUnit() {
  m_RelTimeUnitIsSet = false;
}
int32_t RetainabilityThreshold::getRelFlowRatio() const {
  return m_RelFlowRatio;
}
void RetainabilityThreshold::setRelFlowRatio(int32_t const value) {
  m_RelFlowRatio      = value;
  m_RelFlowRatioIsSet = true;
}
bool RetainabilityThreshold::relFlowRatioIsSet() const {
  return m_RelFlowRatioIsSet;
}
void RetainabilityThreshold::unsetRelFlowRatio() {
  m_RelFlowRatioIsSet = false;
}

}  // namespace oai::nef::model
