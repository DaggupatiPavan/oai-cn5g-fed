/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsRequest.h
 *
 *
 */

#ifndef AnalyticsRequest_H_
#define AnalyticsRequest_H_

#include <nlohmann/json.hpp>
#include <string>

#include "AnalyticsEvent.h"
#include "AnalyticsEventFilter.h"
#include "EventReportingRequirement.h"
#include "TargetUeId.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class AnalyticsRequest {
 public:
  AnalyticsRequest();
  virtual ~AnalyticsRequest() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnalyticsRequest& rhs) const;
  bool operator!=(const AnalyticsRequest& rhs) const;

  /////////////////////////////////////////////
  /// AnalyticsRequest members

  /// <summary>
  ///
  /// </summary>
  AnalyticsEvent getAnalyEvent() const;
  void setAnalyEvent(AnalyticsEvent const& value);
  /// <summary>
  ///
  /// </summary>
  AnalyticsEventFilter getAnalyEventFilter() const;
  void setAnalyEventFilter(AnalyticsEventFilter const& value);
  bool analyEventFilterIsSet() const;
  void unsetAnalyEventFilter();
  /// <summary>
  ///
  /// </summary>
  EventReportingRequirement getAnalyRep() const;
  void setAnalyRep(EventReportingRequirement const& value);
  bool analyRepIsSet() const;
  void unsetAnalyRep();
  /// <summary>
  ///
  /// </summary>
  TargetUeId getTgtUe() const;
  void setTgtUe(TargetUeId const& value);
  bool tgtUeIsSet() const;
  void unsetTgtUe();
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const& value);

  friend void to_json(nlohmann::json& j, const AnalyticsRequest& o);
  friend void from_json(const nlohmann::json& j, AnalyticsRequest& o);

 protected:
  AnalyticsEvent m_AnalyEvent;

  AnalyticsEventFilter m_AnalyEventFilter;
  bool m_AnalyEventFilterIsSet;
  EventReportingRequirement m_AnalyRep;
  bool m_AnalyRepIsSet;
  TargetUeId m_TgtUe;
  bool m_TgtUeIsSet;
  std::string m_SuppFeat;
};

}  // namespace oai::nef::model

#endif /* AnalyticsRequest_H_ */
