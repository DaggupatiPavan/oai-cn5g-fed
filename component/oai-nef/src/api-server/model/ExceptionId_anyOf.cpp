/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExceptionId_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "Helpers.h"

namespace oai::nef::model {

ExceptionId_anyOf::ExceptionId_anyOf() {}

void ExceptionId_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool ExceptionId_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ExceptionId_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ExceptionId_anyOf" : pathPrefix;

  if (m_value ==
      ExceptionId_anyOf::eExceptionId_anyOf::INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool ExceptionId_anyOf::operator==(const ExceptionId_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool ExceptionId_anyOf::operator!=(const ExceptionId_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ExceptionId_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case ExceptionId_anyOf::eExceptionId_anyOf::INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_UE_LOCATION:
      j = "UNEXPECTED_UE_LOCATION";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_LONG_LIVE_FLOW:
      j = "UNEXPECTED_LONG_LIVE_FLOW";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_LARGE_RATE_FLOW:
      j = "UNEXPECTED_LARGE_RATE_FLOW";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_WAKEUP:
      j = "UNEXPECTED_WAKEUP";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::SUSPICION_OF_DDOS_ATTACK:
      j = "SUSPICION_OF_DDOS_ATTACK";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::WRONG_DESTINATION_ADDRESS:
      j = "WRONG_DESTINATION_ADDRESS";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::TOO_FREQUENT_SERVICE_ACCESS:
      j = "TOO_FREQUENT_SERVICE_ACCESS";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_RADIO_LINK_FAILURES:
      j = "UNEXPECTED_RADIO_LINK_FAILURES";
      break;
    case ExceptionId_anyOf::eExceptionId_anyOf::PING_PONG_ACROSS_CELLS:
      j = "PING_PONG_ACROSS_CELLS";
      break;
  }
}

void from_json(const nlohmann::json& j, ExceptionId_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "UNEXPECTED_UE_LOCATION") {
    o.setValue(ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_UE_LOCATION);
  } else if (s == "UNEXPECTED_LONG_LIVE_FLOW") {
    o.setValue(
        ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_LONG_LIVE_FLOW);
  } else if (s == "UNEXPECTED_LARGE_RATE_FLOW") {
    o.setValue(
        ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_LARGE_RATE_FLOW);
  } else if (s == "UNEXPECTED_WAKEUP") {
    o.setValue(ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_WAKEUP);
  } else if (s == "SUSPICION_OF_DDOS_ATTACK") {
    o.setValue(ExceptionId_anyOf::eExceptionId_anyOf::SUSPICION_OF_DDOS_ATTACK);
  } else if (s == "WRONG_DESTINATION_ADDRESS") {
    o.setValue(
        ExceptionId_anyOf::eExceptionId_anyOf::WRONG_DESTINATION_ADDRESS);
  } else if (s == "TOO_FREQUENT_SERVICE_ACCESS") {
    o.setValue(
        ExceptionId_anyOf::eExceptionId_anyOf::TOO_FREQUENT_SERVICE_ACCESS);
  } else if (s == "UNEXPECTED_RADIO_LINK_FAILURES") {
    o.setValue(
        ExceptionId_anyOf::eExceptionId_anyOf::UNEXPECTED_RADIO_LINK_FAILURES);
  } else if (s == "PING_PONG_ACROSS_CELLS") {
    o.setValue(ExceptionId_anyOf::eExceptionId_anyOf::PING_PONG_ACROSS_CELLS);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " ExceptionId_anyOf::eExceptionId_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

ExceptionId_anyOf::eExceptionId_anyOf ExceptionId_anyOf::getValue() const {
  return m_value;
}
void ExceptionId_anyOf::setValue(ExceptionId_anyOf::eExceptionId_anyOf value) {
  m_value = value;
}

}  // namespace oai::nef::model
