/**
 * 3gpp-traffic-influence
 * API for AF traffic influence Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TemporalValidity.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

TemporalValidity::TemporalValidity() {
  m_StartTime      = "";
  m_StartTimeIsSet = false;
  m_StopTime       = "";
  m_StopTimeIsSet  = false;
}

void TemporalValidity::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool TemporalValidity::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool TemporalValidity::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "TemporalValidity" : pathPrefix;

  return success;
}

bool TemporalValidity::operator==(const TemporalValidity& rhs) const {
  return

      ((!startTimeIsSet() && !rhs.startTimeIsSet()) ||
       (startTimeIsSet() && rhs.startTimeIsSet() &&
        getStartTime() == rhs.getStartTime())) &&

      ((!stopTimeIsSet() && !rhs.stopTimeIsSet()) ||
       (stopTimeIsSet() && rhs.stopTimeIsSet() &&
        getStopTime() == rhs.getStopTime()))

          ;
}

bool TemporalValidity::operator!=(const TemporalValidity& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const TemporalValidity& o) {
  j = nlohmann::json();
  if (o.startTimeIsSet()) j["startTime"] = o.m_StartTime;
  if (o.stopTimeIsSet()) j["stopTime"] = o.m_StopTime;
}

void from_json(const nlohmann::json& j, TemporalValidity& o) {
  if (j.find("startTime") != j.end()) {
    j.at("startTime").get_to(o.m_StartTime);
    o.m_StartTimeIsSet = true;
  }
  if (j.find("stopTime") != j.end()) {
    j.at("stopTime").get_to(o.m_StopTime);
    o.m_StopTimeIsSet = true;
  }
}

std::string TemporalValidity::getStartTime() const {
  return m_StartTime;
}
void TemporalValidity::setStartTime(std::string const& value) {
  m_StartTime      = value;
  m_StartTimeIsSet = true;
}
bool TemporalValidity::startTimeIsSet() const {
  return m_StartTimeIsSet;
}
void TemporalValidity::unsetStartTime() {
  m_StartTimeIsSet = false;
}
std::string TemporalValidity::getStopTime() const {
  return m_StopTime;
}
void TemporalValidity::setStopTime(std::string const& value) {
  m_StopTime      = value;
  m_StopTimeIsSet = true;
}
bool TemporalValidity::stopTimeIsSet() const {
  return m_StopTimeIsSet;
}
void TemporalValidity::unsetStopTime() {
  m_StopTimeIsSet = false;
}

}  // namespace oai::nef::model
