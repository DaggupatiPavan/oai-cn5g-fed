/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GeographicalCoordinates.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

GeographicalCoordinates::GeographicalCoordinates() {
  m_Lon = 0.0;
  m_Lat = 0.0;
}

void GeographicalCoordinates::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool GeographicalCoordinates::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool GeographicalCoordinates::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "GeographicalCoordinates" : pathPrefix;

  /* Lon */ {
    const double& value                = m_Lon;
    const std::string currentValuePath = _pathPrefix + ".lon";

    if (value < -180) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to -180;";
    }
    if (value > 180) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 180;";
    }
  }

  /* Lat */ {
    const double& value                = m_Lat;
    const std::string currentValuePath = _pathPrefix + ".lat";

    if (value < -90) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to -90;";
    }
    if (value > 90) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 90;";
    }
  }

  return success;
}

bool GeographicalCoordinates::operator==(
    const GeographicalCoordinates& rhs) const {
  return

      (getLon() == rhs.getLon()) &&

      (getLat() == rhs.getLat())

          ;
}

bool GeographicalCoordinates::operator!=(
    const GeographicalCoordinates& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GeographicalCoordinates& o) {
  j        = nlohmann::json();
  j["lon"] = o.m_Lon;
  j["lat"] = o.m_Lat;
}

void from_json(const nlohmann::json& j, GeographicalCoordinates& o) {
  j.at("lon").get_to(o.m_Lon);
  j.at("lat").get_to(o.m_Lat);
}

double GeographicalCoordinates::getLon() const {
  return m_Lon;
}
void GeographicalCoordinates::setLon(double const value) {
  m_Lon = value;
}
double GeographicalCoordinates::getLat() const {
  return m_Lat;
}
void GeographicalCoordinates::setLat(double const value) {
  m_Lat = value;
}

}  // namespace oai::nef::model
