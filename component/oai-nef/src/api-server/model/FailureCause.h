/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * FailureCause.h
 *
 * Represents the reason of communication failure.
 */

#ifndef FailureCause_H_
#define FailureCause_H_

#include <nlohmann/json.hpp>
#include <string>

namespace oai::nef::model {

/// <summary>
/// Represents the reason of communication failure.
/// </summary>
class FailureCause {
 public:
  FailureCause();
  virtual ~FailureCause() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const FailureCause& rhs) const;
  bool operator!=(const FailureCause& rhs) const;

  /////////////////////////////////////////////
  /// FailureCause members

  /// <summary>
  /// Identifies a non-transparent copy of the BSSGP cause code. Refer to 3GPP
  /// TS 29.128.
  /// </summary>
  int32_t getBssgpCause() const;
  void setBssgpCause(int32_t const value);
  bool bssgpCauseIsSet() const;
  void unsetBssgpCause();
  /// <summary>
  /// Identify the type of the S1AP-Cause. Refer to 3GPP TS 29.128.
  /// </summary>
  int32_t getCauseType() const;
  void setCauseType(int32_t const value);
  bool causeTypeIsSet() const;
  void unsetCauseType();
  /// <summary>
  /// Identifies a non-transparent copy of the GMM cause code. Refer to 3GPP
  /// TS 29.128.
  /// </summary>
  int32_t getGmmCause() const;
  void setGmmCause(int32_t const value);
  bool gmmCauseIsSet() const;
  void unsetGmmCause();
  /// <summary>
  /// Identifies a non-transparent copy of the RANAP cause code. Refer to 3GPP
  /// TS 29.128.
  /// </summary>
  int32_t getRanapCause() const;
  void setRanapCause(int32_t const value);
  bool ranapCauseIsSet() const;
  void unsetRanapCause();
  /// <summary>
  /// Indicates RAN and/or NAS release cause code information, TWAN release
  /// cause code information or untrusted WLAN release cause code information.
  /// Refer to 3GPP TS 29.214.
  /// </summary>
  std::string getRanNasCause() const;
  void setRanNasCause(std::string const& value);
  bool ranNasCauseIsSet() const;
  void unsetRanNasCause();
  /// <summary>
  /// Identifies a non-transparent copy of the S1AP cause code. Refer to 3GPP
  /// TS 29.128.
  /// </summary>
  int32_t getS1ApCause() const;
  void setS1ApCause(int32_t const value);
  bool s1ApCauseIsSet() const;
  void unsetS1ApCause();
  /// <summary>
  /// Identifies a non-transparent copy of the SM cause code. Refer to 3GPP
  /// TS 29.128.
  /// </summary>
  int32_t getSmCause() const;
  void setSmCause(int32_t const value);
  bool smCauseIsSet() const;
  void unsetSmCause();

  friend void to_json(nlohmann::json& j, const FailureCause& o);
  friend void from_json(const nlohmann::json& j, FailureCause& o);

 protected:
  int32_t m_BssgpCause;
  bool m_BssgpCauseIsSet;
  int32_t m_CauseType;
  bool m_CauseTypeIsSet;
  int32_t m_GmmCause;
  bool m_GmmCauseIsSet;
  int32_t m_RanapCause;
  bool m_RanapCauseIsSet;
  std::string m_RanNasCause;
  bool m_RanNasCauseIsSet;
  int32_t m_S1ApCause;
  bool m_S1ApCauseIsSet;
  int32_t m_SmCause;
  bool m_SmCauseIsSet;
};

}  // namespace oai::nef::model

#endif /* FailureCause_H_ */
