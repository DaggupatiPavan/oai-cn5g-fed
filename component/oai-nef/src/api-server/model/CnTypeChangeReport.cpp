/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CnTypeChangeReport.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

CnTypeChangeReport::CnTypeChangeReport() {
  m_OldCnTypeIsSet = false;
}

void CnTypeChangeReport::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool CnTypeChangeReport::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool CnTypeChangeReport::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "CnTypeChangeReport" : pathPrefix;

  return success;
}

bool CnTypeChangeReport::operator==(const CnTypeChangeReport& rhs) const {
  return

      (getNewCnType() == rhs.getNewCnType()) &&

      ((!oldCnTypeIsSet() && !rhs.oldCnTypeIsSet()) ||
       (oldCnTypeIsSet() && rhs.oldCnTypeIsSet() &&
        getOldCnType() == rhs.getOldCnType()))

          ;
}

bool CnTypeChangeReport::operator!=(const CnTypeChangeReport& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CnTypeChangeReport& o) {
  j              = nlohmann::json();
  j["newCnType"] = o.m_NewCnType;
  if (o.oldCnTypeIsSet()) j["oldCnType"] = o.m_OldCnType;
}

void from_json(const nlohmann::json& j, CnTypeChangeReport& o) {
  j.at("newCnType").get_to(o.m_NewCnType);
  if (j.find("oldCnType") != j.end()) {
    j.at("oldCnType").get_to(o.m_OldCnType);
    o.m_OldCnTypeIsSet = true;
  }
}

CnType CnTypeChangeReport::getNewCnType() const {
  return m_NewCnType;
}
void CnTypeChangeReport::setNewCnType(CnType const& value) {
  m_NewCnType = value;
}
CnType CnTypeChangeReport::getOldCnType() const {
  return m_OldCnType;
}
void CnTypeChangeReport::setOldCnType(CnType const& value) {
  m_OldCnType      = value;
  m_OldCnTypeIsSet = true;
}
bool CnTypeChangeReport::oldCnTypeIsSet() const {
  return m_OldCnTypeIsSet;
}
void CnTypeChangeReport::unsetOldCnType() {
  m_OldCnTypeIsSet = false;
}

}  // namespace oai::nef::model
