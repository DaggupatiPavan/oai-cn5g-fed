/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsRequest.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AnalyticsRequest::AnalyticsRequest() {
  m_AnalyEventFilterIsSet = false;
  m_AnalyRepIsSet         = false;
  m_TgtUeIsSet            = false;
  m_SuppFeat              = "";
}

void AnalyticsRequest::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AnalyticsRequest::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AnalyticsRequest::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AnalyticsRequest" : pathPrefix;

  /* SuppFeat */ {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool AnalyticsRequest::operator==(const AnalyticsRequest& rhs) const {
  return

      (getAnalyEvent() == rhs.getAnalyEvent()) &&

      ((!analyEventFilterIsSet() && !rhs.analyEventFilterIsSet()) ||
       (analyEventFilterIsSet() && rhs.analyEventFilterIsSet() &&
        getAnalyEventFilter() == rhs.getAnalyEventFilter())) &&

      ((!analyRepIsSet() && !rhs.analyRepIsSet()) ||
       (analyRepIsSet() && rhs.analyRepIsSet() &&
        getAnalyRep() == rhs.getAnalyRep())) &&

      ((!tgtUeIsSet() && !rhs.tgtUeIsSet()) ||
       (tgtUeIsSet() && rhs.tgtUeIsSet() && getTgtUe() == rhs.getTgtUe())) &&

      (getSuppFeat() == rhs.getSuppFeat())

          ;
}

bool AnalyticsRequest::operator!=(const AnalyticsRequest& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AnalyticsRequest& o) {
  j               = nlohmann::json();
  j["analyEvent"] = o.m_AnalyEvent;
  if (o.analyEventFilterIsSet()) j["analyEventFilter"] = o.m_AnalyEventFilter;
  if (o.analyRepIsSet()) j["analyRep"] = o.m_AnalyRep;
  if (o.tgtUeIsSet()) j["tgtUe"] = o.m_TgtUe;
  j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json& j, AnalyticsRequest& o) {
  j.at("analyEvent").get_to(o.m_AnalyEvent);
  if (j.find("analyEventFilter") != j.end()) {
    j.at("analyEventFilter").get_to(o.m_AnalyEventFilter);
    o.m_AnalyEventFilterIsSet = true;
  }
  if (j.find("analyRep") != j.end()) {
    j.at("analyRep").get_to(o.m_AnalyRep);
    o.m_AnalyRepIsSet = true;
  }
  if (j.find("tgtUe") != j.end()) {
    j.at("tgtUe").get_to(o.m_TgtUe);
    o.m_TgtUeIsSet = true;
  }
  j.at("suppFeat").get_to(o.m_SuppFeat);
}

AnalyticsEvent AnalyticsRequest::getAnalyEvent() const {
  return m_AnalyEvent;
}
void AnalyticsRequest::setAnalyEvent(AnalyticsEvent const& value) {
  m_AnalyEvent = value;
}
AnalyticsEventFilter AnalyticsRequest::getAnalyEventFilter() const {
  return m_AnalyEventFilter;
}
void AnalyticsRequest::setAnalyEventFilter(AnalyticsEventFilter const& value) {
  m_AnalyEventFilter      = value;
  m_AnalyEventFilterIsSet = true;
}
bool AnalyticsRequest::analyEventFilterIsSet() const {
  return m_AnalyEventFilterIsSet;
}
void AnalyticsRequest::unsetAnalyEventFilter() {
  m_AnalyEventFilterIsSet = false;
}
EventReportingRequirement AnalyticsRequest::getAnalyRep() const {
  return m_AnalyRep;
}
void AnalyticsRequest::setAnalyRep(EventReportingRequirement const& value) {
  m_AnalyRep      = value;
  m_AnalyRepIsSet = true;
}
bool AnalyticsRequest::analyRepIsSet() const {
  return m_AnalyRepIsSet;
}
void AnalyticsRequest::unsetAnalyRep() {
  m_AnalyRepIsSet = false;
}
TargetUeId AnalyticsRequest::getTgtUe() const {
  return m_TgtUe;
}
void AnalyticsRequest::setTgtUe(TargetUeId const& value) {
  m_TgtUe      = value;
  m_TgtUeIsSet = true;
}
bool AnalyticsRequest::tgtUeIsSet() const {
  return m_TgtUeIsSet;
}
void AnalyticsRequest::unsetTgtUe() {
  m_TgtUeIsSet = false;
}
std::string AnalyticsRequest::getSuppFeat() const {
  return m_SuppFeat;
}
void AnalyticsRequest::setSuppFeat(std::string const& value) {
  m_SuppFeat = value;
}

}  // namespace oai::nef::model
