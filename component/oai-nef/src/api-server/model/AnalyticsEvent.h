/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. © 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AnalyticsEvent.h
 *
 * Possible values are - UE_MOBILITY: The AF requests to be notified about
 * analytics information of UE mobility. - UE_COMM: The AF requests to be
 * notified about analytics information of UE communication. -
 * ABNORMAL_BEHAVIOR: The AF requests to be notified about analytics information
 * of UE’s abnormal behavior. - CONGESTION: The AF requests to be notified about
 * analytics information of user data congestion information.  -
 * NETWORK_PERFORMANCE: The AF requests to be notified about analytics
 * information of network performance.  - QOS_SUSTAINABILITY: The AF requests to
 * be notified about analytics information of QoS sustainability.
 */

#ifndef AnalyticsEvent_H_
#define AnalyticsEvent_H_

#include <nlohmann/json.hpp>

#include "AnalyticsEvent_anyOf.h"

namespace oai::nef::model {

/// <summary>
/// Possible values are - UE_MOBILITY: The AF requests to be notified about
/// analytics information of UE mobility. - UE_COMM: The AF requests to be
/// notified about analytics information of UE communication. -
/// ABNORMAL_BEHAVIOR: The AF requests to be notified about analytics
/// information of UE’s abnormal behavior. - CONGESTION: The AF requests to be
/// notified about analytics information of user data congestion information.  -
/// NETWORK_PERFORMANCE: The AF requests to be notified about analytics
/// information of network performance.  - QOS_SUSTAINABILITY: The AF requests
/// to be notified about analytics information of QoS sustainability.
/// </summary>
class AnalyticsEvent {
 public:
  AnalyticsEvent();
  virtual ~AnalyticsEvent() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AnalyticsEvent& rhs) const;
  bool operator!=(const AnalyticsEvent& rhs) const;

  /////////////////////////////////////////////
  /// AnalyticsEvent members

  AnalyticsEvent_anyOf getValue() const;
  void setValue(AnalyticsEvent_anyOf value);
  AnalyticsEvent_anyOf::eAnalyticsEvent_anyOf getEnumValue() const;
  void setEnumValue(AnalyticsEvent_anyOf::eAnalyticsEvent_anyOf value);
  friend void to_json(nlohmann::json& j, const AnalyticsEvent& o);
  friend void from_json(const nlohmann::json& j, AnalyticsEvent& o);
  friend void to_json(nlohmann::json& j, const AnalyticsEvent_anyOf& o);
  friend void from_json(const nlohmann::json& j, AnalyticsEvent_anyOf& o);

 protected:
  AnalyticsEvent_anyOf m_value;
};

}  // namespace oai::nef::model

#endif /* AnalyticsEvent_H_ */
