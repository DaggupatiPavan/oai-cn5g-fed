/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SACInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

SACInfo::SACInfo() {
  m_NumericValNumUes          = 0;
  m_NumericValNumUesIsSet     = false;
  m_NumericValNumPduSess      = 0;
  m_NumericValNumPduSessIsSet = false;
  m_PercValueNumUes           = 0;
  m_PercValueNumUesIsSet      = false;
  m_PercValueNumPduSess       = 0;
  m_PercValueNumPduSessIsSet  = false;
}

void SACInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool SACInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SACInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "SACInfo" : pathPrefix;

  if (percValueNumUesIsSet()) {
    const int32_t& value               = m_PercValueNumUes;
    const std::string currentValuePath = _pathPrefix + ".percValueNumUes";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  if (percValueNumPduSessIsSet()) {
    const int32_t& value               = m_PercValueNumPduSess;
    const std::string currentValuePath = _pathPrefix + ".percValueNumPduSess";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
    if (value > 100) {
      success = false;
      msg << currentValuePath << ": must be less than or equal to 100;";
    }
  }

  return success;
}

bool SACInfo::operator==(const SACInfo& rhs) const {
  return

      ((!numericValNumUesIsSet() && !rhs.numericValNumUesIsSet()) ||
       (numericValNumUesIsSet() && rhs.numericValNumUesIsSet() &&
        getNumericValNumUes() == rhs.getNumericValNumUes())) &&

      ((!numericValNumPduSessIsSet() && !rhs.numericValNumPduSessIsSet()) ||
       (numericValNumPduSessIsSet() && rhs.numericValNumPduSessIsSet() &&
        getNumericValNumPduSess() == rhs.getNumericValNumPduSess())) &&

      ((!percValueNumUesIsSet() && !rhs.percValueNumUesIsSet()) ||
       (percValueNumUesIsSet() && rhs.percValueNumUesIsSet() &&
        getPercValueNumUes() == rhs.getPercValueNumUes())) &&

      ((!percValueNumPduSessIsSet() && !rhs.percValueNumPduSessIsSet()) ||
       (percValueNumPduSessIsSet() && rhs.percValueNumPduSessIsSet() &&
        getPercValueNumPduSess() == rhs.getPercValueNumPduSess()))

          ;
}

bool SACInfo::operator!=(const SACInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SACInfo& o) {
  j = nlohmann::json();
  if (o.numericValNumUesIsSet()) j["numericValNumUes"] = o.m_NumericValNumUes;
  if (o.numericValNumPduSessIsSet())
    j["numericValNumPduSess"] = o.m_NumericValNumPduSess;
  if (o.percValueNumUesIsSet()) j["percValueNumUes"] = o.m_PercValueNumUes;
  if (o.percValueNumPduSessIsSet())
    j["percValueNumPduSess"] = o.m_PercValueNumPduSess;
}

void from_json(const nlohmann::json& j, SACInfo& o) {
  if (j.find("numericValNumUes") != j.end()) {
    j.at("numericValNumUes").get_to(o.m_NumericValNumUes);
    o.m_NumericValNumUesIsSet = true;
  }
  if (j.find("numericValNumPduSess") != j.end()) {
    j.at("numericValNumPduSess").get_to(o.m_NumericValNumPduSess);
    o.m_NumericValNumPduSessIsSet = true;
  }
  if (j.find("percValueNumUes") != j.end()) {
    j.at("percValueNumUes").get_to(o.m_PercValueNumUes);
    o.m_PercValueNumUesIsSet = true;
  }
  if (j.find("percValueNumPduSess") != j.end()) {
    j.at("percValueNumPduSess").get_to(o.m_PercValueNumPduSess);
    o.m_PercValueNumPduSessIsSet = true;
  }
}

int32_t SACInfo::getNumericValNumUes() const {
  return m_NumericValNumUes;
}
void SACInfo::setNumericValNumUes(int32_t const value) {
  m_NumericValNumUes      = value;
  m_NumericValNumUesIsSet = true;
}
bool SACInfo::numericValNumUesIsSet() const {
  return m_NumericValNumUesIsSet;
}
void SACInfo::unsetNumericValNumUes() {
  m_NumericValNumUesIsSet = false;
}
int32_t SACInfo::getNumericValNumPduSess() const {
  return m_NumericValNumPduSess;
}
void SACInfo::setNumericValNumPduSess(int32_t const value) {
  m_NumericValNumPduSess      = value;
  m_NumericValNumPduSessIsSet = true;
}
bool SACInfo::numericValNumPduSessIsSet() const {
  return m_NumericValNumPduSessIsSet;
}
void SACInfo::unsetNumericValNumPduSess() {
  m_NumericValNumPduSessIsSet = false;
}
int32_t SACInfo::getPercValueNumUes() const {
  return m_PercValueNumUes;
}
void SACInfo::setPercValueNumUes(int32_t const value) {
  m_PercValueNumUes      = value;
  m_PercValueNumUesIsSet = true;
}
bool SACInfo::percValueNumUesIsSet() const {
  return m_PercValueNumUesIsSet;
}
void SACInfo::unsetPercValueNumUes() {
  m_PercValueNumUesIsSet = false;
}
int32_t SACInfo::getPercValueNumPduSess() const {
  return m_PercValueNumPduSess;
}
void SACInfo::setPercValueNumPduSess(int32_t const value) {
  m_PercValueNumPduSess      = value;
  m_PercValueNumPduSessIsSet = true;
}
bool SACInfo::percValueNumPduSessIsSet() const {
  return m_PercValueNumPduSessIsSet;
}
void SACInfo::unsetPercValueNumPduSess() {
  m_PercValueNumPduSessIsSet = false;
}

}  // namespace oai::nef::model
