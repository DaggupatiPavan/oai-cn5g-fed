/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "MonitoringEventReports.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

MonitoringEventReports::MonitoringEventReports() {}

void MonitoringEventReports::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool MonitoringEventReports::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool MonitoringEventReports::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "MonitoringEventReports" : pathPrefix;

  /* MonitoringEventReports */ {
    const std::vector<MonitoringEventReport>& value = m_MonitoringEventReports;
    const std::string currentValuePath =
        _pathPrefix + ".monitoringEventReports";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const MonitoringEventReport& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".monitoringEventReports") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool MonitoringEventReports::operator==(
    const MonitoringEventReports& rhs) const {
  return

      (getMonitoringEventReports() == rhs.getMonitoringEventReports())

          ;
}

bool MonitoringEventReports::operator!=(
    const MonitoringEventReports& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MonitoringEventReports& o) {
  j                           = nlohmann::json();
  j["monitoringEventReports"] = o.m_MonitoringEventReports;
}

void from_json(const nlohmann::json& j, MonitoringEventReports& o) {
  j.at("monitoringEventReports").get_to(o.m_MonitoringEventReports);
}

std::vector<MonitoringEventReport>
MonitoringEventReports::getMonitoringEventReports() const {
  return m_MonitoringEventReports;
}
void MonitoringEventReports::setMonitoringEventReports(
    std::vector<MonitoringEventReport> const& value) {
  m_MonitoringEventReports = value;
}

}  // namespace oai::nef::model
