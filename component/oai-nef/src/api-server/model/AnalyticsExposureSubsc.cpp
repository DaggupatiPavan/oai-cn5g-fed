/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AnalyticsExposureSubsc.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AnalyticsExposureSubsc::AnalyticsExposureSubsc() {
  m_AnalyRepInfoIsSet     = false;
  m_NotifUri              = "";
  m_NotifId               = "";
  m_EventNotifisIsSet     = false;
  m_FailEventReportsIsSet = false;
  m_SuppFeat              = "";
  m_SuppFeatIsSet         = false;
  m_Self                  = "";
  m_SelfIsSet             = false;
}

void AnalyticsExposureSubsc::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AnalyticsExposureSubsc::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AnalyticsExposureSubsc::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AnalyticsExposureSubsc" : pathPrefix;

  /* AnalyEventsSubs */ {
    const std::vector<AnalyticsEventSubsc>& value = m_AnalyEventsSubs;
    const std::string currentValuePath = _pathPrefix + ".analyEventsSubs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const AnalyticsEventSubsc& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".analyEventsSubs") &&
                  success;

        i++;
      }
    }
  }

  if (eventNotifisIsSet()) {
    const std::vector<AnalyticsEventNotif>& value = m_EventNotifis;
    const std::string currentValuePath = _pathPrefix + ".eventNotifis";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const AnalyticsEventNotif& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".eventNotifis") && success;

        i++;
      }
    }
  }

  if (failEventReportsIsSet()) {
    const std::vector<AnalyticsFailureEventInfo>& value = m_FailEventReports;
    const std::string currentValuePath = _pathPrefix + ".failEventReports";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const AnalyticsFailureEventInfo& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".failEventReports") &&
                  success;

        i++;
      }
    }
  }

  if (suppFeatIsSet()) {
    const std::string& value           = m_SuppFeat;
    const std::string currentValuePath = _pathPrefix + ".suppFeat";
  }

  return success;
}

bool AnalyticsExposureSubsc::operator==(
    const AnalyticsExposureSubsc& rhs) const {
  return

      (getAnalyEventsSubs() == rhs.getAnalyEventsSubs()) &&

      ((!analyRepInfoIsSet() && !rhs.analyRepInfoIsSet()) ||
       (analyRepInfoIsSet() && rhs.analyRepInfoIsSet() &&
        getAnalyRepInfo() == rhs.getAnalyRepInfo())) &&

      (getNotifUri() == rhs.getNotifUri()) &&

      (getNotifId() == rhs.getNotifId()) &&

      ((!eventNotifisIsSet() && !rhs.eventNotifisIsSet()) ||
       (eventNotifisIsSet() && rhs.eventNotifisIsSet() &&
        getEventNotifis() == rhs.getEventNotifis())) &&

      ((!failEventReportsIsSet() && !rhs.failEventReportsIsSet()) ||
       (failEventReportsIsSet() && rhs.failEventReportsIsSet() &&
        getFailEventReports() == rhs.getFailEventReports())) &&

      ((!suppFeatIsSet() && !rhs.suppFeatIsSet()) ||
       (suppFeatIsSet() && rhs.suppFeatIsSet() &&
        getSuppFeat() == rhs.getSuppFeat())) &&

      ((!selfIsSet() && !rhs.selfIsSet()) ||
       (selfIsSet() && rhs.selfIsSet() && getSelf() == rhs.getSelf()))

          ;
}

bool AnalyticsExposureSubsc::operator!=(
    const AnalyticsExposureSubsc& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AnalyticsExposureSubsc& o) {
  j                    = nlohmann::json();
  j["analyEventsSubs"] = o.m_AnalyEventsSubs;
  if (o.analyRepInfoIsSet()) j["analyRepInfo"] = o.m_AnalyRepInfo;
  j["notifUri"] = o.m_NotifUri;
  j["notifId"]  = o.m_NotifId;
  if (o.eventNotifisIsSet() || !o.m_EventNotifis.empty())
    j["eventNotifis"] = o.m_EventNotifis;
  if (o.failEventReportsIsSet() || !o.m_FailEventReports.empty())
    j["failEventReports"] = o.m_FailEventReports;
  if (o.suppFeatIsSet()) j["suppFeat"] = o.m_SuppFeat;
  if (o.selfIsSet()) j["self"] = o.m_Self;
}

void from_json(const nlohmann::json& j, AnalyticsExposureSubsc& o) {
  j.at("analyEventsSubs").get_to(o.m_AnalyEventsSubs);
  if (j.find("analyRepInfo") != j.end()) {
    j.at("analyRepInfo").get_to(o.m_AnalyRepInfo);
    o.m_AnalyRepInfoIsSet = true;
  }
  j.at("notifUri").get_to(o.m_NotifUri);
  j.at("notifId").get_to(o.m_NotifId);
  if (j.find("eventNotifis") != j.end()) {
    j.at("eventNotifis").get_to(o.m_EventNotifis);
    o.m_EventNotifisIsSet = true;
  }
  if (j.find("failEventReports") != j.end()) {
    j.at("failEventReports").get_to(o.m_FailEventReports);
    o.m_FailEventReportsIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("self") != j.end()) {
    j.at("self").get_to(o.m_Self);
    o.m_SelfIsSet = true;
  }
}

std::vector<AnalyticsEventSubsc> AnalyticsExposureSubsc::getAnalyEventsSubs()
    const {
  return m_AnalyEventsSubs;
}
void AnalyticsExposureSubsc::setAnalyEventsSubs(
    std::vector<AnalyticsEventSubsc> const& value) {
  m_AnalyEventsSubs = value;
}
ReportingInformation AnalyticsExposureSubsc::getAnalyRepInfo() const {
  return m_AnalyRepInfo;
}
void AnalyticsExposureSubsc::setAnalyRepInfo(
    ReportingInformation const& value) {
  m_AnalyRepInfo      = value;
  m_AnalyRepInfoIsSet = true;
}
bool AnalyticsExposureSubsc::analyRepInfoIsSet() const {
  return m_AnalyRepInfoIsSet;
}
void AnalyticsExposureSubsc::unsetAnalyRepInfo() {
  m_AnalyRepInfoIsSet = false;
}
std::string AnalyticsExposureSubsc::getNotifUri() const {
  return m_NotifUri;
}
void AnalyticsExposureSubsc::setNotifUri(std::string const& value) {
  m_NotifUri = value;
}
std::string AnalyticsExposureSubsc::getNotifId() const {
  return m_NotifId;
}
void AnalyticsExposureSubsc::setNotifId(std::string const& value) {
  m_NotifId = value;
}
std::vector<AnalyticsEventNotif> AnalyticsExposureSubsc::getEventNotifis()
    const {
  return m_EventNotifis;
}
void AnalyticsExposureSubsc::setEventNotifis(
    std::vector<AnalyticsEventNotif> const& value) {
  m_EventNotifis      = value;
  m_EventNotifisIsSet = true;
}
bool AnalyticsExposureSubsc::eventNotifisIsSet() const {
  return m_EventNotifisIsSet;
}
void AnalyticsExposureSubsc::unsetEventNotifis() {
  m_EventNotifisIsSet = false;
}
std::vector<AnalyticsFailureEventInfo>
AnalyticsExposureSubsc::getFailEventReports() const {
  return m_FailEventReports;
}
void AnalyticsExposureSubsc::setFailEventReports(
    std::vector<AnalyticsFailureEventInfo> const& value) {
  m_FailEventReports      = value;
  m_FailEventReportsIsSet = true;
}
bool AnalyticsExposureSubsc::failEventReportsIsSet() const {
  return m_FailEventReportsIsSet;
}
void AnalyticsExposureSubsc::unsetFailEventReports() {
  m_FailEventReportsIsSet = false;
}
std::string AnalyticsExposureSubsc::getSuppFeat() const {
  return m_SuppFeat;
}
void AnalyticsExposureSubsc::setSuppFeat(std::string const& value) {
  m_SuppFeat      = value;
  m_SuppFeatIsSet = true;
}
bool AnalyticsExposureSubsc::suppFeatIsSet() const {
  return m_SuppFeatIsSet;
}
void AnalyticsExposureSubsc::unsetSuppFeat() {
  m_SuppFeatIsSet = false;
}
std::string AnalyticsExposureSubsc::getSelf() const {
  return m_Self;
}
void AnalyticsExposureSubsc::setSelf(std::string const& value) {
  m_Self      = value;
  m_SelfIsSet = true;
}
bool AnalyticsExposureSubsc::selfIsSet() const {
  return m_SelfIsSet;
}
void AnalyticsExposureSubsc::unsetSelf() {
  m_SelfIsSet = false;
}

}  // namespace oai::nef::model
