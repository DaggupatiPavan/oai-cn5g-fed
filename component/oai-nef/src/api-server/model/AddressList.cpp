/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AddressList.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

AddressList::AddressList() {
  m_Ipv4AddrsIsSet = false;
  m_Ipv6AddrsIsSet = false;
}

void AddressList::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool AddressList::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AddressList::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AddressList" : pathPrefix;

  if (ipv4AddrsIsSet()) {
    const std::vector<std::string>& value = m_Ipv4Addrs;
    const std::string currentValuePath    = _pathPrefix + ".ipv4Addrs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  if (ipv6AddrsIsSet()) {
    const std::vector<Ipv6Addr>& value = m_Ipv6Addrs;
    const std::string currentValuePath = _pathPrefix + ".ipv6Addrs";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const Ipv6Addr& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".ipv6Addrs") && success;

        i++;
      }
    }
  }

  return success;
}

bool AddressList::operator==(const AddressList& rhs) const {
  return

      ((!ipv4AddrsIsSet() && !rhs.ipv4AddrsIsSet()) ||
       (ipv4AddrsIsSet() && rhs.ipv4AddrsIsSet() &&
        getIpv4Addrs() == rhs.getIpv4Addrs())) &&

      ((!ipv6AddrsIsSet() && !rhs.ipv6AddrsIsSet()) ||
       (ipv6AddrsIsSet() && rhs.ipv6AddrsIsSet() &&
        getIpv6Addrs() == rhs.getIpv6Addrs()))

          ;
}

bool AddressList::operator!=(const AddressList& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AddressList& o) {
  j = nlohmann::json();
  if (o.ipv4AddrsIsSet() || !o.m_Ipv4Addrs.empty())
    j["ipv4Addrs"] = o.m_Ipv4Addrs;
  if (o.ipv6AddrsIsSet() || !o.m_Ipv6Addrs.empty())
    j["ipv6Addrs"] = o.m_Ipv6Addrs;
}

void from_json(const nlohmann::json& j, AddressList& o) {
  if (j.find("ipv4Addrs") != j.end()) {
    j.at("ipv4Addrs").get_to(o.m_Ipv4Addrs);
    o.m_Ipv4AddrsIsSet = true;
  }
  if (j.find("ipv6Addrs") != j.end()) {
    j.at("ipv6Addrs").get_to(o.m_Ipv6Addrs);
    o.m_Ipv6AddrsIsSet = true;
  }
}

std::vector<std::string> AddressList::getIpv4Addrs() const {
  return m_Ipv4Addrs;
}
void AddressList::setIpv4Addrs(std::vector<std::string> const& value) {
  m_Ipv4Addrs      = value;
  m_Ipv4AddrsIsSet = true;
}
bool AddressList::ipv4AddrsIsSet() const {
  return m_Ipv4AddrsIsSet;
}
void AddressList::unsetIpv4Addrs() {
  m_Ipv4AddrsIsSet = false;
}
std::vector<Ipv6Addr> AddressList::getIpv6Addrs() const {
  return m_Ipv6Addrs;
}
void AddressList::setIpv6Addrs(std::vector<Ipv6Addr> const& value) {
  m_Ipv6Addrs      = value;
  m_Ipv6AddrsIsSet = true;
}
bool AddressList::ipv6AddrsIsSet() const {
  return m_Ipv6AddrsIsSet;
}
void AddressList::unsetIpv6Addrs() {
  m_Ipv6AddrsIsSet = false;
}

}  // namespace oai::nef::model
