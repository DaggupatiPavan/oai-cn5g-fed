/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeCommunication.h
 *
 *
 */

#ifndef UeCommunication_H_
#define UeCommunication_H_

#include <nlohmann/json.hpp>
#include <string>

#include "ScheduledCommunicationTime.h"
#include "TrafficCharacterization.h"

namespace oai::nef::model {

/// <summary>
///
/// </summary>
class UeCommunication {
 public:
  UeCommunication();
  virtual ~UeCommunication() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const UeCommunication& rhs) const;
  bool operator!=(const UeCommunication& rhs) const;

  /////////////////////////////////////////////
  /// UeCommunication members

  /// <summary>
  ///
  /// </summary>
  int32_t getCommDur() const;
  void setCommDur(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  float getCommDurVariance() const;
  void setCommDurVariance(float const value);
  bool commDurVarianceIsSet() const;
  void unsetCommDurVariance();
  /// <summary>
  ///
  /// </summary>
  int32_t getPerioTime() const;
  void setPerioTime(int32_t const value);
  bool perioTimeIsSet() const;
  void unsetPerioTime();
  /// <summary>
  ///
  /// </summary>
  float getPerioTimeVariance() const;
  void setPerioTimeVariance(float const value);
  bool perioTimeVarianceIsSet() const;
  void unsetPerioTimeVariance();
  /// <summary>
  ///
  /// </summary>
  std::string getTs() const;
  void setTs(std::string const& value);
  bool tsIsSet() const;
  void unsetTs();
  /// <summary>
  ///
  /// </summary>
  float getTsVariance() const;
  void setTsVariance(float const value);
  bool tsVarianceIsSet() const;
  void unsetTsVariance();
  /// <summary>
  ///
  /// </summary>
  ScheduledCommunicationTime getRecurringTime() const;
  void setRecurringTime(ScheduledCommunicationTime const& value);
  bool recurringTimeIsSet() const;
  void unsetRecurringTime();
  /// <summary>
  ///
  /// </summary>
  TrafficCharacterization getTrafChar() const;
  void setTrafChar(TrafficCharacterization const& value);
  /// <summary>
  ///
  /// </summary>
  int32_t getRatio() const;
  void setRatio(int32_t const value);
  bool ratioIsSet() const;
  void unsetRatio();
  /// <summary>
  ///
  /// </summary>
  int32_t getConfidence() const;
  void setConfidence(int32_t const value);
  bool confidenceIsSet() const;
  void unsetConfidence();

  friend void to_json(nlohmann::json& j, const UeCommunication& o);
  friend void from_json(const nlohmann::json& j, UeCommunication& o);

 protected:
  int32_t m_CommDur;

  float m_CommDurVariance;
  bool m_CommDurVarianceIsSet;
  int32_t m_PerioTime;
  bool m_PerioTimeIsSet;
  float m_PerioTimeVariance;
  bool m_PerioTimeVarianceIsSet;
  std::string m_Ts;
  bool m_TsIsSet;
  float m_TsVariance;
  bool m_TsVarianceIsSet;
  ScheduledCommunicationTime m_RecurringTime;
  bool m_RecurringTimeIsSet;
  TrafficCharacterization m_TrafChar;

  int32_t m_Ratio;
  bool m_RatioIsSet;
  int32_t m_Confidence;
  bool m_ConfidenceIsSet;
};

}  // namespace oai::nef::model

#endif /* UeCommunication_H_ */
