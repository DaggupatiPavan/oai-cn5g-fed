/**
 * Nnef_EventExposure
 * NEF Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RmInfo.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

RmInfo::RmInfo() {}

void RmInfo::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool RmInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RmInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "RmInfo" : pathPrefix;

  return success;
}

bool RmInfo::operator==(const RmInfo& rhs) const {
  return

      (getRmState() == rhs.getRmState()) &&

      (getAccessType() == rhs.getAccessType())

          ;
}

bool RmInfo::operator!=(const RmInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RmInfo& o) {
  j               = nlohmann::json();
  j["rmState"]    = o.m_RmState;
  j["accessType"] = o.m_AccessType;
}

void from_json(const nlohmann::json& j, RmInfo& o) {
  j.at("rmState").get_to(o.m_RmState);
  j.at("accessType").get_to(o.m_AccessType);
}

RmState RmInfo::getRmState() const {
  return m_RmState;
}
void RmInfo::setRmState(RmState const& value) {
  m_RmState = value;
}
AccessType RmInfo::getAccessType() const {
  return m_AccessType;
}
void RmInfo::setAccessType(AccessType const& value) {
  m_AccessType = value;
}

}  // namespace oai::nef::model
