/**
 * 3gpp-analyticsexposure
 * API for Analytics Exposure. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ThresholdLevel.h"

#include <sstream>

#include "Helpers.h"

namespace oai::nef::model {

ThresholdLevel::ThresholdLevel() {
  m_CongLevel           = 0;
  m_CongLevelIsSet      = false;
  m_NfLoadLevel         = 0;
  m_NfLoadLevelIsSet    = false;
  m_NfCpuUsage          = 0;
  m_NfCpuUsageIsSet     = false;
  m_NfMemoryUsage       = 0;
  m_NfMemoryUsageIsSet  = false;
  m_NfStorageUsage      = 0;
  m_NfStorageUsageIsSet = false;
}

void ThresholdLevel::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool ThresholdLevel::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool ThresholdLevel::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "ThresholdLevel" : pathPrefix;

  return success;
}

bool ThresholdLevel::operator==(const ThresholdLevel& rhs) const {
  return

      ((!congLevelIsSet() && !rhs.congLevelIsSet()) ||
       (congLevelIsSet() && rhs.congLevelIsSet() &&
        getCongLevel() == rhs.getCongLevel())) &&

      ((!nfLoadLevelIsSet() && !rhs.nfLoadLevelIsSet()) ||
       (nfLoadLevelIsSet() && rhs.nfLoadLevelIsSet() &&
        getNfLoadLevel() == rhs.getNfLoadLevel())) &&

      ((!nfCpuUsageIsSet() && !rhs.nfCpuUsageIsSet()) ||
       (nfCpuUsageIsSet() && rhs.nfCpuUsageIsSet() &&
        getNfCpuUsage() == rhs.getNfCpuUsage())) &&

      ((!nfMemoryUsageIsSet() && !rhs.nfMemoryUsageIsSet()) ||
       (nfMemoryUsageIsSet() && rhs.nfMemoryUsageIsSet() &&
        getNfMemoryUsage() == rhs.getNfMemoryUsage())) &&

      ((!nfStorageUsageIsSet() && !rhs.nfStorageUsageIsSet()) ||
       (nfStorageUsageIsSet() && rhs.nfStorageUsageIsSet() &&
        getNfStorageUsage() == rhs.getNfStorageUsage()))

          ;
}

bool ThresholdLevel::operator!=(const ThresholdLevel& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ThresholdLevel& o) {
  j = nlohmann::json();
  if (o.congLevelIsSet()) j["congLevel"] = o.m_CongLevel;
  if (o.nfLoadLevelIsSet()) j["nfLoadLevel"] = o.m_NfLoadLevel;
  if (o.nfCpuUsageIsSet()) j["nfCpuUsage"] = o.m_NfCpuUsage;
  if (o.nfMemoryUsageIsSet()) j["nfMemoryUsage"] = o.m_NfMemoryUsage;
  if (o.nfStorageUsageIsSet()) j["nfStorageUsage"] = o.m_NfStorageUsage;
}

void from_json(const nlohmann::json& j, ThresholdLevel& o) {
  if (j.find("congLevel") != j.end()) {
    j.at("congLevel").get_to(o.m_CongLevel);
    o.m_CongLevelIsSet = true;
  }
  if (j.find("nfLoadLevel") != j.end()) {
    j.at("nfLoadLevel").get_to(o.m_NfLoadLevel);
    o.m_NfLoadLevelIsSet = true;
  }
  if (j.find("nfCpuUsage") != j.end()) {
    j.at("nfCpuUsage").get_to(o.m_NfCpuUsage);
    o.m_NfCpuUsageIsSet = true;
  }
  if (j.find("nfMemoryUsage") != j.end()) {
    j.at("nfMemoryUsage").get_to(o.m_NfMemoryUsage);
    o.m_NfMemoryUsageIsSet = true;
  }
  if (j.find("nfStorageUsage") != j.end()) {
    j.at("nfStorageUsage").get_to(o.m_NfStorageUsage);
    o.m_NfStorageUsageIsSet = true;
  }
}

int32_t ThresholdLevel::getCongLevel() const {
  return m_CongLevel;
}
void ThresholdLevel::setCongLevel(int32_t const value) {
  m_CongLevel      = value;
  m_CongLevelIsSet = true;
}
bool ThresholdLevel::congLevelIsSet() const {
  return m_CongLevelIsSet;
}
void ThresholdLevel::unsetCongLevel() {
  m_CongLevelIsSet = false;
}
int32_t ThresholdLevel::getNfLoadLevel() const {
  return m_NfLoadLevel;
}
void ThresholdLevel::setNfLoadLevel(int32_t const value) {
  m_NfLoadLevel      = value;
  m_NfLoadLevelIsSet = true;
}
bool ThresholdLevel::nfLoadLevelIsSet() const {
  return m_NfLoadLevelIsSet;
}
void ThresholdLevel::unsetNfLoadLevel() {
  m_NfLoadLevelIsSet = false;
}
int32_t ThresholdLevel::getNfCpuUsage() const {
  return m_NfCpuUsage;
}
void ThresholdLevel::setNfCpuUsage(int32_t const value) {
  m_NfCpuUsage      = value;
  m_NfCpuUsageIsSet = true;
}
bool ThresholdLevel::nfCpuUsageIsSet() const {
  return m_NfCpuUsageIsSet;
}
void ThresholdLevel::unsetNfCpuUsage() {
  m_NfCpuUsageIsSet = false;
}
int32_t ThresholdLevel::getNfMemoryUsage() const {
  return m_NfMemoryUsage;
}
void ThresholdLevel::setNfMemoryUsage(int32_t const value) {
  m_NfMemoryUsage      = value;
  m_NfMemoryUsageIsSet = true;
}
bool ThresholdLevel::nfMemoryUsageIsSet() const {
  return m_NfMemoryUsageIsSet;
}
void ThresholdLevel::unsetNfMemoryUsage() {
  m_NfMemoryUsageIsSet = false;
}
int32_t ThresholdLevel::getNfStorageUsage() const {
  return m_NfStorageUsage;
}
void ThresholdLevel::setNfStorageUsage(int32_t const value) {
  m_NfStorageUsage      = value;
  m_NfStorageUsageIsSet = true;
}
bool ThresholdLevel::nfStorageUsageIsSet() const {
  return m_NfStorageUsageIsSet;
}
void ThresholdLevel::unsetNfStorageUsage() {
  m_NfStorageUsageIsSet = false;
}

}  // namespace oai::nef::model
