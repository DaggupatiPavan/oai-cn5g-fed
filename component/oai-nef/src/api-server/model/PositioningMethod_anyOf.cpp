/**
 * 3gpp-mo-lcs-notify
 * API for UE updated location information notification. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PositioningMethod_anyOf.h"

#include <sstream>
#include <stdexcept>

#include "Helpers.h"

namespace oai::nef::model {

PositioningMethod_anyOf::PositioningMethod_anyOf() {}

void PositioningMethod_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::nef::helpers::ValidationException(msg.str());
  }
}

bool PositioningMethod_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool PositioningMethod_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "PositioningMethod_anyOf" : pathPrefix;

  if (m_value == PositioningMethod_anyOf::ePositioningMethod_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool PositioningMethod_anyOf::operator==(
    const PositioningMethod_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool PositioningMethod_anyOf::operator!=(
    const PositioningMethod_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PositioningMethod_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::CELLID:
      j = "CELLID";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::ECID:
      j = "ECID";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::OTDOA:
      j = "OTDOA";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::BAROMETRIC_PRESSURE:
      j = "BAROMETRIC_PRESSURE";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::WLAN:
      j = "WLAN";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::BLUETOOTH:
      j = "BLUETOOTH";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::MBS:
      j = "MBS";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::MOTION_SENSOR:
      j = "MOTION_SENSOR";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::DL_TDOA:
      j = "DL_TDOA";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::DL_AOD:
      j = "DL_AOD";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::MULTI_RTT:
      j = "MULTI-RTT";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::NR_ECID:
      j = "NR_ECID";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::UL_TDOA:
      j = "UL_TDOA";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::UL_AOA:
      j = "UL_AOA";
      break;
    case PositioningMethod_anyOf::ePositioningMethod_anyOf::NETWORK_SPECIFIC:
      j = "NETWORK_SPECIFIC";
      break;
  }
}

void from_json(const nlohmann::json& j, PositioningMethod_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "CELLID") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::CELLID);
  } else if (s == "ECID") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::ECID);
  } else if (s == "OTDOA") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::OTDOA);
  } else if (s == "BAROMETRIC_PRESSURE") {
    o.setValue(
        PositioningMethod_anyOf::ePositioningMethod_anyOf::BAROMETRIC_PRESSURE);
  } else if (s == "WLAN") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::WLAN);
  } else if (s == "BLUETOOTH") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::BLUETOOTH);
  } else if (s == "MBS") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::MBS);
  } else if (s == "MOTION_SENSOR") {
    o.setValue(
        PositioningMethod_anyOf::ePositioningMethod_anyOf::MOTION_SENSOR);
  } else if (s == "DL_TDOA") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::DL_TDOA);
  } else if (s == "DL_AOD") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::DL_AOD);
  } else if (s == "MULTI-RTT") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::MULTI_RTT);
  } else if (s == "NR_ECID") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::NR_ECID);
  } else if (s == "UL_TDOA") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::UL_TDOA);
  } else if (s == "UL_AOA") {
    o.setValue(PositioningMethod_anyOf::ePositioningMethod_anyOf::UL_AOA);
  } else if (s == "NETWORK_SPECIFIC") {
    o.setValue(
        PositioningMethod_anyOf::ePositioningMethod_anyOf::NETWORK_SPECIFIC);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " PositioningMethod_anyOf::ePositioningMethod_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

PositioningMethod_anyOf::ePositioningMethod_anyOf
PositioningMethod_anyOf::getValue() const {
  return m_value;
}
void PositioningMethod_anyOf::setValue(
    PositioningMethod_anyOf::ePositioningMethod_anyOf value) {
  m_value = value;
}

}  // namespace oai::nef::model
