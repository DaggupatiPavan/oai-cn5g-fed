/**
 * 3gpp-applying-bdt-policy
 * API for applying BDT policy Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualAppliedBDTPolicySubscriptionApi.h
 *
 *
 */

#ifndef IndividualAppliedBDTPolicySubscriptionApi_H_
#define IndividualAppliedBDTPolicySubscriptionApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/router.h>

#include <optional>
#include <string>
#include <utility>

#include "AppliedBdtPolicy.h"
#include "AppliedBdtPolicyPatch.h"
#include "ProblemDetails.h"

namespace oai::nef::api {

class IndividualAppliedBDTPolicySubscriptionApi {
 public:
  explicit IndividualAppliedBDTPolicySubscriptionApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~IndividualAppliedBDTPolicySubscriptionApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void af_id_subscriptions_subscription_id_delete_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void af_id_subscriptions_subscription_id_get_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void af_id_subscriptions_subscription_id_patch_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void individual_applied_bdt_policy_subscription_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Deletes an already existing subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param>
  virtual void af_id_subscriptions_subscription_id_delete(
      const std::string& afId, const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// read an active subscriptions for the SCS/AS and the subscription Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param>
  virtual void af_id_subscriptions_subscription_id_get(
      const std::string& afId, const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Updates/replaces an existing subscription resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param> <param name="appliedBdtPolicyPatch"></param>
  virtual void af_id_subscriptions_subscription_id_patch(
      const std::string& afId, const std::string& subscriptionId,
      const oai::nef::model::AppliedBdtPolicyPatch& appliedBdtPolicyPatch,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::nef::api

#endif /* IndividualAppliedBDTPolicySubscriptionApi_H_ */
