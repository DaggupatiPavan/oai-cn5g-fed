/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualMonitoringEventSubscriptionApi.h
 *
 *
 */

#ifndef IndividualMonitoringEventSubscriptionApi_H_
#define IndividualMonitoringEventSubscriptionApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/router.h>

#include <optional>
#include <string>
#include <utility>
#include <vector>

#include "MonitoringEventReport.h"
#include "MonitoringEventSubscription.h"
#include "PatchItem.h"
#include "ProblemDetails.h"

namespace oai::nef::api {
using namespace oai::nef::model;
class IndividualMonitoringEventSubscriptionApi {
 public:
  explicit IndividualMonitoringEventSubscriptionApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~IndividualMonitoringEventSubscriptionApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void delete_ind_monitoring_event_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void fetch_ind_monitoring_event_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void modify_ind_monitoring_event_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void update_ind_monitoring_event_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void individual_monitoring_event_subscription_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Deletes an already existing monitoring event subscription.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param>
  virtual void delete_ind_monitoring_event_subscription(
      const std::string& scsAsId, const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Read an active subscriptions for the SCS/AS and the subscription Id.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param>
  virtual void fetch_ind_monitoring_event_subscription(
      const std::string& scsAsId, const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Modifies an existing subscription of monitoring event.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS.</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource.</param> <param name="patchItem">This is used for PATCH request
  /// for partial cancellation of certain UE(s) within an active group.</param>
  virtual void modify_ind_monitoring_event_subscription(
      const std::string& scsAsId, const std::string& subscriptionId,
      const std::vector<PatchItem>& patchItem,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Updates/replaces an existing subscription resource.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="subscriptionId">Identifier of the subscription
  /// resource</param> <param name="monitoringEventSubscription">Parameters to
  /// update/replace the existing subscription</param>
  virtual void update_ind_monitoring_event_subscription(
      const std::string& scsAsId, const std::string& subscriptionId,
      const oai::nef::model::MonitoringEventSubscription&
          monitoringEventSubscription,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::nef::api

#endif /* IndividualMonitoringEventSubscriptionApi_H_ */
