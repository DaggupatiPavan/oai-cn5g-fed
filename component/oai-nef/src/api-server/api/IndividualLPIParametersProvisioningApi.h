/**
 * 3gpp-lpi-pp
 * API for Location Privacy Indication Parameters Provisioning. Â© 2021, 3GPP
 * Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights
 * reserved.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * IndividualLPIParametersProvisioningApi.h
 *
 *
 */

#ifndef IndividualLPIParametersProvisioningApi_H_
#define IndividualLPIParametersProvisioningApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/router.h>

#include <optional>
#include <string>
#include <utility>

#include "LpiParametersProvision.h"
#include "ProblemDetails.h"

namespace oai::nef::api {

class IndividualLPIParametersProvisioningApi {
 public:
  explicit IndividualLPIParametersProvisioningApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~IndividualLPIParametersProvisioningApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void af_id_provisioned_lpis_provisioned_lpi_id_delete_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void af_id_provisioned_lpis_provisioned_lpi_id_get_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void af_id_provisioned_lpis_provisioned_lpi_id_put_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void individual_lpi_parameters_provisioning_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Deletes an already existing LPI Parameters Provisioning resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="provisionedLpiId">Identifier of the provisioned LPI parameter
  /// resource</param>
  virtual void af_id_provisioned_lpis_provisioned_lpi_id_delete(
      const std::string& afId, const std::string& provisionedLpiId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// read an active LPI Parameters Provisioning resource for the AF and the
  /// provisioned LPI Id
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="provisionedLpiId">Identifier of the provisioned LPI parameter
  /// resource</param>
  virtual void af_id_provisioned_lpis_provisioned_lpi_id_get(
      const std::string& afId, const std::string& provisionedLpiId,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Updates/replaces an existing LPI Parameters Provisioning resource
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="afId">Identifier of the AF</param>
  /// <param name="provisionedLpiId">Identifier of the provisioned LPI parameter
  /// resource</param> <param name="lpiParametersProvision">Parameters to
  /// update/replace the existing resource</param>
  virtual void af_id_provisioned_lpis_provisioned_lpi_id_put(
      const std::string& afId, const std::string& provisionedLpiId,
      const oai::nef::model::LpiParametersProvision& lpiParametersProvision,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::nef::api

#endif /* IndividualLPIParametersProvisioningApi_H_ */
