/**
 * 3gpp-monitoring-event
 * API for Monitoring Event. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringEventSubscriptionsApi.h
 *
 *
 */

#ifndef MonitoringEventSubscriptionsApi_H_
#define MonitoringEventSubscriptionsApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/router.h>

#include <optional>
#include <string>
#include <utility>

#include "IpAddr.h"
#include "MonitoringEventReport.h"
#include "MonitoringEventReports.h"
#include "MonitoringEventSubscription.h"
#include "ProblemDetails.h"

namespace oai::nef::api {
using namespace oai::nef::model;
class MonitoringEventSubscriptionsApi {
 public:
  explicit MonitoringEventSubscriptionsApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~MonitoringEventSubscriptionsApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void create_monitoring_event_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void fetch_all_monitoring_event_subscriptions_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void monitoring_event_subscriptions_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Creates a new subscription resource for monitoring event notification.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="monitoringEventSubscription">Subscription for notification
  /// about monitoring event</param>
  virtual void create_monitoring_event_subscription(
      const std::string& scsAsId,
      const oai::nef::model::MonitoringEventSubscription&
          monitoringEventSubscription,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Read all of the active subscriptions for the SCS/AS.
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="scsAsId">Identifier of the SCS/AS</param>
  /// <param name="ipAddrs">The IP address(es) of the requested UE(s).
  /// (optional, default to
  /// std::vector&lt;std::shared_ptr&lt;IpAddr&gt;&gt;())</param> <param
  /// name="ipDomain">The IPv4 address domain identifier. The attribute may only
  /// be provided if IPv4 address is included in the ip-addrs query parameter.
  /// (optional, default to &quot;&quot;)</param> <param name="macAddrs">The MAC
  /// address(es) of the requested UE(s). (optional, default to
  /// std::vector&lt;std::shared_ptr&lt;std::string&gt;&gt;())</param>
  virtual void fetch_all_monitoring_event_subscriptions(
      const std::string& scsAsId,
      const std::optional<std::vector<IpAddr>>& ipAddrs,
      const std::optional<std::string>& ipDomain,
      const std::optional<std::vector<std::string>>& macAddrs,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::nef::api

#endif /* MonitoringEventSubscriptionsApi_H_ */
