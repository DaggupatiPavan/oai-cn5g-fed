################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################

SMF =
{
    FQDN          = "oai-smf-svc";
    INSTANCE      = {{ env["INSTANCE"] if "INSTANCE" in env.keys() else 0 }};         # 0 is the default
    PID_DIRECTORY = "{{ env["PID_DIRECTORY"] if "PID_DIRECTORY" in env.keys() else '/var/run' }}";  # /var/run is the default

    INTERFACES :
    {
        N4 :
        {
            # SMF binded interface for N4 communication (UPF)
            INTERFACE_NAME = "{{ env["SMF_INTERFACE_NAME_FOR_N4"] }}"; # YOUR NETWORK CONFIG HERE
            IPV4_ADDRESS   = "read";
         };

        SBI :
        {
            # SMF binded interface for SBI interface (e.g., communication with AMF, UDM)
            INTERFACE_NAME = "{{ env["SMF_INTERFACE_NAME_FOR_SBI"] }}";     # YOUR NETWORK CONFIG HERE
            IPV4_ADDRESS   = "read";
            # YOUR NETWORK CONFIG HERE (default: 80)
            PORT           = {{ env["SMF_INTERFACE_PORT_FOR_SBI"] if "SMF_INTERFACE_PORT_FOR_SBI" in env.keys() else '80' }};
            # YOUR NETWORK CONFIG HERE (default: 8080)
            HTTP2_PORT     = {{ env["SMF_INTERFACE_HTTP2_PORT_FOR_SBI"] if "SMF_INTERFACE_HTTP2_PORT_FOR_SBI" in env.keys() else '8080' }};
            # YOUR NETWORK CONFIG HERE (default: v1)
            API_VERSION    = "{{ env["SMF_API_VERSION"] if "SMF_API_VERSION" in env.keys() else 'v1' }}";
         };

    };

    # DNN configurations with pool of UE assigned IP addresses
    # Do not make IP pools overlap
    # first IPv4 address X.Y.Z.1 is reserved for GTP network device on UPF
    DNN_LIST = (
       # PDU_SESSION_TYPE choice in {IPv4, IPv6, IPv4v6}
       # DNN IP ADDRESS RANGE format is for example: "12.2.1.2 - 12.2.1.128"
      {%- if env["DNN_NI0"] is defined %}
      {
        DNN_NI = "{{ env["DNN_NI0"] }}";
        PDU_SESSION_TYPE = "{{ env["TYPE0"] if "TYPE0" in env.keys() else 'IPv4' }}";
        IPV4_RANGE = "{{ env["DNN_RANGE0"] }}";
        IPV6_PREFIX = "2001:1:2::/64"
      }
      {%- if env["DNN_NI1"] is defined %}
      ,{
        DNN_NI = "{{ env["DNN_NI1"] }}";
        PDU_SESSION_TYPE = "{{ env["TYPE1"] if "TYPE1" in env.keys() else 'IPv4' }}";
        IPV4_RANGE = "{{ env["DNN_RANGE1"] }}";
        IPV6_PREFIX = "2001:1:2::/64"
      }
      {%- endif %}
      {%- if env["DNN_NI2"] is defined %}
      ,{
        DNN_NI = "{{ env["DNN_NI2"] }}";
        PDU_SESSION_TYPE = "{{ env["TYPE2"] if "TYPE2" in env.keys() else 'IPv4' }}";
        IPV4_RANGE = "{{ env["DNN_RANGE2"] }}";
        IPV6_PREFIX = "2001:1:2::/64"
      }
      {%- endif %}
      {%- if env["DNN_NI3"] is defined %}
      ,{
        DNN_NI = "{{ env["DNN_NI3"] }}";
        PDU_SESSION_TYPE = "{{ env["TYPE3"] if "TYPE3" in env.keys() else 'IPv4' }}";
        IPV4_RANGE = "{{ env["DNN_RANGE3"] }}";
        IPV6_PREFIX = "2001:1:2::/64"
      }
      {%- endif %}
      {%- endif %}
    );

    # DNS address communicated to UEs
    DEFAULT_DNS_IPV4_ADDRESS     = "{{ env["DEFAULT_DNS_IPV4_ADDRESS"] }}";      # YOUR DNS CONFIG HERE
    DEFAULT_DNS_SEC_IPV4_ADDRESS = "{{ env["DEFAULT_DNS_SEC_IPV4_ADDRESS"] }}";  # YOUR DNS CONFIG HERE
    DEFAULT_DNS_IPV6_ADDRESS     = "2001:4860:4860::8888";            # YOUR DNS CONFIG HERE
    DEFAULT_DNS_SEC_IPV6_ADDRESS = "2001:4860:4860::8844";            # YOUR DNS CONFIG HERE

    #Default P-CSCF server
    DEFAULT_CSCF_IPV4_ADDRESS = "{{ env["DEFAULT_CSCF_IPV4_ADDRESS"] if "DEFAULT_CSCF_IPV4_ADDRESS" in env.keys() else '127.0.0.1' }}";
    DEFAULT_CSCF_IPV6_ADDRESS = "fe80::7915:f408:1787:db8b";

    #Default UE MTU
    UE_MTU = {{ env["UE_MTU"] if "UE_MTU" in env.keys() else '1500' }};

    # SUPPORT FEATURES
    SUPPORT_FEATURES:
    {
      # STRING, {"yes", "no"},
      # Set to yes if SMF resgisters to an NRF
      REGISTER_NRF = "{{ env["REGISTER_NRF"] if "REGISTER_NRF" in env.keys() else 'no' }}";
      # Set to yes to enable UPF discovery and selection
      DISCOVER_UPF = "{{ env["DISCOVER_UPF"] if "DISCOVER_UPF" in env.keys() else 'no' }}";
      # Set to yes to enable PCF discovery and selection
      DISCOVER_PCF = "{{ env["DISCOVER_PCF"] if "DISCOVER_PCF" in env.keys() else 'no' }}";
      # Non standard feature, normally should be set to "no",
      # but you may need to set to yes for UE that do not explicitly request a PDN address through NAS signalling
      FORCE_PUSH_PROTOCOL_CONFIGURATION_OPTIONS = "no";
      # Set to yes if SMF uses local subscription information instead of from an UDM
      USE_LOCAL_SUBSCRIPTION_INFO = "{{ env["USE_LOCAL_SUBSCRIPTION_INFO"] if "USE_LOCAL_SUBSCRIPTION_INFO" in env.keys() else 'no' }}";
      # Set to yes if SMF uses local PCC rules instead of from an PCF
      USE_LOCAL_PCC_RULES = "{{ env["USE_LOCAL_PCC_RULES"] if "USE_LOCAL_PCC_RULES" in env.keys() else 'yes' }}";
      # Set to yes if AMF/UDM/NRF/UPF will relying on a DNS to resolve FQDN
      USE_FQDN_DNS = "{{ env["USE_FQDN_DNS"] if "USE_FQDN_DNS" in env.keys() else 'no' }}";
      # Default: 1
      HTTP_VERSION = {{ env["HTTP_VERSION"] if "HTTP_VERSION" in env.keys() else '1' }};
      # Set yes if network instance is to be used for given UPF
      USE_NETWORK_INSTANCE    = "{{ env["USE_NETWORK_INSTANCE"] if "USE_NETWORK_INSTANCE" in env.keys() else 'no' }}";
      # Set yes if UE USAGE REPORTING is to be done at UPF
      ENABLE_USAGE_REPORTING = "{{ env["ENABLE_USAGE_REPORTING"] if "ENABLE_USAGE_REPORTING" in env.keys() else 'no' }}"
    }

    AMF :
    {
      {%- if env["AMF_HOSTNAME"] is defined %}
      IPV4_ADDRESS = "{{ resolve(env["AMF_HOSTNAME"]) }}";
      {%- else %}
      IPV4_ADDRESS = "{{ env["AMF_IPV4_ADDRESS"] if "AMF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      {%- endif %}
      PORT         = {{ env["AMF_PORT"] if "AMF_PORT" in env.keys() else '80' }};
      API_VERSION  = "{{ env["AMF_API_VERSION"] if "AMF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["AMF_FQDN"] if "AMF_FQDN" in env.keys() else 'localhost' }}"
    };

    UDM :
    {
      {%- if env["UDM_HOSTNAME"] is defined %}
      IPV4_ADDRESS = "{{ resolve(env["UDM_HOSTNAME"]) }}";
      {%- else %}
      IPV4_ADDRESS = "{{ env["UDM_IPV4_ADDRESS"] if "UDM_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      {%- endif %}
      PORT         = {{ env["UDM_PORT"] if "UDM_PORT" in env.keys() else '80' }};
      API_VERSION  = "{{ env["UDM_API_VERSION"] if "UDM_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["UDM_FQDN"] if "UDM_FQDN" in env.keys() else 'localhost' }}"
    };

    NRF :
    {
      {%- if env["NRF_HOSTNAME"] is defined %}
      IPV4_ADDRESS = "{{ resolve(env["NRF_HOSTNAME"]) }}";
      {%- else %}
      IPV4_ADDRESS = "{{ env["NRF_IPV4_ADDRESS"] if "NRF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      {%- endif %}
      PORT         = {{ env["NRF_PORT"] if "NRF_PORT" in env.keys() else '80' }};
      API_VERSION  = "{{ env["NRF_API_VERSION"] if "NRF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["NRF_FQDN"] if "NRF_FQDN" in env.keys() else 'localhost' }}"
    };

    PCF :
    {
      {%- if env["PCF_HOSTNAME"] is defined %}
      IPV4_ADDRESS = "{{ resolve(env["PCF_HOSTNAME"]) }}";
      {%- else %}
      IPV4_ADDRESS = "{{ env["PCF_IPV4_ADDRESS"] if "PCF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
      {%- endif %}
      PORT         = {{ env["PCF_PORT"] if "PCF_PORT" in env.keys() else '80' }};
      API_VERSION  = "{{ env["PCF_API_VERSION"] if "PCF_API_VERSION" in env.keys() else 'v1' }}";
      FQDN         = "{{ env["PCF_FQDN"] if "PCF_FQDN" in env.keys() else 'localhost' }}"
    };

    UPF_LIST = (
      {
        {%- if env["UPF0_HOSTNAME"] is defined %}
        IPV4_ADDRESS = "{{ resolve(env["UPF0_HOSTNAME"]) }}";
        {%- else %}
        IPV4_ADDRESS = "{{ env["UPF_IPV4_ADDRESS"] if "UPF_IPV4_ADDRESS" in env.keys() else '0.0.0.0' }}";
        {%- endif %}
        FQDN         = "{{ env["UPF_FQDN_0"] if "UPF_FQDN_0" in env.keys() else 'localhost' }}";
        NWI_LIST     = (
          {
            DOMAIN_ACCESS  = "{{ env["DOMAIN_ACCESS_0"] if "DOMAIN_ACCESS_0" in env.keys() else 'access.oai.org' }}",
            DOMAIN_CORE    = "{{ env["DOMAIN_CORE_0"] if "DOMAIN_CORE_0" in env.keys() else 'core.oai.org' }}"
          }
        )
      }
    );

    LOCAL_CONFIGURATION :
    {
      SESSION_MANAGEMENT_SUBSCRIPTION_LIST = (
         {%- if env["NSSAI_SST0"] is defined %}
         {
           NSSAI_SST = {{ env["NSSAI_SST0"] }},
           NSSAI_SD = "{{ env["NSSAI_SD0"] if "NSSAI_SD0" in env.keys() else '0xFFFFFF' }}",
           DNN = "{{ env["DNN_NI0"] }}",
           DEFAULT_SESSION_TYPE = "{{ env["TYPE0"] if "TYPE0" in env.keys() else 'IPv4' }}",
           DEFAULT_SSC_MODE = 1,
           QOS_PROFILE_5QI = {{ env["QOS_PROFILE_5QI0"] if "QOS_PROFILE_5QI0" in env.keys() else '6' }},
           QOS_PROFILE_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
           QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
           SESSION_AMBR_UL = "{{ env["SESSION_AMBR_UL0"] if "SESSION_AMBR_UL0" in env.keys() else '1000Mbps' }}",
           SESSION_AMBR_DL = "{{ env["SESSION_AMBR_DL0"] if "SESSION_AMBR_DL0" in env.keys() else '1500Mbps' }}"
         }
         {%- if env["NSSAI_SST1"] is defined %}
         ,{
           NSSAI_SST = {{ env["NSSAI_SST1"] }},
           NSSAI_SD = "{{ env["NSSAI_SD1"] if "NSSAI_SD1" in env.keys() else '0xFFFFFF' }}",
           DNN = "{{ env["DNN_NI1"] }}",
           DEFAULT_SESSION_TYPE = "{{ env["TYPE1"] if "TYPE1" in env.keys() else 'IPv4' }}",
           DEFAULT_SSC_MODE = 1,
           QOS_PROFILE_5QI = {{ env["QOS_PROFILE_5QI1"]  if "QOS_PROFILE_5QI1" in env.keys() else '7' }},
           QOS_PROFILE_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
           QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
           SESSION_AMBR_UL = "{{ env["SESSION_AMBR_UL1"] if "SESSION_AMBR_UL1" in env.keys() else '1000Mbps' }}",
           SESSION_AMBR_DL = "{{ env["SESSION_AMBR_DL1"] if "SESSION_AMBR_DL1" in env.keys() else '1500Mbps' }}"
         }
         {%- endif %}
         {%- if env["NSSAI_SST2"] is defined %}
         ,{
           NSSAI_SST = {{ env["NSSAI_SST2"] }},
           NSSAI_SD = "{{ env["NSSAI_SD2"] if "NSSAI_SD2" in env.keys() else '0xFFFFFF' }}",
           DNN = "{{ env["DNN_NI2"] }}",
           DEFAULT_SESSION_TYPE = "{{ env["TYPE2"] if "TYPE2" in env.keys() else 'IPv4' }}",
           DEFAULT_SSC_MODE = 1,
           QOS_PROFILE_5QI = {{ env["QOS_PROFILE_5QI2"] if "QOS_PROFILE_5QI2" in env.keys() else '8'}},
           QOS_PROFILE_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
           QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
           SESSION_AMBR_UL = "{{ env["SESSION_AMBR_UL2"] if "SESSION_AMBR_UL2" in env.keys() else '1000Mbps' }}",
           SESSION_AMBR_DL = "{{ env["SESSION_AMBR_DL2"] if "SESSION_AMBR_DL2" in env.keys() else '1500Mbps' }}"
         }
         {%- endif %}
         {%- if env["NSSAI_SST3"] is defined %}
         ,{
           NSSAI_SST = {{ env["NSSAI_SST3"] }},
           NSSAI_SD = "{{ env["NSSAI_SD3"] if "NSSAI_SD3" in env.keys() else '0xFFFFFF' }}",
           DNN = "{{ env["DNN_NI3"] }}",
           DEFAULT_SESSION_TYPE = "{{ env["TYPE3"] if "TYPE3" in env.keys() else 'IPv4' }}",
           DEFAULT_SSC_MODE = 1,
           QOS_PROFILE_5QI = {{ env["QOS_PROFILE_5QI3"] if "QOS_PROFILE_5QI3" in env.keys() else '9' }},
           QOS_PROFILE_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
           QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
           QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
           SESSION_AMBR_UL = "{{ env["SESSION_AMBR_UL3"] if "SESSION_AMBR_UL3" in env.keys() else '1000Mbps' }}",
           SESSION_AMBR_DL = "{{ env["SESSION_AMBR_DL3"] if "SESSION_AMBR_DL3" in env.keys() else '1500Mbps' }}"
         }
         {%- endif %}
         {%- endif %}
        );
    };

};

