mysql:
  enabled: true
  weight: 0
  imagePullPolicy: IfNotPresent
  oai5gdatabase: basic
  imagePullSecrets:
    - name: regcred
  persistence:
    enabled: false
oai-nssf:
  enabled: true
  weight: 0
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-nssf          ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  imagePullSecrets:
    - name: "regcred"
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-nrf:
  enabled: true
  weight: 0
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-nrf           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udr:
  enabled: true
  weight: 1
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udr           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-udm:
  enabled: true
  weight: 2
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-udm           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-ausf:
  enabled: true
  weight: 3
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-ausf           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    logLevel: "debug"   #allowed info/error/debug
  nodeSelector: {}
oai-amf:
  enabled: true
  weight: 4
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-amf           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  multus:
    ## If you don't want to add a default route in your pod then leave this field empty
    defaultGateway: "172.21.7.254"
    n2Interface:
      create: false
      Ipadd: "172.21.6.94"
      Netmask: "22"
      ## If you do not have a gateway leave the field empty
      Gateway:
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}]
      hostInterface: "bond0" # Interface of the host machine on which this pod will be scheduled
  config:
    amfInterfaceNameForNGAP: "eth0" # If oai-amf.multus.n2Interface.create is true then n2 else eth0
    amfInterfaceNameForSBI: "eth0"  # Service based interface
    externalAusf: "yes"
    externalNssf: "yes"
    nrfSelection: "yes"
    nfRegistration: "yes"
    smfSelection: "no"
    useHttp2: "no"
    nssfFqdn: "oai-nssf-svc"
    nrfSelection: "yes"
    logLevel: "debug"   #allowed info/error/debug
    sst0: "1"         ## 1 slice/SST is mandatory
    sd0: "0xFFFFFF"   ## Optional 0xFFFFFF means no SD as per 3GPP
    ## Can add upto 3 more slices. More than that you can do it in the configmap of amf templates/configmap.yaml
    # Note only SST is mandatory for a slice SD is optional
    sst1: "1"
    sd1: "1"
    mcc: "001"
    mnc: "01"
    tac: "0x0001"
    intAlgoList: '[ "NIA0" , "NIA1" , "NIA2" ]'
    ciphAlgoList: '[ "NEA0" , "NEA1" , "NEA2" ]'
  nodeSelector: {}
oai-spgwu-tiny:
  enabled: true
  weight: 5
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-spgwu-tiny    ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  # create an extra interface for N3 incase the gNB is outside the cluster network or there is a need to have dedicated interface for N3
  ## Change these ip-addresses according to your environment
  ## N4, N6 are optional only if you want that UPF uses different subnets for different 3gpp interfaces. 
  multus:
    ## If you don't want to add a default route in your pod then leave this field empty
    defaultGateway: ""
    n3Interface:
      create: false
      Ipadd: "172.21.8.95"
      Netmask: "22"
      # #name inside the pod is hardcoded right now
      # name: "n3"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: [{'dst': '10.8.0.0/24','gw': '172.21.11.254'}, {'dst': '10.9.0.0/24','gw': '172.21.11.254'}]
      hostInterface: "bond0"
    ## For n4 it is better to re-use eth0 interface inside the pod (primary CNI of Kubernetes)
    n4Interface:
      create: false
      Ipadd: "192.168.24.2"
      Netmask: "24"
      # #name inside the pod is hardcoded right now
      # name: "n4"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: ""
      hostInterface: "bond0"
    n6Interface:
      create: false
      Ipadd: "192.168.22.2"
      # #name inside the pod is hardcoded right now
      # name: "n6"
      Netmask: "24"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      routes: ""
      hostInterface: "bond0"
  #NOTE: If the interface you selected for n6If is wrong then traffic will not be routed towards internet
  config:
    n3If: "eth0"  # n3 if multus.n3Interface.create is true
    n4If: "eth0" # n4 if multus.n4Interface.create is true
    n6If: "eth0"  # n6 multus.n6Interface.create is true
    logLevel: "info"   #allowed info/error/debug
    threadsN3Ul: "1"
    threadsN6Dl: "1"
    threadsN6Prio: 98
    threadsN3Prio: 88
    threadsN4Prio: 88
    netUeIp: "12.1.1.0/24"  # The range in which UE ip-address will be allocated should be configured the same in SMF
    registerNRF: "yes"
    nrfFqdn: "oai-nrf-svc" # make sure this can be resolved by container dns
    #Mandatory to configure atlease one slice
    nssaiSst0: 1 # should match with SMF information
    nssaiSd0: "0xFFFFFF"  # should match with SMF information (Optional, if removed sd value will be 0xFFFFFF)
    dnn0: "oai" # should match with SMF information
    #Upto 4 slices can be added from here to add more you need to add manullay in config.yaml. Please follow the same way of adding slices nssaiSST$,nssaiSd$,dnn$ ($=0,1,2,3)
    nssaiSst1: 1 # should match with SMF information (Optional, if removed slice will not be configured)
    nssaiSd1: "0xFFFFFF"  # should match with SMF information (Optional, if removed sd value will be 0xFFFFFF only if nssaiSst1 is configured)
    dnn1: "ims" # should match with SMF information
    netUeIp: "12.1.1.0/24"
  nodeSelector: {}
oai-smf:
  enabled: true
  weight: 6
  kubernetesType: Vanilla #Openshift/Vanilla Vanilla for Upstream Kubernetes
  nfimage:  # image name either locally present or in a public/private repository
    repository: docker.io/oaisoftwarealliance/oai-smf           ## The image will be pulled from dockerhub
    version: v1.5.1                                   ## The branch to be used to pull from dockerhub
    # pullPolicy: IfNotPresent or Never or Always
    pullPolicy: IfNotPresent
  multus:
    ## If you don't want to add a default route in your pod then leave this field empty
    defaultGateway: ""
    n4Interface:
      create: false
      Ipadd: "192.168.24.3"
      Netmask: "24"
      ## If you do not have a gateway leave the field empty
      Gateway: ""
      ## If you do not want to add any routes in your pod then leave this field empty
      #routes: [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}, {'dst': '10.9.0.0/24','gw': '172.21.7.254'}]
      hostInterface: "bond0"
  includeTcpDumpContainer: false #only for taking pcaps inside network function pod
  imagePullSecrets:
    - name: "regcred"
  config:
    useLocalSubscriptionInfo: "no" #this means ip-address information will be fetched from UDR
    ueMtu: 1500
    dnsIpv4Address: "172.21.3.100" # configure the dns for UE don't use Kubernetes DNS
    dnsSecIpv4Address: "172.21.3.100" # configure the dns for UE don't use Kubernetes DNS
    defaultCSCFIpv4Address: "172.21.6.200" # For IMS server if needed
    discoverUpf: "yes"              # if NRF is used then it can be used for UPF discovery
    # You can define maximum 4 slices from here in case of more please change the configuration file.
    logLevel: "debug"   #allowed info/error/debug
    dnnNi0: "oai"
    pdusessiontype0: "IPv4"
    ipv4dnnRange0: "12.1.1.2 - 12.1.1.40"
    nssaiSst0: 1
    nssaiSd0: "0xFFFFFF"
    qosProfile5qi0: 2
    sessionAmbrUl0: "1000Mbps"
    sessionAmbrDl0: "1000Mbps"
    # Extra optional slice
    dnnNi1: "ims"
    pdusessiontype1: "IPv4v6"
    ipv4dnnRange1: "12.2.1.41 - 12.2.1.254"
    nssaiSst1: 1
    nssaiSd1: "0xFFFFFF"
    qosProfile5qi1: 1
    sessionAmbrUl1: "1000Mbps"
    sessionAmbrDl1: "1000Mbps"
  nodeSelector: {}

