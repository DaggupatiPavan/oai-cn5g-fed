kubernetesType: Openshift  #Vanilla for community kubernetes distribution

nfimage:  # image name either locally present or in a public/private repository
  repository: image-registry.openshift-image-registry.svc:5000/oaicicd-core/oai-amf  ## The image will be pulled from dockerhub
  version: AMF_TAG                                    #image tag, develop tag for experimental features 
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

tcpdumpimage:
  repository: support-tools
  version: 8.7-8
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub mention 
#imagePullSecrets:
#  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  name: "oai-amf-sa"

#service type is fixed to clusterIP, it is only support for non multus interface (eth0)

## OPENSHIFT terminology
podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

## OPENSHIFT terminology
securityContext:
  capabilities:
    add: 
     - NET_ADMIN
    drop: 
     - ALL
  privileged: true

start:
  amf: true
  tcpdump: true # WARNING: start tcpdump collection to analyse but beware it will take a lot of space in the container/persistent volume

# AMF needs two seperate interface one for http (for SBI) and other one for SCTP (N1/N2) to communicate with gNB. 
# But for experimentation only one interface can be used. 
# When you need multus:
# 1. you want seperate interface for N1/N2 and Namf 
# 2. Your gnB is outside the cluster and the host machine can communicate but pods can not then you can provide ip-address in the same range as your host machine
# 3. You want static ip-address for N1/N2 interface, Namf can be discovered by its service name


multus:
  create: true
  n2IPadd: "172.21.6.200"
  n2Netmask: "22"
  n2Gateway: "172.21.7.254"
  hostInterface: "bond0"      # Interface of the host machine on which this pod will be scheduled

## Incase the pod is not able to resolve the FQDN of other network functions example nrf then you can disable useFqdnDns feature this way AMF will talk to other network functions using their ip-address. 

config:
  mcc: "001"
  mnc: "01"
  regionId: "128"
  amfSetId: "1"
  tac: "0x0001"
  sst0: "1"
  sd0: "0xFFFFFF"
  sst1: "1"
  sd1: "1"
  amfInterfaceNameForNGAP: "net1" # If multus creation is true then net1 else eth0
  amfInterfaceNameForSBI: "eth0"  # Service based interface
  amfInterfaceSBIHTTPPort: 80  # Service based interface
  amfInterfaceSBIHTTP2Port: 8080  # Service based interface
  smfFqdn: "oai-smf-svc"
  nrfFqdn: "oai-nrf-svc"  # amf communicates using FQDN
  ausfFqdn: "oai-ausf-svc"   #only needed if ausf is used and externalAusf is true else internal ausf will be used
  nfRegistration: "yes"
  nrfSelection: "no"
  smfSelection: "yes"
  externalAusf: "yes"
  externalUdm: "no"
  externalNrf: "no"
  externalNssf: "no"
  useHttp2: "no"
  intAlgoList: '[ "NIA1" , "NIA1" , "NIA2" ]'
  ciphAlgoList: '[ "NEA0" , "NEA1" , "NEA2" ]'
  mySqlServer: "mysql" # OPTIONAL: used only if not using AUSF
  mySqlUser: "root" # OPTIONAL: used only if not using AUSF
  mySqlPass: "linux" # OPTIONAL: used only if not using AUSF
  mySqlDb: "oai_db" # OPTIONAL: used only if not using AUSF
  logLevel: "debug"

persistent:
  sharedvolume: true
  volumneName: nfs-client
  size: 1Gi

resources:
  define: false
  limits:
    tcpdump:
      cpu: 100m
      memory: 128Mi
    nf:
      cpu: 100m
      memory: 128Mi
  requests:
    tcpdump:
      cpu: 100m
      memory: 128Mi
    nf:
      cpu: 100m
      memory: 128Mi

readinessProbe: false

livenessProbe: false

terminationGracePeriodSeconds: 5

nodeSelector: {}

nodeName: dedale
